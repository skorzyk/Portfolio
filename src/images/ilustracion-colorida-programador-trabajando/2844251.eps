%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Programmer working 2 up-02.eps
%%Creator: Adobe Illustrator(R) 23.0
%%For: Ayib
%%CreationDate: 30/08/19
%%BoundingBox: 0 0 500 500
%%HiResBoundingBox: 0 0 500 500
%%CropBox: 0 0 500 500
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 23.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 23.0.2 x567 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c145 79.163499, 2018/08/13-16:40:22        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Programmer working 2 up-02</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2019-08-30T19:43:05+07:00</xmp:MetadataDate>
         <xmp:ModifyDate>2019-08-30T19:43:05+07:00</xmp:ModifyDate>
         <xmp:CreateDate>2019-08-30T19:43:05+07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 23.0 (Macintosh)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9R4UOxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;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&#xA;xV2KuxV//9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:c2b915af-92f3-43b4-919d-48a36df990ac</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:c2b915af-92f3-43b4-919d-48a36df990ac</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:57e2c203-8755-0247-a9ca-5c548924d1ae</stRef:instanceID>
            <stRef:documentID>xmp.did:b1f617f7-7599-43a2-a21f-15f2a7db9586</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9055feea-6df3-418a-84b0-35eb367eec15</stEvt:instanceID>
                  <stEvt:when>2016-04-18T22:41:34+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:c2b915af-92f3-43b4-919d-48a36df990ac</stEvt:instanceID>
                  <stEvt:when>2019-08-30T19:43:05+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>500.000000</stDim:w>
            <stDim:h>500.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Color Group 1</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=20 G=27 B=86 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>20</xmpG:red>
                           <xmpG:green>27</xmpG:green>
                           <xmpG:blue>86</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Kulit</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=188 G=136 B=103</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>188</xmpG:red>
                           <xmpG:green>136</xmpG:green>
                           <xmpG:blue>103</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=109 G=75 B=53 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>109</xmpG:red>
                           <xmpG:green>75</xmpG:green>
                           <xmpG:blue>53</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=90</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>65</xmpG:red>
                           <xmpG:green>64</xmpG:green>
                           <xmpG:blue>66</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=80</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>88</xmpG:red>
                           <xmpG:green>89</xmpG:green>
                           <xmpG:blue>91</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=70</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>109</xmpG:red>
                           <xmpG:green>110</xmpG:green>
                           <xmpG:blue>113</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=60</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>128</xmpG:red>
                           <xmpG:green>130</xmpG:green>
                           <xmpG:blue>133</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=50</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>147</xmpG:red>
                           <xmpG:green>149</xmpG:green>
                           <xmpG:blue>152</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=40</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>167</xmpG:red>
                           <xmpG:green>169</xmpG:green>
                           <xmpG:blue>172</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=30</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>188</xmpG:red>
                           <xmpG:green>190</xmpG:green>
                           <xmpG:blue>192</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=20</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>209</xmpG:red>
                           <xmpG:green>211</xmpG:green>
                           <xmpG:blue>212</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=10</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>230</xmpG:red>
                           <xmpG:green>231</xmpG:green>
                           <xmpG:blue>232</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=5</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>241</xmpG:red>
                           <xmpG:green>242</xmpG:green>
                           <xmpG:blue>242</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Freepik logo</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=165 G=183 B=198</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>165</xmpG:red>
                           <xmpG:green>183</xmpG:green>
                           <xmpG:blue>198</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=29 G=38 B=45</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>29</xmpG:red>
                           <xmpG:green>38</xmpG:green>
                           <xmpG:blue>45</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=249 G=251 B=252</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>249</xmpG:red>
                           <xmpG:green>251</xmpG:green>
                           <xmpG:blue>252</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Color Group 5</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=251 G=209 B=91 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>251</xmpG:red>
                           <xmpG:green>209</xmpG:green>
                           <xmpG:blue>91</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=236 G=130 B=125</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>236</xmpG:red>
                           <xmpG:green>130</xmpG:green>
                           <xmpG:blue>125</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=190 G=225 B=244</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>190</xmpG:red>
                           <xmpG:green>225</xmpG:green>
                           <xmpG:blue>244</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=96 G=107 B=241</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>96</xmpG:red>
                           <xmpG:green>107</xmpG:green>
                           <xmpG:blue>241</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=135 G=140 B=240</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>135</xmpG:red>
                           <xmpG:green>140</xmpG:green>
                           <xmpG:blue>240</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=86 G=84 B=140</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>86</xmpG:red>
                           <xmpG:green>84</xmpG:green>
                           <xmpG:blue>140</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=17 G=43 B=70</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>17</xmpG:red>
                           <xmpG:green>43</xmpG:green>
                           <xmpG:blue>70</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>kulit orang II</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>133</xmpG:green>
                           <xmpG:blue>120</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Kulit orang</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>200</xmpG:green>
                           <xmpG:blue>175</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -500 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 500 li
500 500 li
500 0 li
cp
clp
500 500 mo
0 500 li
0 0 li
500 0 li
500 500 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
.0154421 .00189212 .00241093 0 cmyk
f
465.681 304.585 mo
449.914 415.294 li
48.9981 415.294 li
37.1578 330.838 li
35.8409 321.376 41.0722 312.206 49.9004 308.535 cv
85.4829 293.769 li
85.4829 258.381 li
85.4829 247.955 93.1162 239.115 103.433 237.615 cv
111.846 236.383 li
125.979 188.595 li
128.613 179.668 136.808 173.56 146.1 173.56 cv
290.66 173.56 li
296.159 173.56 301.195 175.681 304.951 179.169 cv
308.707 182.669 311.183 187.534 311.585 193.021 cv
380.42 200.289 li
390.639 201.374 398.565 209.678 399.175 219.934 cv
401.955 267.686 li
450.597 281.428 li
460.718 284.281 467.156 294.183 465.681 304.585 cv
.130556 .0327459 .0328984 0 cmyk
f
73.0342 327.417 mo
85.5493 415.294 li
403.78 415.294 li
413.179 348.257 li
414.225 340.745 410.072 333.467 403.064 330.554 cv
374.82 318.832 li
374.82 290.743 li
374.82 282.468 368.762 275.45 360.573 274.26 cv
353.894 273.282 li
342.676 235.349 li
340.585 228.264 334.081 223.415 326.705 223.415 cv
211.959 223.415 li
207.594 223.415 203.597 225.099 200.615 227.867 cv
197.634 230.645 195.669 234.507 195.35 238.863 cv
140.711 244.631 li
132.6 245.493 126.308 252.084 125.824 260.225 cv
123.617 298.128 li
85.0073 309.036 li
76.9736 311.302 71.8628 319.161 73.0342 327.417 cv
.185489 .0820935 .0659495 0 cmyk
f
335.572 382.549 mo
335.572 373.077 328.637 365.046 319.266 363.683 cv
311.622 362.564 li
298.782 319.15 li
296.39 311.042 288.945 305.492 280.504 305.492 cv
149.178 305.492 li
144.182 305.492 139.606 307.419 136.195 310.588 cv
132.783 313.767 130.534 318.187 130.168 323.172 cv
73.3105 329.175 li
85.5757 415.294 li
337.013 415.294 li
335.572 414.696 li
335.572 382.549 li
cp
.256077 .115297 .101961 0 cmyk
f
217.786 99.1182 mo
217.786 190.172 li
120.231 190.172 li
120.231 99.1182 li
217.786 99.1182 li
.968536 .803983 .453803 .460548 cmyk
f
217.786 108.748 mo
120.231 108.748 li
120.231 99.1182 li
217.786 99.1182 li
217.786 108.748 li
.8869 .675685 .387915 .236027 cmyk
f
196.698 104.042 mo
196.698 105.017 195.908 105.808 194.934 105.808 cv
193.958 105.808 193.168 105.017 193.168 104.042 cv
193.168 103.067 193.958 102.277 194.934 102.277 cv
195.908 102.277 196.698 103.067 196.698 104.042 cv
cp
.704921 .625177 0 0 cmyk
f
204.069 104.042 mo
204.069 105.017 203.279 105.808 202.304 105.808 cv
201.329 105.808 200.539 105.017 200.539 104.042 cv
200.539 103.067 201.329 102.277 202.304 102.277 cv
203.279 102.277 204.069 103.067 204.069 104.042 cv
cp
.0158694 .165713 .759853 0 cmyk
f
210.913 104.228 mo
210.913 105.203 210.123 105.993 209.148 105.993 cv
208.173 105.993 207.383 105.203 207.383 104.228 cv
207.383 103.253 208.173 102.463 209.148 102.463 cv
210.123 102.463 210.913 103.253 210.913 104.228 cv
cp
0 .600915 .45304 0 cmyk
f
151.395 118.861 mo
137.578 118.861 li
137.578 117.7 li
151.395 117.7 li
151.395 118.861 li
cp
f
167.612 118.861 mo
153.795 118.861 li
153.795 117.7 li
167.612 117.7 li
167.612 118.861 li
cp
.0158694 .165713 .759853 0 cmyk
f
163.277 125.117 mo
141.852 125.117 li
141.852 123.956 li
163.277 123.956 li
163.277 125.117 li
cp
.704921 .625177 0 0 cmyk
f
177.711 125.117 mo
166.82 125.117 li
166.82 123.956 li
177.711 123.956 li
177.711 125.117 li
cp
0 .600915 .45304 0 cmyk
f
158.694 131.373 mo
149.284 131.373 li
149.284 130.211 li
158.694 130.211 li
158.694 131.373 li
cp
.0158694 .165713 .759853 0 cmyk
f
195.351 131.373 mo
164.133 131.373 li
164.133 130.211 li
195.351 130.211 li
195.351 131.373 li
cp
f
192.27 137.628 mo
156.593 137.628 li
156.593 136.467 li
192.27 136.467 li
192.27 137.628 li
cp
.704921 .625177 0 0 cmyk
f
158.653 143.884 mo
147.673 143.884 li
147.673 142.723 li
158.653 142.723 li
158.653 143.884 li
cp
0 .600915 .45304 0 cmyk
f
174.331 143.884 mo
163.351 143.884 li
163.351 142.723 li
174.331 142.723 li
174.331 143.884 li
cp
.704921 .625177 0 0 cmyk
f
153.552 175.179 mo
137.578 175.179 li
137.578 176.34 li
153.552 176.34 li
153.552 175.179 li
cp
0 .600915 .45304 0 cmyk
f
175.119 175.179 mo
159.146 175.179 li
159.146 176.34 li
175.119 176.34 li
175.119 175.179 li
cp
.0158694 .165713 .759853 0 cmyk
f
196.106 175.179 mo
180.133 175.179 li
180.133 176.34 li
196.106 176.34 li
196.106 175.179 li
cp
0 .600915 .45304 0 cmyk
f
173.069 168.923 mo
141.852 168.923 li
141.852 170.084 li
173.069 170.084 li
173.069 168.923 li
cp
.704921 .625177 0 0 cmyk
f
209.153 168.923 mo
177.937 168.923 li
177.937 170.084 li
209.153 170.084 li
209.153 168.923 li
cp
0 .600915 .45304 0 cmyk
f
180.262 162.667 mo
149.284 162.667 li
149.284 163.828 li
180.262 163.828 li
180.262 162.667 li
cp
f
191.585 162.667 mo
182.963 162.667 li
182.963 163.828 li
191.585 163.828 li
191.585 162.667 li
cp
.0158694 .165713 .759853 0 cmyk
f
158.923 156.411 mo
147.261 156.411 li
147.261 157.572 li
158.923 157.572 li
158.923 156.411 li
cp
f
176.778 156.411 mo
165.116 156.411 li
165.116 157.572 li
176.778 157.572 li
176.778 156.411 li
cp
.704921 .625177 0 0 cmyk
f
195.94 156.411 mo
184.278 156.411 li
184.278 157.572 li
195.94 157.572 li
195.94 156.411 li
cp
0 .600915 .45304 0 cmyk
f
177.132 150.155 mo
160.779 150.155 li
160.779 151.317 li
177.132 151.317 li
177.132 150.155 li
cp
.0158694 .165713 .759853 0 cmyk
f
154.61 150.155 mo
138.258 150.155 li
138.258 151.317 li
154.61 151.317 li
154.61 150.155 li
cp
.704921 .625177 0 0 cmyk
f
130.021 118.071 mo
128.535 118.071 li
128.535 116.584 li
130.021 116.584 li
130.021 118.071 li
cp
.0154421 .00189212 .00241093 0 cmyk
f
130.021 125.65 mo
128.535 125.65 li
128.535 122.619 li
130.021 122.619 li
130.021 125.65 li
cp
130.021 133.229 mo
128.535 133.229 li
128.535 130.198 li
130.021 130.198 li
130.021 133.229 li
cp
130.021 140.809 mo
128.535 140.809 li
128.535 137.777 li
130.021 137.777 li
130.021 140.809 li
cp
130.021 148.388 mo
128.535 148.388 li
128.535 145.356 li
130.021 145.356 li
130.021 148.388 li
cp
130.021 155.967 mo
128.535 155.967 li
128.535 152.936 li
130.021 152.936 li
130.021 155.967 li
cp
130.021 163.547 mo
128.535 163.547 li
128.535 160.516 li
130.021 160.516 li
130.021 163.547 li
cp
130.021 171.126 mo
128.535 171.126 li
128.535 168.095 li
130.021 168.095 li
130.021 171.126 li
cp
f
130.021 177.161 mo
128.535 177.161 li
128.535 175.674 li
130.021 175.674 li
130.021 177.161 li
cp
f
319.106 129.29 mo
238.776 129.29 li
238.776 79.7749 li
319.106 79.7749 li
319.106 129.29 li
cp
0 .600915 .45304 0 cmyk
f
269.975 99.6904 mo
260.417 103.77 li
269.975 107.789 li
268.724 110.676 li
257.262 105.556 li
257.262 102.013 li
268.724 96.8623 li
269.975 99.6904 li
cp
.0154421 .00189212 .00241093 0 cmyk
f
284.06 90.2529 mo
277.123 116.899 li
273.818 116.125 li
280.785 89.5088 li
284.06 90.2529 li
cp
f
300.646 102.013 mo
300.646 105.556 li
289.184 110.676 li
287.934 107.789 li
297.461 103.77 li
287.934 99.6904 li
289.184 96.8623 li
300.646 102.013 li
cp
f
362.101 208.296 mo
316.348 208.296 li
316.348 175.7 li
362.101 175.7 li
362.101 208.296 li
cp
.704921 .625177 0 0 cmyk
f
335.486 182.737 mo
334.015 182.737 333.523 183.134 333.523 184.232 cv
333.523 189.138 li
333.523 191.054 332.729 191.638 331.397 192.012 cv
332.729 192.362 333.523 192.946 333.523 194.838 cv
333.523 199.744 li
333.523 200.842 334.038 201.239 335.486 201.239 cv
335.486 203.389 li
331.771 203.389 330.72 202.197 330.72 199.721 cv
330.72 195.072 li
330.72 193.74 330.37 193.226 329.155 193.226 cv
329.155 190.773 li
330.37 190.773 330.72 190.236 330.72 188.904 cv
330.72 184.255 li
330.72 181.756 331.771 180.588 335.486 180.588 cv
335.486 182.737 li
cp
.0402228 .022919 .0259098 0 cmyk
f
347.728 184.255 mo
347.728 188.904 li
347.728 190.236 348.078 190.773 349.316 190.773 cv
349.316 193.226 li
348.078 193.226 347.728 193.74 347.728 195.072 cv
347.728 199.721 li
347.728 202.197 346.677 203.389 342.963 203.389 cv
342.963 201.239 li
344.411 201.239 344.925 200.842 344.925 199.744 cv
344.925 194.838 li
344.925 192.946 345.719 192.362 347.051 192.012 cv
345.719 191.638 344.925 191.054 344.925 189.138 cv
344.925 184.232 li
344.925 183.134 344.435 182.737 342.963 182.737 cv
342.963 180.588 li
346.677 180.588 347.728 181.756 347.728 184.255 cv
cp
f
140.513 121.208 mo
89.1831 121.208 li
89.1831 86.876 li
140.513 86.876 li
140.513 121.208 li
cp
.0158694 .165713 .759853 0 cmyk
f
116.984 106.182 mo
114.661 108.504 110.882 108.504 108.559 106.181 cv
106.236 103.858 106.236 100.08 108.559 97.7568 cv
110.882 95.4341 114.661 95.4341 116.984 97.7568 cv
119.307 100.08 119.307 103.859 116.984 106.182 cv
cp
106.171 96.7314 mo
103.72 99.7988 103.758 104.28 106.255 107.31 cv
109.092 110.752 113.952 111.307 117.444 108.979 cv
122.832 114.366 li
123.059 114.593 123.427 114.593 123.655 114.366 cv
125.168 112.852 li
125.396 112.625 125.396 112.256 125.168 112.029 cv
119.781 106.642 li
121.963 103.37 121.613 98.8965 118.729 96.0117 cv
115.219 92.5024 109.359 92.7422 106.171 96.7314 cv
cp
.0154421 .00189212 .00241093 0 cmyk
f
289.825 192.922 mo
289.714 194.056 288.164 205.896 275.989 205.896 cv
263.208 205.896 265.349 193.241 265.349 193.241 cv
265.333 193.162 li
266.579 192.906 267.921 192.81 269.343 192.97 cv
269.343 186.979 li
283.851 178.862 li
284.378 178.862 li
284.378 192.842 li
284.378 192.842 286.678 192.57 289.825 192.922 cv
cp
level3{
gsave
clp
[12.9255 0 0 12.9255 277.52 192.379 ]ct
/0 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~!'s'S!'s'S!'s'S!'s*T!('0U!('3V!('3V!('3V!(0<X!(0<X!(0?Y!(0?Y!(9EZ!(9EZ!(9H[!(9H[
!(BN\!(BN\!(BQ]!(BQ]!(BT^!(KZ_!(KZ_!(KZ_!(K]`!(K]`!(Tca!(Tca!(Tfb!(Tfb!(]lc!(]lc
!(]od!(fue!(fue!(g#f!(p)g!(p)g!(p,h!(p,h!)$2i!)$2i!)$5j!)-;k!)-;k!)->l!)6Dm!)6Dm
!)6Gn!)?Mo!)?Pp!)?Sq!)HYr!)H\s!)H\s!)H\s!)Qeu!)Qeu!)Qi!!)Qi!!)Zr#!)Zr#!)Zr#!)d&%
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.9255 0 0 12.9255 277.52 192.379 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
0 <~5X7S"5X7S"5X7S"5X@\%5s[e&5s[e&5s[e&5sdn)6:+"*6:+"*6:+"*6:4+-6UO4.6UO4.6UO4.6UX=1
6psF26psF26psF26psF26psI477BX677BX677BX677BX677B[87Rfj:7Rfj:7Rfj:7Rfm<7n6'>7n6'>
7n6'?84Z9B84Z9B84Z9C8P)KF8P)KF8P)KF8P)KG8kM]J8kM]J8kM]K91qoN91qoN91qoO9MA,R9MA,R
9MA,R9he>V9he>V9he>V:/4PZ:/4PZ:/4PZ:/4PZ:JXb^:JXb^:JXb^:JXb^:f'tb:f'tb:f'tb;,L1f
~>
<~77BX677BX677Ka97Rfj:7Ros=7n6'>7n6'>7n?0A84Z9B84cBE8P)KF8P)KF8P)KF8P2TI8kM]J8kM]J
8kM]J8kM`L91qoN91qrP9MA,R9MA,R9MA,R9MA/T9he>V9he>V9he>V9heAX:/4PZ:/4PZ:/4PZ:/4S\
:JXb^:JXb^:JXb_:f'tb:f'tb:f'tc;,L1f;,L1f;,L1f;,L1g;GpCj;GpCj;GpCk;c?Un;c?Un;c?Uo
<)cgr<)cgr<E3%!<`W7%<`W7%='&I)='&I)='&I)=BJ[-=BJ[-=]nm1=]nm1>$>*5>$>*5>$>*5>?b<9
~>
0 ]
>>
0 0 0 0 0 1 [
]true true []
/DeviceCMYK
RadialShade
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
282.779 152.117 mo
284.837 154.203 286.392 156.902 287.14 160.201 cv
288.534 166.347 287.223 172.85 285.439 178.773 cv
285.135 179.787 284.788 180.809 284.162 181.662 cv
283.716 182.27 283.141 182.771 282.571 183.267 cv
279.991 185.514 277.411 187.762 274.837 190.016 cv
273.091 191.543 262.348 192.816 260.297 191.351 cv
252.396 185.701 250.875 169.333 252.456 160.964 cv
255.08 147.082 272.923 142.119 282.779 152.117 cv
cp
level3{
gsave
clp
[19.9211 -4.28947 4.28947 19.9211 270.042 168.983 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[19.9211 -4.28947 4.28947 19.9211 270.042 168.983 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
278.342 169.882 mo
278.447 168.546 279.821 167.083 281.2 167.95 cv
282.628 168.848 282.292 171.221 281.7 172.526 cv
281.236 173.551 279.685 174.672 278.633 173.72 cv
277.753 172.921 279.121 171.98 279.166 171.251 cv
279.207 170.595 277.895 170.125 278.432 169.423 cv
.00662242 .363867 .385321 0 cmyk
f
278.595 176.061 mo
280.035 176.493 282.475 175.395 283.092 173.389 cv
283.709 171.383 283.643 169.093 283.643 169.093 cv
283.643 169.093 284.368 170.909 283.995 173.831 cv
283.622 176.752 282.599 179.535 280.306 179.572 cv
278.013 179.608 278.595 176.061 278.595 176.061 cv
cp
f
276.828 173.982 mo
276.667 174.03 li
275.775 174.155 275.419 173.076 275.287 172.401 cv
274.978 170.824 275.026 169.228 274.972 167.633 cv
274.959 167.233 274.99 166.734 274.826 166.358 cv
274.325 165.211 272.99 164.466 272.583 163.281 cv
272.109 161.903 273.447 160.528 272.916 159.02 cv
272.104 156.709 269.136 156.178 266.99 156.203 cv
263.77 156.241 260.63 156.838 257.452 157.331 cv
254.097 157.852 249.809 158.346 246.853 156.224 cv
243.289 153.667 241.801 147.002 244.46 143.354 cv
245.909 141.364 248.658 140.305 251.066 140.25 cv
253.619 140.191 255.776 141.713 258.118 142.479 cv
259.983 143.089 261.787 141.305 263.53 140.957 cv
265.722 140.519 266.652 142.911 268.591 142.976 cv
270.474 143.04 272.321 141.569 274.152 141.235 cv
277.803 140.568 277.588 144.235 280.037 145.487 cv
281.56 146.266 283.526 145.794 285.066 146.585 cv
286.236 147.186 286.4 148.242 286.655 149.438 cv
286.876 150.473 286.888 151.667 287.229 152.65 cv
287.535 153.534 288.277 154.092 288.856 154.783 cv
289.488 155.538 289.892 156.418 290.212 157.364 cv
290.923 159.462 291.081 161.725 290.887 163.921 cv
290.562 167.607 289.375 171.236 288.144 174.708 cv
287.345 176.96 287.048 179.306 285.819 181.438 cv
285.489 182.011 284.023 183.685 283.478 182.438 cv
283.361 182.171 283.379 181.867 283.399 181.576 cv
283.562 179.253 285.724 164.289 280.055 166.086 cv
278.865 166.464 278.067 167.454 277.623 168.583 cv
277.093 169.935 277.056 171.296 277.123 172.724 cv
277.133 172.928 277.138 173.133 277.13 173.337 cv
277.12 173.601 277.054 173.869 276.828 173.982 cv
cp
.904234 .87863 .219638 .0841993 cmyk
f
269.343 191.599 mo
275.789 190.563 280.042 185.471 280.042 185.471 cv
280.042 185.471 278.304 194.052 268.956 194.506 cv
269.343 191.599 li
cp
.00662242 .363867 .385321 0 cmyk
f
279.924 308.57 mo
289.15 308.57 li
289.15 397.096 li
289.15 397.993 288.422 398.722 287.524 398.722 cv
281.55 398.722 li
280.651 398.722 279.924 397.993 279.924 397.096 cv
279.924 308.57 li
cp
.924651 .772671 .518883 .621668 cmyk
f
259.166 309.836 mo
309.908 309.836 li
309.908 311.221 li
309.908 314.708 307.081 317.535 303.594 317.535 cv
265.48 317.535 li
261.993 317.535 259.166 314.708 259.166 311.221 cv
259.166 309.836 li
cp
.852964 .675349 .425727 .29456 cmyk
f
279.924 388.226 mo
289.15 388.226 li
289.15 408.739 li
289.15 409.637 288.422 410.365 287.524 410.365 cv
281.55 410.365 li
280.651 410.365 279.924 409.637 279.924 408.739 cv
279.924 388.226 li
cp
.924651 .772671 .518883 .621668 cmyk
f
236.657 404.965 mo
236.657 407.947 239.075 410.365 242.058 410.365 cv
245.039 410.365 247.457 407.947 247.457 404.965 cv
247.457 401.982 245.039 399.565 242.058 399.565 cv
239.075 399.565 236.657 401.982 236.657 404.965 cv
cp
f
321.616 404.965 mo
321.616 407.947 324.034 410.365 327.017 410.365 cv
329.999 410.365 332.417 407.947 332.417 404.965 cv
332.417 401.982 329.999 399.565 327.017 399.565 cv
324.034 399.565 321.616 401.982 321.616 404.965 cv
cp
f
275.256 397.57 mo
293.818 397.57 li
293.818 381.35 li
275.256 381.35 li
275.256 397.57 li
cp
.852964 .675349 .425727 .29456 cmyk
f
236.657 401.387 mo
332.417 401.387 li
332.417 399.505 li
332.417 396.328 329.842 393.754 326.665 393.754 cv
242.408 393.754 li
239.232 393.754 236.657 396.328 236.657 399.505 cv
236.657 401.387 li
cp
.0158694 .165713 .759853 0 cmyk
f
284.537 379.902 mo
281.337 379.902 li
281.337 319.354 li
284.537 319.354 li
284.537 379.902 li
cp
.852964 .675349 .425727 .29456 cmyk
f
320.786 244.403 mo
318.572 244.333 316.772 246.166 316.9 248.377 cv
317.533 259.367 315.204 286.177 304.968 295.324 cv
292.452 306.509 256.979 304.985 256.979 304.985 cv
256.979 304.985 251.12 312.175 262.837 313.772 cv
274.554 315.37 307.573 314.306 315.562 306.85 cv
323.294 299.632 327.885 280.723 324.425 247.811 cv
324.227 245.924 322.684 244.462 320.786 244.403 cv
cp
.0158694 .165713 .759853 0 cmyk
f
254.324 379.902 mo
258.542 389.521 li
245.617 395.193 li
241.383 385.543 li
254.324 379.902 li
cp
level3{
gsave
clp
[8.12587 0 0 8.12587 249.963 387.548 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.12587 0 0 8.12587 249.963 387.548 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
315.277 272.999 mo
314.479 274.598 257.049 273.031 251.624 273.526 cv
251.624 273.526 216.475 290.303 211.426 306.008 cv
210.914 307.59 210.771 309.683 210.931 312.176 cv
212.336 334.288 237.517 387.236 237.517 387.236 cv
241.383 385.543 li
254.324 379.902 li
256.162 379.104 li
256.162 379.104 236.19 319.589 240.185 316.394 cv
244.179 313.198 289.442 305.21 305.147 300.96 cv
320.869 296.693 315.277 272.999 315.277 272.999 cv
cp
.770871 .747158 .181369 .033051 cmyk
f
205.048 382.377 mo
206.058 396.827 li
191.949 396.827 li
190.939 382.345 li
205.048 382.377 li
cp
level3{
gsave
clp
[7.40153 0 0 7.40153 198.499 389.586 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[7.40153 0 0 7.40153 198.499 389.586 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
251.337 273.031 mo
250.825 273.255 li
250.825 273.255 191.981 281.516 182.396 298.02 cv
176.164 308.756 188.225 387.209 188.225 387.209 cv
209.043 387.257 li
209.043 387.257 205.93 321.905 206.968 318.263 cv
208.135 314.108 210.132 312.606 210.931 312.176 cv
210.771 309.683 210.914 307.59 211.426 306.008 cv
216.475 290.303 251.624 273.526 251.624 273.526 cv
251.513 273.447 251.416 273.271 251.337 273.031 cv
cp
.904234 .87863 .219638 .0841993 cmyk
f
308.173 218.661 mo
304.227 219.204 li
304.227 219.204 303.268 229.845 300.919 240.486 cv
251.758 259.147 li
251.086 262.71 li
250.879 262.694 250.671 262.678 250.479 262.662 cv
250.495 263.397 250.495 264.116 250.527 264.787 cv
250.639 268.894 250.91 271.849 251.342 273.031 cv
251.422 273.271 251.518 273.447 251.63 273.526 cv
252.965 274.615 270.353 272.505 289.15 279.407 cv
305.453 285.394 314.591 291.932 315.013 291.054 cv
320.137 280.402 310.809 238.601 308.173 218.661 cv
cp
0 .600915 .45304 0 cmyk
f
303.044 243.042 mo
301.734 249.337 298.347 261.863 291.7 263.541 cv
283.024 265.746 266.249 265.634 250.527 264.787 cv
250.495 264.116 250.495 263.397 250.479 262.662 cv
250.671 262.678 250.879 262.694 251.086 262.71 cv
251.758 259.147 li
300.919 240.486 li
303.268 229.845 304.227 219.204 304.227 219.204 cv
304.227 219.204 304.227 219.268 304.242 219.38 cv
304.338 221.026 305.009 233.744 303.044 243.042 cv
cp
0 .746212 .603571 0 cmyk
f
253.766 202.956 mo
252.887 204.553 251.624 221.649 250.938 238.617 cv
240.888 229.238 li
245.153 220.978 253.766 202.956 253.766 202.956 cv
cp
f
247.742 251.015 mo
239.258 252.484 231.461 253.747 231.461 253.747 cv
231.445 254.162 li
222.003 246.621 207.639 225.26 207.639 225.26 cv
207.639 225.26 211.937 220.099 213.008 218.741 cv
213.167 218.533 236.59 234.654 237.788 234.51 cv
238.092 234.479 239.29 232.37 240.888 229.238 cv
250.938 238.617 li
250.777 242.659 250.649 246.685 250.569 250.503 cv
249.627 250.679 248.685 250.839 247.742 251.015 cv
cp
.00662242 .363867 .385321 0 cmyk
f
231.461 253.747 mo
231.253 260.745 li
205.689 260.745 li
205.689 260.745 208.23 250.759 215.148 250.759 cv
222.066 250.759 224.734 254.418 224.734 254.418 cv
231.461 253.747 li
cp
level3{
gsave
clp
[40.9202 6.56975 -6.56975 40.9202 243.561 250.697 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[40.9202 6.56975 -6.56975 40.9202 243.561 250.697 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
212.815 218.581 mo
213.008 218.741 li
211.937 220.099 207.639 225.26 207.639 225.26 cv
204.971 223.375 li
204.971 223.375 202.031 225.164 198.612 223.294 cv
195.049 221.361 197.254 216.745 197.437 216.198 cv
196.746 216.393 192.477 219.843 191.806 219.476 cv
191.135 219.108 190.64 217.894 195.416 213.181 cv
200.178 208.468 206.664 214.523 206.856 214.523 cv
212.815 218.581 li
cp
.00662242 .363867 .385321 0 cmyk
f
199.168 222.493 mo
199.168 222.493 198.138 224.421 199.969 225.26 cv
201.8 226.098 205.362 226.703 206.893 226.556 cv
208.423 226.408 209.64 224.267 209.64 224.267 cv
205.005 219.918 li
201.3 219.918 li
199.168 222.493 li
cp
f
198.894 223.44 mo
199.168 222.493 201.8 222.998 203.431 223.037 cv
204.633 223.065 205.291 222.75 205.662 221.834 cv
206.034 220.919 204.289 219.46 203.946 219.918 cv
203.603 220.375 204.575 221.02 204.604 221.627 cv
204.633 222.235 202.888 222.436 201.543 222.436 cv
200.198 222.436 197.878 222.786 197.878 222.786 cv
198.894 223.44 li
cp
.0597238 .47129 .496925 0 cmyk
f
298.421 249.561 mo
273.385 240.693 li
271.563 244.097 269.614 246.653 267.682 247.165 cv
264.758 247.931 257.695 249.257 250.569 250.503 cv
249.627 250.679 248.685 250.839 247.742 251.015 cv
239.258 252.484 231.461 253.747 231.461 253.747 cv
231.445 254.162 li
231.445 254.434 li
231.253 260.745 li
231.253 262.347 li
231.253 262.347 239.753 261.911 250.474 262.662 cv
265.477 263.732 284.825 264.372 291.231 261.353 cv
294.235 259.93 296.632 255.265 298.518 249.513 cv
298.421 249.561 li
cp
level3{
gsave
clp
[40.9199 6.56972 -6.56972 40.9199 243.561 250.697 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[40.9199 6.56972 -6.56972 40.9199 243.561 250.697 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
273.385 240.693 mo
298.421 249.561 li
297.288 252.906 li
272.509 242.277 li
273.385 240.693 li
cp
.00662242 .363867 .385321 0 cmyk
f
273.385 240.693 mo
271.563 244.097 269.614 246.653 267.682 247.165 cv
264.758 247.931 257.695 249.257 250.569 250.503 cv
250.649 246.685 250.777 242.659 250.937 238.617 cv
251.624 221.649 252.887 204.553 253.766 202.956 cv
255.203 200.287 259.134 194.488 265.333 193.162 cv
265.349 193.241 li
265.349 193.241 263.208 205.896 275.989 205.896 cv
288.164 205.896 289.714 194.056 289.825 192.922 cv
296.089 193.625 305.691 196.756 307.017 209.346 cv
307.289 211.839 307.672 215.034 308.167 218.661 cv
304.221 219.204 li
304.221 219.204 302.623 236.939 298.518 249.513 cv
298.421 249.561 li
273.385 240.693 li
0 .600915 .45304 0 cmyk
f
275.759 239.364 mo
273.126 238.386 li
283.123 214.186 li
275.759 239.364 li
0 .414343 .356664 0 cmyk
f
289.825 192.922 mo
284.378 192.922 li
284.378 192.922 276.624 201.435 271.641 201.435 cv
266.656 201.435 269.343 192.97 269.343 192.97 cv
266.911 192.97 li
259.927 192.97 254.049 198.215 253.258 205.155 cv
253.168 205.95 253.085 206.704 253.015 207.386 cv
252.481 212.536 273.344 216.284 273.344 216.284 cv
284.086 215.683 li
290.609 202.956 li
291.909 197.744 li
289.825 192.922 li
cp
0 .600915 .45304 0 cmyk
f
224.083 406.264 mo
224.568 408.866 226.373 410.717 228.976 410.231 cv
263.677 403.759 li
264.555 403.595 265.133 402.751 264.97 401.873 cv
264.396 398.794 li
264.396 398.794 227.899 405.181 224.065 406.244 cv
224.083 406.264 li
cp
.0402228 .022919 .0259098 0 cmyk
f
234.407 397.526 mo
234.769 397.212 235.117 396.9 235.479 396.587 cv
236.175 395.964 236.86 395.357 237.52 394.77 cv
237.867 394.459 238.216 394.147 238.538 393.854 cv
239.172 393.287 239.769 392.755 240.304 392.277 cv
240.688 391.931 241.048 391.603 241.371 391.31 cv
241.964 390.778 242.448 390.345 242.788 390.04 cv
243.082 389.777 243.519 389.765 243.82 390.019 cv
245.247 391.218 249.857 393.96 258.209 388.793 cv
258.604 388.548 259.13 388.676 259.345 389.089 cv
264.396 398.794 li
264.396 398.794 227.899 405.181 224.065 406.244 cv
225.326 405.458 229.984 401.427 234.407 397.526 cv
cp
.904234 .87863 .219638 .0841993 cmyk
f
169.432 405.923 mo
169.496 408.57 170.982 410.685 173.63 410.619 cv
208.919 409.758 li
209.812 409.736 210.518 408.995 210.496 408.103 cv
210.419 404.972 li
210.419 404.972 173.372 405.462 169.418 405.901 cv
169.432 405.923 li
cp
.0402228 .022919 .0259098 0 cmyk
f
181.016 398.942 mo
181.424 398.689 181.816 398.438 182.224 398.186 cv
183.011 397.681 183.783 397.191 184.527 396.717 cv
184.921 396.465 185.314 396.213 185.68 395.976 cv
186.396 395.516 187.069 395.086 187.674 394.7 cv
188.109 394.418 188.516 394.151 188.881 393.915 cv
189.551 393.484 190.099 393.133 190.482 392.887 cv
190.814 392.674 191.248 392.731 191.506 393.03 cv
192.723 394.441 196.838 397.883 205.905 394.112 cv
206.335 393.934 206.833 394.144 206.979 394.586 cv
210.419 404.972 li
210.419 404.972 173.372 405.462 169.418 405.901 cv
170.787 405.325 176.028 402.088 181.016 398.942 cv
cp
.904234 .87863 .219638 .0841993 cmyk
f
144.329 262.347 mo
125.482 212.083 li
179.137 212.083 li
197.982 262.347 li
144.329 262.347 li
cp
.339208 .219394 .215763 0 cmyk
f
201.3 262.347 mo
197.982 262.347 li
179.137 212.083 li
182.148 212.217 li
199.58 257.713 li
201.3 262.347 li
cp
.517357 .343877 .304784 .0100099 cmyk
f
200.259 262.347 mo
235.712 262.347 li
235.615 259.178 li
235.615 259.178 200.125 259.178 199.533 259.178 cv
f
351.302 412.166 mo
342.766 412.166 li
342.766 271.933 li
351.302 271.933 li
351.302 412.166 li
cp
f
304.968 412.166 mo
296.432 412.166 li
296.432 271.933 li
304.968 271.933 li
304.968 412.166 li
cp
.339208 .219394 .215763 0 cmyk
f
156.528 412.166 mo
147.993 412.166 li
147.993 271.933 li
156.528 271.933 li
156.528 412.166 li
cp
.517357 .343877 .304784 .0100099 cmyk
f
110.196 412.166 mo
101.66 412.166 li
101.66 271.933 li
110.196 271.933 li
110.196 412.166 li
cp
.339208 .219394 .215763 0 cmyk
f
359.844 272.465 mo
93.4829 272.465 li
91.1914 272.465 89.334 270.607 89.334 268.316 cv
89.334 266.495 li
89.334 264.204 91.1914 262.347 93.4829 262.347 cv
359.844 262.347 li
362.135 262.347 363.992 264.204 363.992 266.495 cv
363.992 268.316 li
363.992 270.607 362.135 272.465 359.844 272.465 cv
cp
1 .981903 .338781 .322972 cmyk
f
134.441 217.366 mo
135.359 219.813 li
146.047 219.813 li
145.129 217.366 li
134.441 217.366 li
cp
.517357 .343877 .304784 .0100099 cmyk
f
240.888 229.238 mo
240.12 230.72 li
250.938 241.899 li
250.938 238.617 li
240.888 229.238 li
cp
.0597238 .47129 .496925 0 cmyk
f
461.66 420.226 mo
29.7446 420.226 li
29.7446 410.363 li
461.66 410.363 li
461.66 420.226 li
cp
.35877 .201297 .147463 0 cmyk
f
393.183 337.215 mo
391.468 345.54 391.984 359.721 380.971 361.967 cv
378.005 362.571 375.14 360.516 373.416 358.16 cv
371.16 355.077 370.62 348.552 370.659 344.819 cv
370.69 341.861 371.699 338.563 372.023 335.578 cv
372.375 332.355 372.66 329.125 373.036 325.904 cv
374.391 314.296 380.455 304.567 390.712 298.772 cv
391.506 302.583 393.315 305.808 394.911 309.467 cv
395.639 311.135 396.295 312.894 396.769 314.642 cv
397.607 317.737 396.593 320.865 395.84 323.83 cv
394.727 328.213 394.097 332.781 393.183 337.215 cv
cp
level3{
gsave
clp
[.00271745 63.3004 -63.3004 .00271745 383.869 298.773 ]ct
/1 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~[%@<u[%IC![%RI"[%[O#[%[O#[%dU$[A*^%[A3d&[A3d&[\Ws([\a$)[\a$)[\j**[\j**[\s0+[]'6,
[]0<-\#KE.\#TK/\>oT0\?#Z1\Z>c2\ZGi3\ZPo4\ZYu5\Zc&6\Zc&6\Zl,7\Zu28]!DA:]!MG;]!VM<
]<qV=]=%\>]=.b?]XRqA]X\"B]Xe(C]t47E]t==F]tFCG^:jRI^:sXJ^;0dL^;9jM^V^$O^r$-P^r-3Q
_8QBS_T)WV_T2]W_T;cX_o_rZ_or)\_p&/]`6J>_`6\Ja`R+Yc`mOhe`matga41.ia4:4ja4C:kaOgIm
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[.00271745 63.3004 -63.3004 .00271745 383.869 298.773 ]ct
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~Za7!EZa7!EZa7!EZa7!EZa7!EZa@*H['[3I['[3I['d<L[C*EM[C*EM[C*EM[C*EM[C*EM[C*EM[C*EM
[C*HO[^NWQ[^NZS\$riU\$rlW\@B&Y\@B&Y\@B&Y\@B&Y\@B&Y\@B&Y\@B&Y\@B)[\[f8]\[f8]\[f;_
]"5Ja]"5Ja]"5Jb]=Y\e]=Y\e]=Y\f]Y(ni]Y(ni]Y(nj]tM+m]tM+m]tM+m]tM+n^:q=r^V@Ou^V@P!
^qdb$_83t(_83t(_83t(_SX1,_SX1,_SX1,_o'C0_o'C0`5KU4`Pog8`Pog8`l?$<`l?$<`l?$<a2c6@
~>
<~StDXIT:hjMTV8'QTqS0RTq\9UU8"BVU8+KYUSFTZUSO]]UnsoaV5:#bV5C,eVP^5fVPg>iVl6PmW2Zbq
WMukrWMuntWiE)!WiE,#X/i;%X/i>'XK8P+Xf\b/Y-+t3YHP.5YHP17YctC;Z*CU?ZEggCZa7$G['[3I
['[3J[C*EN[^NWR\$riV\@B&Z\[f8^]"5Jb]=Y\f]Y(nj]tM+n^:q=r^VIY$_83t)_SX1,_SX1-_o'C1
`5KU4`Poj:a2c6@aN2HDaiVZHb0%oNbfn;Tc-=MXcHab^d*U.ddF$@hdaHUneC<!te^`4#f%/F'f@SX+
~>
0 0 ]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
379.106 362.247 mo
379.185 361.549 379.271 360.851 379.363 360.153 cv
380.679 360.149 382.049 359.401 383.153 358.829 cv
385.069 357.836 386.623 356.412 388.128 354.89 cv
387.987 354.749 li
386.486 356.01 384.93 357.231 383.144 358.064 cv
382.147 358.528 380.691 359.287 379.463 359.435 cv
379.579 358.601 379.707 357.77 379.845 356.939 cv
381.215 356.771 382.471 355.871 383.631 355.183 cv
385.603 354.013 387.299 352.499 389.057 351.04 cv
389.032 351.009 li
386.343 352.962 383.347 355.742 379.944 356.351 cv
380.125 355.311 380.315 354.273 380.534 353.243 cv
380.568 353.082 li
384.506 352.086 387.169 348.998 390.184 346.502 cv
390.129 346.418 li
387.16 348.724 384.37 351.354 380.7 352.474 cv
381.019 350.999 381.35 349.529 381.683 348.062 cv
385.245 346.747 388.09 344.66 390.58 341.753 cv
390.508 341.683 li
387.931 344.365 385.093 345.905 381.825 347.432 cv
382.154 345.979 382.481 344.525 382.791 343.067 cv
384.332 342.31 385.953 341.849 387.376 340.852 cv
388.78 339.869 390.04 338.697 390.944 337.234 cv
390.825 337.158 li
388.832 340.024 385.827 340.916 382.923 342.423 cv
383.206 341.064 383.47 339.702 383.706 338.332 cv
386.942 336.55 390.459 334.898 392.293 331.483 cv
392.243 331.449 li
390.3 334.587 386.904 335.938 383.821 337.646 cv
383.861 337.402 383.906 337.16 383.944 336.915 cv
384.143 335.645 384.328 334.372 384.511 333.101 cv
386.37 332.355 388.143 331.304 389.816 330.214 cv
391.004 329.44 392.272 328.674 393.05 327.46 cv
392.935 327.379 li
391.199 329.866 387.397 331.304 384.59 332.548 cv
384.772 331.263 384.953 329.978 385.136 328.692 cv
388.251 326.807 391.917 325.765 393.834 322.366 cv
393.891 322.266 393.743 322.173 393.68 322.271 cv
391.694 325.374 388.199 326.331 385.222 328.092 cv
385.336 327.296 385.452 326.5 385.572 325.705 cv
388.937 324.468 392.849 321.651 394.623 318.61 cv
394.721 318.442 394.479 318.287 394.369 318.447 cv
392.56 321.116 388.924 324.017 385.671 325.073 cv
385.87 323.784 386.078 322.497 386.308 321.212 cv
386.357 321.099 li
387.868 320.654 389.361 319.589 390.665 318.784 cv
392.237 317.814 393.737 316.688 394.716 315.093 cv
394.824 314.917 394.537 314.754 394.436 314.935 cv
392.941 317.602 389.395 319.39 386.459 320.408 cv
386.545 319.939 386.63 319.471 386.723 319.003 cv
386.861 318.304 387.004 317.604 387.146 316.905 cv
388.349 316.075 389.875 315.678 391.082 314.801 cv
392.131 314.039 393.047 313.121 393.946 312.19 cv
394.036 312.099 393.903 311.956 393.809 312.045 cv
392.591 313.189 391.338 314.288 389.855 315.081 cv
389.026 315.525 388.081 315.778 387.278 316.265 cv
387.513 315.122 387.747 313.979 387.971 312.834 cv
388.014 312.825 li
388.057 312.834 li
388.254 312.772 li
389.889 312.36 391.139 310.953 392.237 309.754 cv
392.195 309.711 li
391.042 310.776 389.732 311.956 388.188 312.414 cv
388.173 312.407 li
388.056 312.389 li
388.234 311.457 388.404 310.524 388.56 309.589 cv
388.678 309.568 388.781 309.467 388.753 309.349 cv
389.62 308.768 390.407 308.026 391.146 307.301 cv
391.064 307.212 li
390.296 307.874 389.538 308.42 388.674 308.898 cv
388.979 306.967 389.216 305.024 389.324 303.063 cv
389.334 302.881 389.059 302.879 389.043 303.058 cv
388.872 304.946 388.598 306.816 388.272 308.677 cv
387.371 307.494 386.367 306.276 385.816 304.922 cv
385.701 304.956 li
385.971 305.797 386.436 306.532 386.896 307.28 cv
387.308 307.949 387.637 308.728 388.162 309.322 cv
387.98 310.321 387.784 311.317 387.578 312.313 cv
386.482 312.137 385.477 311.929 384.572 311.135 cv
383.464 310.164 382.834 308.843 382.725 307.378 cv
382.711 307.198 382.427 307.199 382.443 307.379 cv
382.568 308.741 383.11 310.022 384.042 311.038 cv
385.022 312.106 386.173 312.447 387.493 312.721 cv
387.253 313.87 387.005 315.018 386.752 316.165 cv
385.757 315.568 384.832 314.788 383.935 314.072 cv
382.486 312.918 381.631 311.529 380.374 310.229 cv
380.248 310.1 380.043 310.287 380.167 310.42 cv
381.345 311.672 382.142 313.028 383.481 314.153 cv
384.446 314.963 385.511 315.979 386.662 316.578 cv
386.622 316.76 li
386.584 316.792 li
386.558 317.049 li
386.316 318.147 386.075 319.246 385.843 320.348 cv
385.802 320.555 li
383.24 319.382 379.412 317.344 379.072 314.372 cv
379.04 314.09 378.618 314.168 378.684 314.457 cv
379.441 317.821 383.138 319.312 385.685 321.146 cv
385.434 322.391 385.203 323.639 384.992 324.891 cv
383.337 324.321 381.764 323.617 380.375 322.513 cv
379.111 321.508 377.324 320.296 376.755 318.739 cv
376.682 318.771 li
377.208 320.318 378.812 321.382 379.979 322.438 cv
381.459 323.777 382.974 324.914 384.878 325.45 cv
384.873 325.617 li
384.742 326.411 384.616 327.205 384.495 328.001 cv
381.384 327.762 377.03 325.399 375.44 323.046 cv
375.425 323.058 li
376.509 324.854 378.148 325.903 379.997 326.813 cv
381.377 327.494 382.869 328.299 384.431 328.415 cv
384.208 329.887 383.991 331.36 383.772 332.833 cv
382.422 332.33 380.992 332.089 379.656 331.555 cv
377.671 330.76 376.154 329.332 374.985 327.577 cv
374.915 327.471 374.738 327.561 374.808 327.671 cv
376.962 331.095 380.061 332.1 383.69 333.382 cv
383.509 334.59 383.319 335.797 383.12 337.003 cv
380.149 336.434 376.308 334.62 374.805 332.04 cv
374.694 331.851 374.393 332.008 374.503 332.199 cv
375.452 333.853 377.088 334.898 378.757 335.741 cv
379.959 336.348 381.614 337.354 383.046 337.462 cv
383.026 337.58 li
382.732 339.315 382.39 341.042 382.02 342.762 cv
378.701 341.928 376.556 339.47 374.144 337.169 cv
373.977 337.009 373.714 337.253 373.881 337.416 cv
376.338 339.835 378.496 342.372 381.91 343.267 cv
381.604 344.666 381.278 346.063 380.94 347.455 cv
378.114 346.665 375.316 344.659 373.488 342.355 cv
373.358 342.191 373.131 342.413 373.254 342.575 cv
375.154 345.075 377.894 346.962 380.81 347.995 cv
380.443 349.49 380.063 350.981 379.68 352.472 cv
376.776 352.03 374.539 350.212 372.751 347.914 cv
372.655 347.986 li
374.244 350.197 376.647 352.75 379.539 353.018 cv
379.416 353.493 379.294 353.969 379.171 354.444 cv
379.097 354.73 379.02 355.021 378.94 355.315 cv
376.751 354.671 374.719 353.885 372.912 352.409 cv
372.851 352.489 li
374.568 354.035 376.624 355.077 378.821 355.753 cv
378.577 356.648 378.32 357.568 378.065 358.506 cv
377.522 358.253 376.997 357.976 376.403 357.798 cv
375.314 357.472 374.609 356.781 373.661 356.212 cv
373.563 356.339 li
374.396 356.882 374.98 357.581 375.93 357.938 cv
376.633 358.204 377.296 358.541 377.976 358.843 cv
376.978 362.563 376.095 366.517 376.573 370.087 cv
376.68 370.879 378.008 371.089 378.214 370.246 cv
378.844 367.658 378.812 364.893 379.106 362.247 cv
cp
.603479 .529076 0 0 cmyk
f
358.328 334.831 mo
360.287 343.103 366.74 355.74 357.704 362.426 cv
355.271 364.226 351.806 363.57 349.248 362.162 cv
345.902 360.32 342.658 354.632 341.119 351.231 cv
339.898 348.536 339.421 345.12 338.456 342.278 cv
337.413 339.208 336.309 336.159 335.29 333.081 cv
331.619 321.985 333.011 310.606 339.864 301.023 cv
342.191 304.143 345.194 306.303 348.185 308.946 cv
349.547 310.151 350.885 311.47 352.052 312.854 cv
354.119 315.307 354.52 318.57 355.088 321.576 cv
355.929 326.02 357.286 330.427 358.328 334.831 cv
cp
level3{
gsave
clp
[26.7194 57.3847 -57.3847 26.7194 333.66 303.912 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[26.7194 57.3847 -57.3847 26.7194 333.66 303.912 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
356.133 363.467 mo
355.908 362.801 355.692 362.131 355.48 361.459 cv
356.673 360.901 357.599 359.645 358.358 358.659 cv
359.677 356.95 360.483 355.005 361.206 352.988 cv
361.244 352.881 361.066 352.819 361.019 352.921 cv
360.19 354.697 359.295 356.461 358.026 357.971 cv
357.319 358.812 356.319 360.113 355.269 360.766 cv
355.021 359.961 354.787 359.153 354.562 358.343 cv
355.732 357.612 356.491 356.267 357.252 355.152 cv
358.546 353.259 359.445 351.171 360.423 349.107 cv
360.388 349.089 li
358.773 351.994 357.23 355.779 354.403 357.767 cv
354.128 356.748 353.863 355.727 353.626 354.701 cv
353.59 354.54 li
356.738 351.976 357.85 348.052 359.529 344.517 cv
359.443 344.464 li
357.726 347.807 356.308 351.37 353.452 353.933 cv
353.118 352.462 352.798 350.99 352.48 349.519 cv
355.156 346.823 356.854 343.73 357.884 340.044 cv
357.789 340.011 li
356.585 343.53 354.662 346.124 352.344 348.888 cv
352.029 347.431 351.712 345.976 351.377 344.523 cv
352.455 343.186 353.729 342.084 354.6 340.58 cv
355.458 339.097 356.105 337.502 356.307 335.794 cv
356.168 335.775 li
355.57 339.215 353.223 341.291 351.226 343.883 cv
350.908 342.532 350.572 341.186 350.209 339.844 cv
352.391 336.862 354.882 333.881 355.103 330.011 cv
355.043 330.002 li
354.606 333.666 352.098 336.324 350.024 339.174 cv
349.957 338.936 349.896 338.697 349.827 338.459 cv
349.471 337.224 349.102 335.992 348.729 334.762 cv
350.102 333.301 351.265 331.601 352.322 329.906 cv
353.072 328.704 353.898 327.473 354.091 326.044 cv
353.952 326.02 li
353.429 329.007 350.589 331.914 348.568 334.228 cv
348.191 332.985 347.813 331.744 347.437 330.502 cv
349.465 327.478 352.348 324.985 352.652 321.096 cv
352.661 320.98 352.488 320.959 352.473 321.074 cv
351.982 324.726 349.217 327.068 347.261 329.922 cv
347.028 329.151 346.798 328.381 346.571 327.609 cv
349.099 325.068 351.457 320.863 351.781 317.357 cv
351.8 317.164 351.514 317.125 351.483 317.317 cv
350.969 320.5 348.897 324.663 346.395 326.994 cv
346.03 325.742 345.676 324.487 345.342 323.227 cv
345.339 323.102 li
346.521 322.062 347.425 320.465 348.268 319.186 cv
349.283 317.643 350.168 315.987 350.382 314.13 cv
350.405 313.924 350.077 313.897 350.062 314.104 cv
349.832 317.153 347.371 320.271 345.139 322.433 cv
345.02 321.972 344.898 321.511 344.785 321.048 cv
344.616 320.355 344.45 319.661 344.285 318.967 cv
345.024 317.707 346.24 316.703 346.964 315.398 cv
347.594 314.265 348.037 313.046 348.459 311.823 cv
348.501 311.702 348.321 311.628 348.272 311.749 cv
347.651 313.302 346.979 314.825 345.971 316.17 cv
345.406 316.923 344.656 317.551 344.134 318.331 cv
343.864 317.195 343.594 316.061 343.313 314.929 cv
343.349 314.902 li
343.391 314.892 li
343.544 314.753 li
344.852 313.689 345.392 311.886 345.881 310.335 cv
345.825 310.314 li
345.229 311.767 344.54 313.389 343.334 314.455 cv
343.316 314.456 li
343.202 314.489 li
342.972 313.569 342.731 312.651 342.479 311.738 cv
342.576 311.669 342.627 311.534 342.552 311.438 cv
343.092 310.546 343.493 309.542 343.856 308.572 cv
343.745 308.525 li
343.328 309.45 342.871 310.265 342.29 311.064 cv
341.751 309.185 341.146 307.323 340.416 305.499 cv
340.349 305.33 340.099 305.444 340.159 305.613 cv
340.801 307.397 341.342 309.208 341.833 311.032 cv
340.516 310.341 339.092 309.66 338.021 308.665 cv
337.931 308.744 li
338.529 309.393 339.262 309.863 339.995 310.347 cv
340.65 310.78 341.278 311.347 342.004 311.664 cv
342.262 312.646 342.504 313.633 342.737 314.621 cv
341.67 314.924 340.671 315.16 339.515 314.822 cv
338.101 314.409 336.972 313.478 336.255 312.196 cv
336.166 312.039 335.909 312.159 336 312.315 cv
336.688 313.498 337.721 314.432 338.994 314.959 cv
340.334 315.514 341.521 315.337 342.833 315.027 cv
343.1 316.171 343.359 317.315 343.615 318.462 cv
342.46 318.342 341.292 318.024 340.177 317.755 cv
338.377 317.319 337.016 316.421 335.327 315.773 cv
335.158 315.709 335.051 315.966 335.22 316.033 cv
336.816 316.672 338.11 317.564 339.801 318.02 cv
341.018 318.346 342.411 318.817 343.707 318.875 cv
343.747 319.057 li
343.727 319.103 li
343.683 319.218 343.733 319.303 343.812 319.346 cv
344.056 320.443 344.301 321.542 344.556 322.638 cv
344.605 322.843 li
341.788 322.861 337.458 322.63 335.896 320.078 cv
335.747 319.836 335.398 320.085 335.579 320.32 cv
337.686 323.049 341.666 322.84 344.748 323.428 cv
345.047 324.663 345.364 325.892 345.701 327.116 cv
343.961 327.298 342.237 327.324 340.512 326.908 cv
338.942 326.531 336.811 326.187 335.638 325.016 cv
335.584 325.075 li
336.715 326.256 338.617 326.543 340.12 327.008 cv
342.028 327.598 343.882 327.989 345.834 327.671 cv
345.9 327.825 li
346.117 328.6 346.338 329.373 346.563 330.146 cv
343.642 331.241 338.698 330.937 336.264 329.475 cv
336.255 329.492 li
337.995 330.662 339.925 330.922 341.984 330.968 cv
343.523 331.002 345.215 331.102 346.681 330.548 cv
347.099 331.977 347.525 333.403 347.947 334.831 cv
346.512 334.945 345.113 335.33 343.677 335.409 cv
341.541 335.526 339.564 334.872 337.764 333.774 cv
337.655 333.708 337.532 333.863 337.642 333.935 cv
341.04 336.13 344.272 335.732 348.104 335.363 cv
348.45 336.535 348.789 337.709 349.116 338.886 cv
346.183 339.624 341.935 339.602 339.483 337.896 cv
339.303 337.771 339.097 338.042 339.276 338.169 cv
340.836 339.267 342.76 339.524 344.628 339.584 cv
345.974 339.627 347.899 339.841 349.242 339.334 cv
349.275 339.449 li
349.741 341.146 350.159 342.856 350.549 344.572 cv
347.188 345.217 344.206 343.894 341.049 342.825 cv
340.829 342.751 340.694 343.083 340.915 343.161 cv
344.163 344.316 347.19 345.706 350.663 345.075 cv
350.977 346.474 351.271 347.877 351.552 349.282 cv
348.656 349.758 345.273 349.121 342.644 347.804 cv
342.457 347.71 342.344 348.008 342.524 348.103 cv
345.302 349.566 348.581 350.121 351.661 349.827 cv
351.96 351.337 352.245 352.85 352.526 354.362 cv
349.707 355.187 346.912 354.483 344.321 353.155 cv
344.266 353.261 li
346.639 354.594 349.895 355.894 352.629 354.916 cv
352.719 355.399 352.808 355.882 352.897 356.365 cv
352.951 356.656 353.004 356.953 353.056 357.252 cv
350.799 357.592 348.625 357.737 346.364 357.162 cv
346.343 357.26 li
348.552 357.937 350.855 358.014 353.133 357.699 cv
353.289 358.613 353.444 359.557 353.609 360.514 cv
353.011 360.514 352.417 360.484 351.804 360.573 cv
350.679 360.737 349.748 360.409 348.647 360.293 cv
348.547 360.282 348.51 360.435 348.613 360.449 cv
349.597 360.591 350.422 360.978 351.435 360.901 cv
352.184 360.845 352.927 360.871 353.67 360.857 cv
354.335 364.65 355.203 368.607 357.145 371.643 cv
357.575 372.315 358.868 371.945 358.698 371.095 cv
358.178 368.482 356.981 365.989 356.133 363.467 cv
cp
.603479 .529076 0 0 cmyk
f
377.417 328.42 mo
377.882 338.93 382.802 355.787 370.269 361.821 cv
366.893 363.446 362.833 361.848 360.05 359.544 cv
356.408 356.529 353.781 348.863 352.697 344.373 cv
351.838 340.814 352.048 336.551 351.533 332.872 cv
350.977 328.898 350.34 324.936 349.814 320.957 cv
347.921 306.619 352.247 293.107 362.797 283.045 cv
364.904 287.376 368.055 290.697 371.077 294.604 cv
372.456 296.384 373.776 298.296 374.875 300.249 cv
376.82 303.709 376.551 307.77 376.546 311.555 cv
376.54 317.151 377.169 322.824 377.417 328.42 cv
cp
level3{
gsave
clp
[19.1938 75.9499 -75.9499 19.1938 354.588 285.12 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[19.1938 75.9499 -75.9499 19.1938 354.588 285.12 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
368.117 362.723 mo
367.999 361.861 367.891 360.997 367.789 360.132 cv
369.368 359.729 370.785 358.416 371.937 357.395 cv
373.935 355.622 375.366 353.443 376.711 351.16 cv
376.782 351.038 376.58 350.922 376.499 351.034 cv
375.08 353.002 373.583 354.939 371.692 356.48 cv
370.638 357.339 369.121 358.69 367.692 359.239 cv
367.578 358.204 367.479 357.168 367.394 356.13 cv
368.986 355.514 370.22 354.053 371.403 352.875 cv
373.414 350.873 374.991 348.542 376.657 346.26 cv
376.618 346.229 li
373.983 349.388 371.231 353.632 367.335 355.394 cv
367.235 354.092 367.15 352.789 367.1 351.486 cv
367.093 351.282 li
371.515 348.894 373.773 344.381 376.634 340.473 cv
376.542 340.389 li
373.679 344.055 371.13 348.058 367.066 350.513 cv
367.001 348.647 366.952 346.783 366.907 344.921 cv
370.783 342.265 373.563 338.897 375.669 334.654 cv
375.562 334.592 li
373.283 338.592 370.345 341.3 366.887 344.122 cv
366.842 342.278 366.793 340.436 366.723 338.594 cv
368.342 337.217 370.146 336.172 371.553 334.545 cv
372.939 332.94 374.096 331.151 374.736 329.122 cv
374.771 329.016 374.61 328.963 374.571 329.067 cv
373.049 333.109 369.713 335.091 366.686 337.779 cv
366.613 336.064 366.517 334.349 366.385 332.634 cv
369.728 329.515 373.446 326.467 374.611 321.813 cv
374.541 321.788 li
373.161 326.142 369.496 328.792 366.315 331.777 cv
366.29 331.472 366.27 331.167 366.241 330.861 cv
366.094 329.277 365.931 327.694 365.764 326.112 cv
367.77 324.654 369.577 322.856 371.255 321.041 cv
372.445 319.753 373.735 318.448 374.3 316.756 cv
374.335 316.649 374.177 316.589 374.137 316.694 cv
372.809 320.204 368.683 323.082 365.691 325.426 cv
365.521 323.828 365.348 322.231 365.178 320.635 cv
368.344 317.428 372.426 315.065 373.696 310.407 cv
373.733 310.269 373.528 310.202 373.482 310.34 cv
372.041 314.664 368.137 316.873 365.098 319.889 cv
364.994 318.898 364.893 317.908 364.796 316.917 cv
368.457 314.414 372.297 309.848 373.504 305.661 cv
373.57 305.431 373.232 305.317 373.149 305.543 cv
371.788 309.294 368.306 313.875 364.723 316.129 cv
364.57 314.522 364.43 312.915 364.315 311.305 cv
364.341 311.152 li
366.019 310.161 367.487 308.431 368.808 307.07 cv
370.4 305.43 371.858 303.622 372.549 301.413 cv
372.625 301.169 372.231 301.061 372.165 301.308 cv
371.181 304.961 367.468 308.181 364.253 310.294 cv
364.215 309.705 364.174 309.117 364.144 308.527 cv
364.098 307.646 364.057 306.764 364.017 305.882 cv
365.207 304.521 366.918 303.582 368.101 302.164 cv
369.128 300.932 369.949 299.553 370.746 298.164 cv
370.825 298.026 370.623 297.895 370.536 298.03 cv
369.422 299.773 368.252 301.471 366.714 302.873 cv
365.854 303.656 364.796 304.247 363.98 305.073 cv
363.916 303.631 363.85 302.188 363.771 300.748 cv
363.819 300.724 li
363.874 300.721 li
363.979 300.715 364.049 300.66 364.092 300.588 cv
365.928 299.598 367.002 297.529 367.956 295.758 cv
367.893 295.72 li
366.832 297.348 365.619 299.159 363.905 300.177 cv
363.884 300.174 li
363.737 300.188 li
363.67 299.016 363.591 297.845 363.494 296.676 cv
363.63 296.614 363.723 296.462 363.653 296.329 cv
364.517 295.368 365.237 294.24 365.903 293.146 cv
365.778 293.063 li
365.058 294.091 364.313 294.976 363.422 295.813 cv
363.202 293.402 362.897 291 362.432 288.613 cv
362.389 288.393 362.059 288.474 362.094 288.692 cv
362.461 291.011 362.698 293.337 362.873 295.668 cv
361.433 294.522 359.859 293.365 358.787 291.907 cv
358.659 291.982 li
359.237 292.91 360.019 293.651 360.797 294.409 cv
361.494 295.087 362.126 295.922 362.936 296.476 cv
363.021 297.729 363.087 298.984 363.143 300.24 cv
361.773 300.361 360.505 300.417 359.178 299.739 cv
357.555 298.91 356.397 297.516 355.822 295.791 cv
355.751 295.58 355.41 295.667 355.485 295.878 cv
356.048 297.475 357.087 298.849 358.513 299.784 cv
360.014 300.769 361.497 300.829 363.164 300.757 cv
363.224 302.208 363.274 303.66 363.319 305.113 cv
361.943 304.699 360.597 304.043 359.304 303.457 cv
357.216 302.511 355.769 301.104 353.866 299.926 cv
353.676 299.808 353.486 300.096 353.676 300.217 cv
355.469 301.362 356.835 302.748 358.785 303.691 cv
360.188 304.371 361.773 305.267 363.335 305.637 cv
363.343 305.866 li
363.307 305.917 li
363.227 306.047 363.269 306.163 363.354 306.232 cv
363.396 307.624 363.44 309.017 363.496 310.407 cv
363.51 310.668 li
360.08 310.038 354.869 308.754 353.562 305.291 cv
353.437 304.962 352.954 305.184 353.12 305.511 cv
355.049 309.317 359.937 309.984 363.548 311.413 cv
363.624 312.982 363.726 314.551 363.853 316.117 cv
361.694 315.936 359.593 315.567 357.592 314.663 cv
355.771 313.841 353.259 312.929 352.104 311.233 cv
352.025 311.293 li
353.127 312.99 355.373 313.78 357.093 314.692 cv
359.276 315.852 361.438 316.757 363.885 316.822 cv
363.93 317.024 li
364.015 318.017 364.104 319.008 364.198 319.999 cv
360.394 320.655 354.454 319.141 351.833 316.799 cv
351.817 316.818 li
353.663 318.644 355.948 319.406 358.441 319.938 cv
360.305 320.336 362.339 320.85 364.248 320.515 cv
364.426 322.349 364.613 324.183 364.797 326.017 cv
363.024 325.822 361.236 325.966 359.472 325.729 cv
356.848 325.378 354.596 324.125 352.66 322.373 cv
352.544 322.268 352.359 322.428 352.476 322.54 cv
356.099 325.995 360.12 326.261 364.864 326.699 cv
365.014 328.204 365.153 329.71 365.279 331.217 cv
361.542 331.435 356.382 330.424 353.797 327.783 cv
353.607 327.59 353.293 327.87 353.482 328.066 cv
355.124 329.762 357.403 330.521 359.661 331.025 cv
361.287 331.39 363.578 332.095 365.328 331.79 cv
365.341 331.938 li
365.515 334.109 365.627 336.284 365.704 338.461 cv
361.47 338.466 358.15 336.166 354.559 334.137 cv
354.31 333.996 354.068 334.368 354.318 334.515 cv
358 336.671 361.358 339.061 365.727 339.099 cv
365.783 340.871 365.816 342.645 365.832 344.419 cv
362.202 344.327 358.236 342.77 355.345 340.559 cv
355.14 340.402 354.934 340.737 355.131 340.895 cv
358.169 343.317 362.027 344.751 365.84 345.106 cv
365.853 347.012 365.85 348.916 365.841 350.82 cv
362.223 351.17 358.988 349.667 356.146 347.453 cv
356.053 347.568 li
358.629 349.739 362.287 352.073 365.838 351.518 cv
365.835 352.125 365.832 352.733 365.828 353.341 cv
365.826 353.707 365.821 354.08 365.815 354.456 cv
362.993 354.347 360.316 354.02 357.701 352.797 cv
357.652 352.911 li
360.182 354.245 362.965 354.872 365.806 355.018 cv
365.784 356.165 365.755 357.348 365.734 358.549 cv
365.006 358.41 364.29 358.237 363.524 358.204 cv
362.118 358.143 361.063 357.528 359.753 357.132 cv
359.633 357.096 359.553 357.272 359.675 357.314 cv
360.838 357.714 361.751 358.375 362.999 358.517 cv
363.924 358.621 364.821 358.825 365.728 358.98 cv
365.657 363.747 365.798 368.758 367.455 372.897 cv
367.822 373.815 369.479 373.664 369.471 372.591 cv
369.442 369.295 368.564 365.986 368.117 362.723 cv
cp
.603479 .529076 0 0 cmyk
f
384.335 366.66 mo
383.871 375.203 li
383.145 388.506 li
381.955 410.363 li
352.363 410.363 li
351.174 388.506 li
350.447 375.203 li
349.983 366.66 li
384.335 366.66 li
cp
.438025 .266514 .221805 0 cmyk
f
383.871 375.203 mo
383.775 376.916 li
383.681 378.689 li
383.145 388.506 li
351.174 388.506 li
350.638 378.689 li
350.543 376.916 li
350.447 375.203 li
383.871 375.203 li
cp
.35877 .201297 .147463 0 cmyk
f
383.775 376.916 mo
383.681 378.689 li
350.638 378.689 li
350.543 376.916 li
383.775 376.916 li
cp
.438025 .266514 .221805 0 cmyk
f
260.104 467.948 mo
259.672 468.392 259.301 468.88 258.995 469.401 cv
258.53 469.161 li
258.464 468.863 258.182 468.658 257.871 468.694 cv
257.541 468.733 257.304 469.033 257.343 469.364 cv
257.382 469.695 257.682 469.932 258.013 469.894 cv
258.196 469.841 li
258.647 470.075 li
258.396 470.629 258.215 471.214 258.108 471.819 cv
258.854 471.95 li
259.085 470.645 259.704 469.444 260.646 468.478 cv
260.104 467.948 li
cp
.35877 .201297 .147463 0 cmyk
f
265.592 465.646 mo
265.421 465.646 265.251 465.652 265.082 465.664 cv
265.009 465.037 li
265.196 464.889 265.305 464.648 265.274 464.393 cv
265.228 464 264.872 463.719 264.479 463.765 cv
264.086 463.812 263.805 464.167 263.851 464.561 cv
263.881 464.814 264.04 465.021 264.256 465.124 cv
264.329 465.748 li
263.615 465.864 262.926 466.08 262.27 466.395 cv
262.597 467.078 li
263.53 466.631 264.538 466.404 265.592 466.404 cv
266.088 466.404 266.585 466.458 267.066 466.563 cv
267.228 465.821 li
266.692 465.705 266.142 465.646 265.592 465.646 cv
cp
f
272.194 468.194 mo
272.525 468.153 272.761 467.853 272.72 467.521 cv
272.679 467.19 272.378 466.955 272.048 466.996 cv
271.738 467.034 271.512 467.3 271.518 467.604 cv
271.102 467.968 li
270.684 467.538 270.212 467.155 269.693 466.829 cv
269.29 467.47 li
270.424 468.185 271.311 469.196 271.854 470.396 cv
272.544 470.083 li
272.293 469.528 271.977 469.011 271.602 468.538 cv
272.004 468.187 li
272.194 468.194 li
cp
f
265.044 475.855 mo
264.658 475.878 264.27 475.89 263.887 475.89 cv
263.007 475.89 262.154 475.829 261.408 475.711 cv
261.019 475.648 260.563 475.556 260.139 475.419 cv
261.185 477.279 263.208 478.544 265.526 478.544 cv
268.382 478.544 270.789 476.628 271.477 474.04 cv
270.795 474.489 269.971 474.865 269.018 475.162 cv
267.839 475.53 266.463 475.77 265.044 475.855 cv
cp
f
268.17 472.77 mo
267.42 472.77 266.81 472.159 266.81 471.409 cv
266.81 470.659 267.42 470.049 268.17 470.049 cv
268.92 470.049 269.53 470.659 269.53 471.409 cv
269.53 472.159 268.92 472.77 268.17 472.77 cv
cp
263.433 473.678 mo
262.412 473.678 261.583 472.848 261.583 471.828 cv
261.583 470.808 262.412 469.979 263.433 469.979 cv
264.452 469.979 265.282 470.808 265.282 471.828 cv
265.282 472.848 264.452 473.678 263.433 473.678 cv
cp
265.592 467.163 mo
262.239 467.163 259.512 469.829 259.512 473.106 cv
259.512 473.532 259.559 473.955 259.649 474.368 cv
260.323 474.851 262.355 475.258 264.997 475.099 cv
267.876 474.926 270.294 474.142 271.669 472.94 cv
271.663 472.745 271.648 472.55 271.624 472.358 cv
271.243 469.396 268.65 467.163 265.592 467.163 cv
cp
f
281.595 469.03 mo
281.301 468.914 280.79 468.721 280.213 468.793 cv
279.662 468.861 279.369 469.133 279.369 469.799 cv
279.369 470.665 li
281.597 470.665 li
281.597 472.383 li
279.369 472.383 li
279.369 477.837 li
277.438 477.837 li
277.438 472.383 li
276.098 472.383 li
276.098 470.665 li
277.438 470.665 li
277.438 469.777 li
277.438 468.097 278.333 466.994 280.006 466.994 cv
280.648 466.994 281.163 467.116 281.596 467.303 cv
281.595 469.03 li
cp
f
286.298 472.362 mo
286.121 472.332 285.94 472.315 285.771 472.315 cv
284.876 472.315 284.262 472.863 284.262 473.93 cv
284.262 477.837 li
282.33 477.837 li
282.33 470.665 li
284.202 470.665 li
284.202 471.45 li
284.654 470.776 285.343 470.473 286.224 470.473 cv
286.638 470.473 287.071 470.601 287.317 470.81 cv
286.298 472.362 li
cp
f
288.851 473.574 mo
292.025 473.574 li
291.849 472.656 291.293 472.138 290.464 472.138 cv
289.554 472.138 289.021 472.686 288.851 473.574 cv
cp
293.965 474.24 mo
293.965 474.462 293.95 474.729 293.928 474.892 cv
288.844 474.892 li
289.051 475.928 289.776 476.379 290.687 476.379 cv
291.308 476.379 291.981 476.128 292.499 475.69 cv
293.632 476.935 li
292.817 477.682 291.781 478.022 290.575 478.022 cv
288.377 478.022 286.853 476.527 286.853 474.27 cv
286.853 472.013 288.333 470.473 290.479 470.473 cv
292.544 470.473 293.958 472.005 293.965 474.24 cv
cp
f
296.504 473.574 mo
299.679 473.574 li
299.502 472.656 298.946 472.138 298.117 472.138 cv
297.207 472.138 296.674 472.686 296.504 473.574 cv
cp
301.618 474.24 mo
301.618 474.462 301.604 474.729 301.581 474.892 cv
296.496 474.892 li
296.704 475.928 297.429 476.379 298.34 476.379 cv
298.961 476.379 299.635 476.128 300.153 475.69 cv
301.285 476.935 li
300.471 477.682 299.435 478.022 298.229 478.022 cv
296.03 478.022 294.506 476.527 294.506 474.27 cv
294.506 472.013 295.986 470.473 298.132 470.473 cv
300.197 470.473 301.611 472.005 301.618 474.24 cv
cp
f
304.287 474.248 mo
304.287 475.38 305.034 476.224 306.13 476.224 cv
307.27 476.224 307.98 475.343 307.98 474.248 cv
307.98 473.152 307.27 472.271 306.13 472.271 cv
305.034 472.271 304.287 473.115 304.287 474.248 cv
cp
309.964 474.248 mo
309.964 476.401 308.469 478.022 306.492 478.022 cv
305.53 478.022 304.85 477.645 304.384 477.09 cv
304.384 480.798 li
302.459 480.798 li
302.459 470.665 li
304.347 470.665 li
304.347 471.457 li
304.813 470.872 305.501 470.473 306.485 470.473 cv
308.469 470.473 309.964 472.094 309.964 474.248 cv
cp
f
312.809 477.837 mo
310.877 477.837 li
310.877 470.665 li
312.809 470.665 li
312.809 477.837 li
cp
313.067 468.319 mo
313.067 469.015 312.527 469.548 311.831 469.548 cv
311.136 469.548 310.603 469.015 310.603 468.319 cv
310.603 467.623 311.136 467.075 311.831 467.075 cv
312.527 467.075 313.067 467.623 313.067 468.319 cv
cp
f
316.032 473.219 mo
318.733 470.665 li
321.103 470.665 li
317.623 474.04 li
321.124 477.837 li
318.748 477.837 li
316.032 474.936 li
316.032 477.837 li
314.101 477.837 li
314.101 467.18 li
316.032 467.18 li
316.032 473.219 li
cp
f
184.412 475.854 mo
184.412 472.646 li
184.017 472.03 183.168 471.503 182.288 471.503 cv
180.868 471.503 180.018 472.675 180.018 474.242 cv
180.018 475.81 180.868 476.967 182.288 476.967 cv
183.168 476.967 184.017 476.469 184.412 475.854 cv
cp
184.412 477.772 mo
184.412 476.718 li
183.885 477.436 183.021 477.948 182.024 477.948 cv
180.179 477.948 178.876 476.542 178.876 474.242 cv
178.876 471.986 180.165 470.521 182.024 470.521 cv
182.978 470.521 183.841 470.99 184.412 471.767 cv
184.412 468.002 li
185.512 468.002 li
185.512 477.772 li
184.412 477.772 li
cp
f
190.403 471.43 mo
188.895 471.43 188.147 472.704 188.089 473.788 cv
192.732 473.788 li
192.718 472.733 192.015 471.43 190.403 471.43 cv
cp
186.932 474.228 mo
186.932 472.177 188.396 470.521 190.418 470.521 cv
192.557 470.521 193.816 472.191 193.816 474.315 cv
193.816 474.594 li
188.089 474.594 li
188.177 475.927 189.114 477.04 190.638 477.04 cv
191.443 477.04 192.264 476.718 192.82 476.146 cv
193.348 476.864 li
192.645 477.567 191.692 477.948 190.535 477.948 cv
188.44 477.948 186.932 476.439 186.932 474.228 cv
cp
f
194.607 476.835 mo
195.179 476.044 li
195.647 476.586 196.541 477.055 197.507 477.055 cv
198.591 477.055 199.178 476.542 199.178 475.839 cv
199.178 474.125 194.798 475.18 194.798 472.558 cv
194.798 471.459 195.749 470.521 197.434 470.521 cv
198.635 470.521 199.485 470.976 200.056 471.547 cv
199.543 472.309 li
199.119 471.796 198.342 471.415 197.434 471.415 cv
196.467 471.415 195.866 471.898 195.866 472.528 cv
195.866 474.081 200.246 473.056 200.246 475.81 cv
200.246 476.996 199.294 477.948 197.463 477.948 cv
196.307 477.948 195.324 477.597 194.607 476.835 cv
cp
f
201.667 477.772 mo
201.667 470.697 li
202.766 470.697 li
202.766 477.772 li
201.667 477.772 li
cp
201.477 468.954 mo
201.477 468.544 201.813 468.207 202.209 468.207 cv
202.619 468.207 202.956 468.544 202.956 468.954 cv
202.956 469.364 202.619 469.687 202.209 469.687 cv
201.813 469.687 201.477 469.364 201.477 468.954 cv
cp
f
209.709 475.736 mo
209.709 472.646 li
209.328 472.03 208.479 471.503 207.6 471.503 cv
206.179 471.503 205.329 472.631 205.329 474.198 cv
205.329 475.751 206.179 476.894 207.6 476.894 cv
208.479 476.894 209.328 476.352 209.709 475.736 cv
cp
204.582 479.589 mo
205.139 478.769 li
205.725 479.472 206.428 479.735 207.438 479.735 cv
208.61 479.735 209.709 479.164 209.709 477.611 cv
209.709 476.601 li
209.196 477.318 208.332 477.86 207.336 477.86 cv
205.49 477.86 204.187 476.483 204.187 474.198 cv
204.187 471.928 205.476 470.521 207.336 470.521 cv
208.288 470.521 209.138 470.99 209.709 471.767 cv
209.709 470.697 li
210.808 470.697 li
210.808 477.567 li
210.808 479.911 209.167 480.644 207.438 480.644 cv
206.237 480.644 205.417 480.409 204.582 479.589 cv
cp
f
217.413 477.772 mo
217.413 473.144 li
217.413 471.898 216.783 471.503 215.831 471.503 cv
214.967 471.503 214.146 472.03 213.736 472.602 cv
213.736 477.772 li
212.638 477.772 li
212.638 470.697 li
213.736 470.697 li
213.736 471.723 li
214.234 471.137 215.201 470.521 216.256 470.521 cv
217.735 470.521 218.512 471.269 218.512 472.807 cv
218.512 477.772 li
217.413 477.772 li
cp
f
223.404 471.43 mo
221.896 471.43 221.148 472.704 221.09 473.788 cv
225.733 473.788 li
225.719 472.733 225.016 471.43 223.404 471.43 cv
cp
219.933 474.228 mo
219.933 472.177 221.397 470.521 223.419 470.521 cv
225.558 470.521 226.817 472.191 226.817 474.315 cv
226.817 474.594 li
221.09 474.594 li
221.178 475.927 222.115 477.04 223.639 477.04 cv
224.444 477.04 225.265 476.718 225.821 476.146 cv
226.349 476.864 li
225.646 477.567 224.693 477.948 223.536 477.948 cv
221.441 477.948 219.933 476.439 219.933 474.228 cv
cp
f
233.35 475.854 mo
233.35 472.646 li
232.954 472.03 232.104 471.503 231.226 471.503 cv
229.805 471.503 228.956 472.675 228.956 474.242 cv
228.956 475.81 229.805 476.967 231.226 476.967 cv
232.104 476.967 232.954 476.469 233.35 475.854 cv
cp
233.35 477.772 mo
233.35 476.718 li
232.822 477.436 231.958 477.948 230.962 477.948 cv
229.116 477.948 227.813 476.542 227.813 474.242 cv
227.813 471.986 229.102 470.521 230.962 470.521 cv
231.914 470.521 232.779 470.99 233.35 471.767 cv
233.35 468.002 li
234.448 468.002 li
234.448 477.772 li
233.35 477.772 li
cp
f
242.899 476.967 mo
244.336 476.967 245.186 475.81 245.186 474.242 cv
245.186 472.675 244.336 471.503 242.899 471.503 cv
242.036 471.503 241.172 472.03 240.79 472.646 cv
240.79 475.854 li
241.172 476.469 242.036 476.967 242.899 476.967 cv
cp
239.692 477.772 mo
239.692 468.002 li
240.79 468.002 li
240.79 471.767 li
241.362 470.99 242.211 470.521 243.179 470.521 cv
245.023 470.521 246.327 471.986 246.327 474.242 cv
246.327 476.542 245.023 477.948 243.179 477.948 cv
242.183 477.948 241.318 477.436 240.79 476.718 cv
240.79 477.772 li
239.692 477.772 li
cp
f
247.528 479.545 mo
247.689 479.618 247.953 479.662 248.129 479.662 cv
248.612 479.662 248.935 479.501 249.184 478.915 cv
249.652 477.846 li
246.693 470.697 li
247.88 470.697 li
250.238 476.498 li
252.582 470.697 li
253.783 470.697 li
250.238 479.208 li
249.813 480.233 249.096 480.629 248.158 480.644 cv
247.924 480.644 247.558 480.6 247.353 480.541 cv
247.528 479.545 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 /1 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 16.0%%AI8_CreatorVersion: 23.0.2%%For: (Ayib) ()%%Title: (Programmer working 2 up-02.eps)%%CreationDate: 30/08/19 7.43 PM%%Canvassize: 16383%AI9_DataStream%Gb",Kl$B'pg[KCgSqB\k2aG;=`n_Ih)Du,f5t*)o(r5D#rp_',=&lc'U11^3UNp[YaWOR5?2)'0'P;ELT8YhtW0cTF%I9tnVKYsf%9TS6'%/46mZh]cd1?._6Btc_J1*`bBn81W/;`r).@T]9!8WWKi\d.ZMq?Mc8p`K>X8%/^aF!C'kAm(/9o"pKSoJkgGi'j/L-7:@r%\Xj46N"FS;W;sTtCSDtj75,Jo(7rFeJS'?:Y1+:[!n.5OiET9WLOsOfi2S.iL&qJf:8gD`&!?&Y"4t=[#fB5`5];"L1-J[&"Bo:1%d>ND[<T(nb=r<(\Gf(kNAiSpdM*]&dig@ciGEWmATCU%0/O3Db,)L1@JoJ4r#b:eQ((3Gas00_.Yl9fZ4,b<2.j7G@p(nhO:4bdn%^[dr\KO]\i&M(\S_Fl&??mWP)E1m0BJ!QiAS^;p@rlP]8[*W;.^i>s85V`=mAe4r0MY'[KEn)N>.$'cnSSt0(qPb#K$0fq!*krdj%N!S^$IU%p=&Hk]:m`[rUMnei(E#^j[D"p6q!&.IS?crN*@n0rl7KQJA.%0*UJaG!**[()@q%#g0'3+lGRf+V[(SEBPb\0TX+D@a;%6?"VSW<U.M7\(5XKH(Q>Y9X[9&We<!n&b=dkNEE>4rMO7T\n"0*jfNLE(o(F\eAm\\-][1'DT[/5O.f#>GB$E(k%Me0m`Ye*o43h%D<Mli83_?-!.O&l%)#IL&'^.%>DK9h(oc=u*HZW#o><JR[_rP=mQ12blQ,nR@mIHNf*/_p:^+VsD0?EpfHABl#<gJ\g&H9j:,?00%m6u6pC1d)K_sq6UY]@A3j&J'b6jn'Fc$8gj\3g?f/d?t<)<kJFLd6d:J/i6]AQJ/6TX^hLh*6ZHSn#auHt;?($=GjJk*Xju;.;?n%U=P(Q+m>-,7-s7*4O5U6?+MnkaRh7!$JQX,N!ei(.Z_A:?ObGj_($^<)s'6g$>\Kg%1]mn/20sYa0@dY*r"?r)Anb:F*PiSqlpH8%`%e$I3!U].>RV'A?G<;)mJ9M3"\*E_P&G29q`t=R>\%&CTtu"ufb&3'qV$UfQj&KEi>@;[qHBL41J$23/SjqYrCu4RPTIs6ee.c>%8E$am!o7:9Wse61\"aNu";\^1]qd$.G+Inui+Tq\*Slnhdm\C)nFb`/OX0/r#=Shg&8RC71'N[HRIt(J+ET?jPa^H$O@_2:%X=HC%LCa$Qr'>hRTCf$H;bVt!k,D`<!"LL?LI7nc.3aIu"&!7BO\)F6.<$Q[aGF^WP=R'!M.@fm#UP(Z5f+&Ip_#sr:LKl4-kf4.i5h_N%ge8&ol6%VXJ-,q5!/Z6P%q@pC6?iPtdYFRt0h;lW5JS!=nV\L//taj'&Xo?WRhQH.++XTD'KcE0E.$6_#QMVh+L\'[rGZQZl6gl[%\B4AJ*+fW2-j(VM&I@%jgo1EEF\,JNp_=#k56?]uGQa3RPp7Fo3q-eP0*U"@3&9\NA:HLkJHMMc":u&fORp@#NduLB3=6rZ!HO8*%npghA+Fn;'THJj$IW/-A#_4.UNY"0^o1>W#"-.1AS&CJ7OoU7JU8sdD)+6u.3d!DZH&Ar-_$NtP3l+c$MJXgPNbfU9#6>;im8$Yp%8s^$bK1Q!:3p[CWqel[,FJZ4\iQnMD)3lGKEhqb`2`j;q;WUHJ*$LRl-m(MB#>Gr=$Z\<3NZ^:_k^`\`"epO$U3u/I^k%,JJ^SA_%M`Cg:\iH,X3oDFU+1-_cF?o_XK*.K,15h/$32#qsJh$'q'Z:PBJn.[_9On,t22c+P9K&*VUbeuD&dVkn'?gS7'UT,nnR[LbT#&k.%F=*O_ZBS$1dNK_r!?aj\0XqW!'qWECfi/.]=pbO?63ecSAkci@MTtO%&kHmG82/Om5F@QDLcD!E<6Qi"0W[<K=dNqSY^aA0#u)&J%":N?Y)3>K'CpQYs(()7L$-aa&<s50l8DW"uM6W_uotWCkcMR\f!Wb:jp%SU()8W@!*hk?Q/BU>[R/>bX@]/m!aV]"k^/\t05aDV+%#b?0gWXnF.pSHk,aQh_uRVfqnSJHZl]+NHFrZ-#(E6A]B&qOmo,R+B</tFpE#kU`IG+[kW!],H&$,&8.%0$/Gr$2/n!Ja<\_p!;;%pNFK`_8R<0FjsW5p^bVDjH`$>2h^T&[KD`gM.Un/Gl4T[O+4nE%j:A11$LK1Y:jTZB@d!REVdLpUqUH*VQKkZ7YuLK_2\>6'A&*X%gArmM?j#0]F]<Tb$W<4D[:7WSV@41i2=kU_O%TRELLMS:X]-04L?5j3s2/LtMR(E4B>688=qcuO[i):bb$?ma2M:T)=D>`E@)NAL%h29LHs*YF@_>IJVC=+5h'pt$g@'"Od^!c5M@lWI`&hCA6R/[>U,&.Q/`b8G^V*8'6ciuo-/Vp>EHA1Hkl5I'J1%?j>3+1QO7lq-W%degkhIpM2Or'Y3S3Op!+*N_K/q?!I9c#8.>5@t%%iW[U%/380Hnt<:fL^L+bFm$N,#7>%L:;NE3])'Js"[!2U:+>*Ej)ef\+F-Q[%s!L]0c$V^`'X0+7!&f&GZf3D?4SU0uF2dC.".jPK6Vsm`%X?+s:H@?akC@I0]4?Ki?uk1N+ScK<^ccWtRQN:Gr53K]52G1Ir"fkH%O!dAZ*@XU=^Pa%JEK_CIrqMW^c'bX]FjeJu/:*RnO6Bd#l,t9(*'Fm&Q6%>r1@PhWm!Zh?crGnjG""mSc%g5=80.)[7cu9g%IJsb%&,nUS^JOgN8ENZns-7m@?\'\&FthnMP[8Ea#P"F*[#j9;U-t'LUUK%L$_Gu:Me2&.0gB,2J`WWd?cS=^=V,tWVN"n9rmBV+:f,/$%5<8*Wn7h4'NhPSM6fLMtdVYl4VY@oAWRES5.W-6?p[Cm,*r\<!3UDoaS(NKJ^GP!AlO-(B$I=a.i]cIls/&i=e><GZ344(Q(EIq(%^2W:3+8-,,:/To87"(uR.0jT$p/[eQ[g1g]BdC_kBHrQ+Aeo'2Q23j;da"iL1(T//l410Oe_hs"8omN`fR^=@&cA:6fhp0r,!m?X%B_f"[iqk&ToQ]rjrG2:WH`AaYB8I4H%&DtSKgbf!gMb<!s)&mUKh$Wiij6[WO@(\=Bh%0fMf@Qoh%BVqf,^]4SkBD!o1S[BMpj1)%E-=bK$Hb;4?_nd*Ncmh)6@q'>E\+&H%L]a5rg%+)O65gli)WVem?V>7r9H[[?5WFqhSu!oV8Gl/^5Yk9rbBZ.gU(nnqV92iSS["g%C='fO[/F<I3+Se])3\R8C@9RAh#gMuc-,L7D3'31eGm;nflu9>TV^?A+2!0U*m#CYJ]>&%B;]#S2W8o7[G`d-LkB%\omIfXCW?L3%,;S&C0f^#e?.Jj@0@csj,DN6R*;Y>Sp'5t\*WQ,&,gFYB5E"TKa1mY1B$h=eHNQb7X"XL04%cj=R%rCEr6el-*Zq(OdVf!ngl;nZ%0U1__Q:I'8m'jC]+aYQ\QlM#s_Xt0%^NPJfSSH+`SS8VTB?e21_'T"5WWo:]8@,4"[1;!Y[5?LJ%c0`i`oL6\K_AKts3=(eLSB2:%4(;mJ/!`JWf7kATekDH"LVM,Srsf.6GSHg!>9(3@hoA0,/B)CcV"cT.Uq>4s]e7KJq^c==%b\(."b*Bj):\HMLJjR`VT&3$E6$GY%It&a_pOiIE)(4@4,[/jDRE=j2TZB7DX@.0B4W."<0D83bVX3m*ERX?+'faLS?R$i'U:K(FY@B%9W*l;:a\IVFhbi!chn6iCAL@&*%*UY(ps3WnX8&"rXGKGm!he(Q#G"doB4)tR%b@V5Oh6l]0G&6JVp<`gA[q+B=h+[_#XIIUtag"t3djHg#$[&A$1On:Hm9q4LIc8NF%nOW%cZZ&Aq-HBT+:CCgLbJG.A8^_>3b^nK,6au+5DrFCegFSlBNlePNVB)^K:((\Eh!BHYKer+7ZZ&Aq-HBR@%W11K0g$X@T&i1`%B\pH]jGR,c`1%M0Z$u2\N8r`Gj`l%?hp(1skO<>sN(i<%Bs`poF2%dLVU4RP]\'^K-iX!\d%e:mq`h;JccNn8Z>\77^7FWFOk;V;%Z?ifp-i92A^kG_^p?g'C"8Vd6XkP:N4'B$UXkP:L4'B$;Z#6Jlm:>$0>;tYRUZR"5*PRr(du=5)hG_:T'()A\JcB:-dZ")qM,$[M%X@*fs?\YV#oZuZKDcn.@)Odl-!7Kc]f)sM!2(u+rVcqndI@[+Q1"ej4%!SPq8sWu@PD1*#QnCJSq.Wgi19iQ$9BeT_W)<3^qhrG#%D]j)qS*gR+OPdJ#_K"sCF5#L4[(T,nMmmoXkf$;D]Bm=/Z+%p62Y)/V6=>,p&,p$an6Z<gKE"HW%K6$K;df'RC^qbUqM(WaD!ghJ%o`K\L?lrX6jb87a(#qid_VU?L%fLhT]e%'P>IcXV*:k@F'[)[\3e)Mm@MeG3d$)@#1(C3#kDn(FlkqAp\lJNa-68:mpi`.Sd/kik%LQ&%b2'(-I"3p0NBNM:O=6Pq3](KG9b">(kK19Cl;f3m*j?\^TN\u2V7"!n1Poe93O&$Yfdp%X#R)eIeo:LO3]\acnLKKd$4b)=C%hZ(C_kO8:BPgf6ee+;bOoB4TokL9%ce+;a6,`h0b1C@=D'5.H*lkR=+SiIm1(&>*"Xf#gWLKuZ!4``f3X72Z$c?@iXGG>&j+,=_G%p-e(GN5AAFj7j^"Z/XDB?NTuXD7CspB'`R1*H'8Sb2j=%!boVE49*n.*A35TW7CUqI=8*@hiD>+40FFe"nDM>\1MncQ/GC`\A+]<%hs%brV\7da"Eu?3rH[G+4k)OCi=<:+-cai$T"m%T#Y=EO#k2\IO,s4Vnf/lC"Jujk"a[QA3W#d@pUBn,d9JD;3:LF]>)Auoh[_l%%RLu<EZ,;F*j'...24M#RZKb5S7Hmkcg<M?X4-Psd_W'((+.iU^Vco<EB%k%_$fCG:!U\c2Se5E"il6;b01_K(`A7&R(ds.O^iIim%$f[g"7F5sLM)uGn:;r`%1$;N[3>HU1`LJ6e:;r`%1$??13RcE9>g/U:G#1or<6RAh>aF,M&3-8H#cGhpWA=-.;lNJ)h;^(]IEP^]%5>e1:Q/,3iF8RC4ieY),fQZ$-_:sZ^q.U7tPq"W&X#bTTB&S)TbFs=tL]cP#6i/2AVenF(%?^\,D)i(jCcd#']!'.7((Y`Fg$5M@%k\4\1P7.>0dJ=r,TuXMO?r+[hg=>I%oD%$"I&C8PC43\2s#>F)l1T>0ZoT9"oKU'0_6HDURWk,\^$L5P@/U=HB=BBH''+\\FS7I"%a.cD!5Mk,IiAZuor;Jim6o9Ar))_@J.o8^@pHOofHsYXCEO'O3bkX=2m#HiSV^1]GP;kMh2f"[Wm69Ll(\kFe0[]<c^VWY(5"maZ%I:f*OAb5&6+"'rJ:-[CV*p`^#XoCFOMt4o&8+0CPj%+7#mo]R^:?@O(&!KfNO(2(di--W"BLh,_r]!k)Hn'UcY['JY5>L=$UFLc/%,Yk*.=Dr@TiJosQe%T>;BJM-J-2O5shU#8Gq<Rrss*&75rq6Rf"<(+!]B38`YO]c*2.AFqoX?if?_'_4LVCXVBZK19;B3oUH#KDm%/M^I[q3Wk2[e;OdV:T'EE5^?R<bh(OX"%m0Y]ZMup99$>I?)E"SG$;Nf):rLe+QG%8+Tec,[S*hj1bSZDn)!qFpHD0pn;kQ:uf=j%U<RBsWMA3=C6-0j[#`]Hr"T$!I7Z;1n(j6-P=e`$,.&[:&>u9T21Dl[@.m,'%m5\5m?-rU'_pFI@C<9J3p\_;g@7/l'kl5Y>_0<g%:.MVlD;i=#4'q8:4i6-la!2#;M\qKA$&561)Ek7'5K)ja<QhXG\X`]cjml=[pqMmmmUIqG=l:_:4Cs)A/F_s]VGe7T(g3No\EoF`%*d&6sq+^iub6#HElEBZE#AP$l;]9mQ"&EXh.1JD9JYt>Dk=,s=,n\o;P64SarSK:Dg]OIL8HnR-^=*a/m2#G\#9J"/pas5lZe+mN%#QCmMGMHUoF4PQh@H4`4`h.S=s19,$n%W5NBtMl3LjY-Z6N6\ik^>XcIHUlC04^)3kIV^)4QK;.LKbbS*^oYk-%8Os=m9RDO'8e:%rT(?;o;A_*9W,0-c/Va%hq:N_ctfQVR>V0.IRLQbAEl6Z_!`?HSLWJ$CA,A??F91aNXsnpm"s#mR"?FY4a(2j?nEARGAD/+$KP7"%rV]p2k"J?YEf(rq'#!UhSBA3Q[GTr;-qdaG:%&\40(o&+W+fQp-;K4Hh.HAuD7S+M("\ROI@FN3.*[+20c]tn=3Xdnj6nLq:UBuI%^Y%LUNsBt%p0SSMV-.?tMYfM6rJu+08BW?i3;#/,f^DJ>_Yq6uI4PD_Ak+qX_;<#HHH.[@LV>F-R=E9TM"q1>MiO^fpCodhjlkqC%4Iq)%;t/:JC/\Vi][>3;>\3kj0^9>iSuV(RWqu0aU(?*5I*6)d*%P$&G#nlfHtIpF=K+Mqp@sN_DjcBqrK<^PU^#P<C@Ds!V)b_$%ltE@d"@$R[lr`hQ7"d[97!<B!VF8@HEhRt7&j:=q]!'.7H-h`[rCY+Oi#Yk0]fp_g6PHU%5nA9(V<ZN",nDsjqTjeMj'g&Z2ilu4%MspNl^Min<q<tnqPLaSlN\;\<D=P5ij_8Y2YH[Tp/(gPb_BBACd_)!e0c7_HkUQ",e8fpp&D(F@6g\]=74[*U9Y9h^2?1NuOQ2%X%#&udo_sn1gW:0Z$ghBEDK@d':;BGYW30h8WS#GanZQ"[(F$ap$NoNsDk3sHqmN'Lm\qu%SIE8Gb2r&r[Zlnj'/];:Tm[+\[o1Pdt%U.Mlgn!fpnn?:9?Ds<bZ]8Vh_L&\l3F?GVZ-+]qDa2_"",kRNIefiffqc1e)qL%*g@$=I"H@/3DgBj>sTZ?^))rd/FM;-X?)udT]%glc$W:^,rJn4iVf5``jdp9.aANq@hl]qRkIRX?HB4,2BeB%LCH:/@.=;rn-W*j*FTE82l_qFs[H/Hbsi4MGtKTD=/*3K_@eAnKP\%J'&+)o#!!&COT4`6_N7Dh"'PPdpknj)nP>i]G$Ou<4E80>=P6VdFf-Q^;]<"_F3bV9D"&.0nR+jFMJm*hp]b-;`)P"4k\F_>Ln(k%o7F`@G$j@>f<4khP6&!sR`Z^ABuA01e2L+H0!C!Q83MuAkWa;'ne.<S3pi#V-Qu#<\?iZCo+jgnNtM3hFO9^apeCo1p&YBY)Fss0%cl+tcF3L]lVD%6NbB;`_:P0$T*Tj%^5lq/aTn`u:,XoQ`?]`/&i$@4gOZn!tpB:ge]Rgg,T*h8*58ho,-Zk:.5PICYO"52?%PI\[%"OWS.:G8*L""rJ4FU2YNk=#d1JWqX[2$=5k^htNV.Q#1:&q_m<ZiCR:1)(jMKL6"U+WLP#\->\p(f'o0dja"BWh@*T$)m%pa9?4+%s%BhI>utaDPKS-)[VeG+1dcrpP&U#:e.:0ccjCtF:>dL0\4d7]=*cne:+1pR0HW:Eq1=/?]](.A!!Aa!JKX30=)cA*$kfKJiWgI9%H;7lEgc5tn-dRDZ(ift]0]?,J3^2[La:M*5^6(^u7g7jn$%IJUe&?\[KrtPj9_SAA5M-hEKa;,p"qLn=*8F$b5WInqdX`Zq!+.!.%"GXfh!@in&#a#,O-fMid!R>'l,"1EM]L!a*AclNd0Q=f<`qB3E#b]?.*.d"1;?/%d%`AtWpAk1C!0GiTrY1_PM2&p#,R.uK%q5PP%@IL,lBX2"SFGK?q+o)2t!i[qkBKiFL8G_9^I_Qu/&Y9OJKg@[d!0A"gprM]=^?P,N58BuA.`2I'_to!R;!)6.(SW%LJ/%t_"Yh<U%5(&4>5\,6CKEjP:))j5kQQUln1b_La5`?4O'G:lu-5;n5L5./sSV2S#&\h$#ojOiQY[AM9,TAoS$VaJ-b)uor"[aICAkrWX$']Ed%DMSABTe`d#2Qi+XAJ,VA+Ol2l!?ABPZ>ml8MLpMC"icV($qJTt,6//bC3V-pL(H(,'FFXdPp.nl=25?c=CjbTCd=Ktad)oSYTVp/%:69]cSfgjN$A7@AB8d2?N*7<bQjniTaT1<^"t5L1dh<AI(hdetc@ff\+XFBb:$cKp!`:<V++T?edE$u*KZiE#&.M>_.K<b/+#?X9%$4J_&#C;F!nT0EWq1F4u;K\LkM#hRGFoen%$t+Mi21S'f_\6/]V?R'W2R##(+1*kui,m8kWZ\o?!DD?<1)U']!SK5X!(/T^OU4:g%jLO<nE=$;kHpKG9l(8OhpQJ/-0anSIj:f>0.4&T3)4JZZ#S>WI\%<n*NrV:9K"lu-JbRL4!<<:7P6<3_gIZlCka1Ng++Gm_$<p=q%+93Nl-BmVC8bd,i511g:3Yn)d"+gULa?q/pVbgG-aiS?e@)\fk`up(m))2D)P%5J]QEkbn5Z%hj&S>L'8-!R_P]HuQ$dOlb<h(;S%R?n%/;>-.QLVVCe!lm!k.lft@.Wb/W+Z),/J4>tNlc1[dR=,^H-nu1:4@g3L.*Q6;#:uLlabSr5`6_%2fae4i+G(XWAZOe+K>=N2%-1L^aUlrH[f)(a6aQ!K`"G7tqh0d]`"dfTR1C/A?:j*qp+EHZkE)Xgg!XrV?M?C^=hb211':<V:N(QF)T@meo=tG@(jj>1ip%ZDp%Jr9Z.nu2Qg\pHRnclbEkkNDdM^Fq9pjR\.=!sE6,L?9Z&F($d'l<R!,j02[r[82`b"OWGh0O5(X:kR's_]Z?Q[q\-_/Y7U4r'*Wi%Z[?c1i7#66q=\@?N2/9^d5l?t48TKHAb\od`Im'+"FpC4`]P+qSRotDr=FHdr!b*V\[eg\@;adM,I.%T/Vk#9Nf4a\L"F9Qm:Noq%Hm[k$Y9Tl=M]KVE[c/3]",L&hUh`AQh%WbqG'ts&,C["6b"DRk^-,kII:!f8@b1)\Z2Zbfhc@ZM2`:,jKhnhX#l[Ro*g<=Rs3[q5%Yiurs0gr3.&LDo$[?g0oPJaUq_nluWH,+N8(!$>Z05>1JpRt:B4(tVGrGfX0pl!ZfjOj12gL<,'a7S4<6Z\aer2GCV5JPq=;LtBp%r2WCW^D[]GV=$[GcV1h)hMKLYjh[_aKC,<pd!&qUD>:LE!Rm1lq(:g;GR=0F,1Dh"!o$)g9QssShWFld4Yh'K;rT&e)0N[Kf`RT5%ePd;?'&<SncgT.(oUGG+Ff*+^/^gJ/%'O&;fI;@n-No0!!9O$3=d,mdXU;r!<WL^ROZlikFsOo7g8YgH&X7;t"-@-60h;6pdDB9P%m=ZUiGZs=p6gN'o(MP9]ZP\rqF^a7bprm(gcrGh$o2QYZRRRH5:BC&UGOaog3:'3'd?.PYo"6rOF,f.G[PUW+<>nPh<S-Ol0Pc5q%42o;0p\C_/9&r?cH:AeEbnWCEDp=]`Z`,XJPb0(Ti9$?DU?0ZTHNKth)&^tm^uS"PTP99"3oWbi6lsDA'nHr7i?(NrBE"1gR1:ap%/XBnC.HWVO$i9"YB19-@4o0pLC[A6mKKk`h%QbQnX,P,@PNh\i<LH/Bk&iToGu)HV/-h+[1L^K4,*H7U=Gqt?,$eZr^:m3t&gOWq%d%aeK1qAAP>O#(W8E5Q6UCT7QDLHOoHISG24[rf;a-6$mk>i;A8'O;Zl->N#jE+)2*^MM:FKI?24`e\"+)$[?AW8\3V3P(K=rbbG%6mAg19I,(I)mel>+ncOR,W_e+\@iFb&@S>MkO#K"&XXFUrF!RQ#<X,3%mJ?B[__9MVbr<fWhFq]dZ<WI@(ODh-QKh<%CM%tJ7l7-%J?]qj>gis^TbdXc>Vmph!&kjOAi'b6dY*WCo<1![\8+D1P4o08jcYp[TE)3TOACcA1U3WbO`/\gP\Xi7AV3%f6m:'Z2W:G:o3_o<%0hCB3'98Q=B*2NA-4'%B;iT4Lk:/o],ZYGOMcS5Q9[O?SS7>'J?BbSA0FM'g*K;@Q031LE-^ln8\am`hI"tj*#KW[>^-eu>-8`(c%qBGMA_p)W44A'W&dn-8nX0HW>b4u;7[E3Y%CkelY9/ZA'Ii)TFYVRnL@<`NAg.IBhriJo$FIPj\HJETX4sE5qVC8FPcRm'FgX\!V%l82J0<p*4f4'(Gth4EBhc"KD*?bqWT9WnZDqu@.h^F%I%[L^6QrBYHe^f]u0PN]QlT!<9ZVqL7I2Nn\3QT=qp!HLQ./B@@6Jg&m9%LY=AJZEpM7VP&**9Hbech_\KWQCQB8KnB)cVT\P:V4iX#U23:ZcQ+E.GA`N@oVSK7L>u/S)3JN+E*L4K1dPrLjs:P.*C%,7ABVmq%`9[!pI3q6?JaT`_kYGa4U9F;=_j3JNl7i6i^\V2H>&1t+3n3uqVUh5qC7A_R^_=Q\lb=R,lN&$Y@>;h/:lM$7Z<@1:SheV6B7`3O%pk;'9]dK!T!F*JDo2E?_*:gKV=2Y_r8=tMjJ1gO2\28VZU^'c$4pAgDKl7G($)$g5BW(Df=_c;.<pTphU!S/2-3F`SiTLjuo4`=Q%[BsQ+&:ehZrgSkg]Qo,E=ZQJ8G&)j>6E78>2an(.UaaIoiXA%95V;3;WEo9BCQC_Jh,-3hX\`e,RibAl64fp!JXt8('e3D,W'r\m%`.(E@(8u^h4;MF?PE/00%@hUf94qIZ1,.5VLI#CE7Y8E"a]gM/!fHR)s+%@>>hc!`Kc=?YQt4H?#2G**;p*GTcHUNmj2%*_Aj#$?%AL+GB$`KlbWN80,=kUCM]nooBT+CeI%*\NT]3i=1>j:\3!<<")Cn>*SmrE,f1OE07aB?(Q()SFt_RM100sfL>(/DIb'/!p>E^;rt%PCP6OXn[:B#Xl*1;Ij`rc#2g[f=\J4)kT-H,%/Wr>`_a^f\H/6[e7;c];QNlht`RNQH-f&3@gt;[Ac,na"8DDKB5XO[2F!31rjGT%%&?VQRdjQu,_0Q6&/cN@p"'=gL5rcI/mIWA?QrV1*19kVi#;/:^6Kd_H2Sp]g-Ops#dd]J84-Ij=pC)-?.jV\)\+t^.0"\(l]KB)%dsu4Do-#[o`7=!b,[)7:+u6s1,@(sA1LSUC7iN&C]%YPd)8V,;3`:K)CY'=_*Y<;lrLqgn->N^X[(Aa7ib#"FJ7?,RRe]#b;^K*3%%&<lp^1R'=[FR>"5<J?G'X%aX!KW$=P_#UM4,7V[Ze91.9;F.eQefZiKiX&9'Q7mCjoj"LSq1h>XTTWsXI?G/P^+t:6>nbqUW8U9%)N<LHp:[4UU*JkFYnFN9%s``HG.PPYG<raqkCm9t&0-`7cOX?EqPXl.>G:'2G"-WlOmS-O$5jhc^C)C*'Uhf5R)j!IV:J?4E%8hm%brWgpG[`JYJ&ah97tBXJU)(*aFKVtb<%P2P]M407(!mg%4bS=F>WYUqQD5-i)i8F#e!`H>gLQsFM1\147g%fAe2AqmEj\?mT`8Pa%9=i\(e.<Ug(F*To"Oq)>J_J@#3iRu?O<%L'GH%^ke#9P`\3/iB4K?[95b=-Y-+$qiMkses=66aOJW]GX&\"u]+c::LF*gQQl<C)'%ekK#pFK9Ba%Jb!VZD2u\Kg2M%S)5d*TRf))ErLSXcC#?np:OsJV!YGh_G,#1,hUbL3uPH80MH@?9jVF*;o>b$oK^NjVa!)ERS2r;%R1t@1.*>8/<-B$aks#pt/lOXcJ8OAQ8pg>SYf65c)Y-dU*o$NMn?'07c8G[[mXp(,"1u8uhELW%"ZGbs+R!FG`mKV;8tF"TWhTUn%A;@s/-qo"";qJd0;e8@t_0H<E)VqPfb[WR@EOE/*P3S&QTJ<QOGc>+2`@NmRhX1puoF<eq])93_\&4^[G1!&s^Wj<Id'cMZan:rX%*"Imdo^)*<+L%Et$G:5k]`Ar'dC4SidfTE-g,nN!K.In(9jrsS9"QCB>'TJ;rb5#]/Vj%0Y5NEJfhcNASus*dXKaMcG:G2?1c3?Z%`rbX3W7%qnW"ILR(FqOiKd:];0\'6ffYh5Fjo$@qi+\VObK4p:ekV?Fqf$TG+:fh8ccRcD%G!0>ptI8\#(n'T$!"-k9uB=Lk"C'E%Q_?s92@J]i>.8#lqBFMqK5cS`/ECA"*\PL0&=Y77rsG&6-N1"l<uh8:ougaI^SMADLXg&lfWL/oF3n:<P^b:a_>4`U(N/e'3&qZ1%c[$f)dc8-"q$-aO#'7mGP=+rHo\k4J]^bQ$#:EP&qO)VEkHEgi#l9t]"X=iQB3B+WIr'o!cSkWf#i>?ri5B5\@n.3Kb'OqpfjXEo%=P&s^<_pR9c5j-OZ'mHZY'o6PFU`\1;QO!p_OkM9rj8Tg(;YhH7sD9g7ehKuDrFK9jt6:8K-rMN'CmN-IS2pj&M>4\1Whpegs;k/%0B^*K7r$i*[-F#5)bj*@*aeHSiCeLQPskR<1hSU9#6ALTHc`Y?_GBF!p!T?_9RO%"A;HU:SJ`$sR4oNT6osce&a?X"0_X)5X1s*d%`b.W.U9<,i<HgYi&fH<`l0T!kc5AiSAae5(`+$g#g[:;ONkqK<;/u>(!2M=e+e>/uF:n-LQ`gCXf"rrI4CDf=NFBo!EYI6M<u81P%+DFF(e1Q?ekA(U"90PI='@kB^-(4:l82q]\Vt]`H9ZIA#)%1r_a<dIX\)\[eEQ(-`fVCiu(8I1HSAB1[k]\S1O2R.K9sW/_^._CX%FsFtt?\Y,>;A"t>>dOUY9JLlgq9C>S?ba7+X+J/*PD$`96DLT#U?7>o;J`N]l-+_;F3Kh[`/?nCZ("J-_q4>ZDkZJB"2cMaG%ES.%87&q[B3L[<OsiG[\q$"5cD3ODo9@OEnlD;Aai-8IP4P/IJUghgq@Z+VO#mT?(T8CpRk"KLa<t^96f4<U&D^Rm(Ym;\b1]Gjh&^(;%l[JQ(PGM/nQ)-5hIj#^/AMDeW\%r26*J:V<q/.m^mmnS-6HW]G\<>c4NDj0:*A9m7rVHN2i!>)X8B)6K6&V_^g0W\j;qAqnZ!Z"O%RrcS<HS5YC\Y3gY/-_m2-#>9Gdas40_V$]3"$gu\k@Hl>I;9\C)/L,EPJNiinHMK,i\<E2N(JZ&n_,\,T/5p?:WmT6G^Jef!?5'W%%(I-^$pKksB(/N4.>-Lj]eWD:e#OXB2[)Q&?Let#=n9uP^,<PA,&Oi^LZ.$/(GNd:=(T9<j1K#\O)V!?)0VebW@(WnOKf((L2>rr%DR_NaT+1VefOQD?-OE/&2E))s(J_T9@\N@IRoY+ueFFp6E/WQ0)B+f`UZ%egAIOXEo0.]qI"*(h]\[VRL:=bOAS<s$2+-PUHtMSc%@RWYVV^96rJmB:LiJ.pG?hWOh+76ZNKB+4/NJ9PY0q-,(P0oFL=cBfgrN4J8]"j8BdJRUp8p&#8_b3@fg$!nr?Q"LJ<gtfV*^(HP%<]XuS$P+?!<52TmAmYqA1&mF"N5au'ZE`16OiAkp1G[fZNOnW\"62Kk32<`]1Gk)n+b8@-j9[&X$O.H:`\5>O-("p6,jR$n1=h+7%PD-[5S*XtWcK)-*QR:M^&2a275,ThhUd\5S/^cMqX7)+Ho^u5;FBQMeVW-Figf/R5+\hY(F1:DMA@J"66=ZdIY0_cWl.(NcGG=T0%1Rgka<8Ss)'"p)2q4`4JFesCscIZ>$%#YhVchrOPiE>BTq/I0#N"'F!1i>IgoHi:*-0Lj!XQgGEcgEpSgtB$C;)tDhVPgb<WR*jK%]SViYZ'=jI%?\cCc>9rE?Pgu4M=oP\?dg5U,pf)Dkd;^K:1E%J3S2%1RnJHV]=A^H`6Af^l/)?\%6i",GEt#!2r?+IEOS*<(cjKf%YmrfR(6<#d[ZCN"`"K62:R3u0Yj'At*7ZH>9)!t#V/C:D>97^'/IRQCUnu-,T.Hc0S]<L*g[D3Zn]kuo1Z!I/fm*$h,<(`tCU1a>%epP$ZYu[H+(Y1\!2R^=pqB]pDH>m&C`I-,a%H82>r`Nao#+MM0]!kN[.Vq1r%na9(2KE^d!NTn7O(oHbo/#42Ffr_Q)jeJkS!5H@%mFEQ3[X1ruMEOce`p=MFU;rl&8;m2!B@*p@?`!2WDnMcOB4H&a`W![Wr=3oF_s-YmSkKXZ-2lf4\0M<>9A^WI\?YP1j+1iL*A*;#%Fq!#i-\oW!T:C(On&7j$q5,rgBl#fYDckV:m7MHF]@+CNUlD,%q-FDSS<C,qd$\1JVCCaRZMA9;eBL4g11HPlQ.r%Tp$blL\_:u9%N,.&agprE>qS;JVa.2Q_fUZt/Y!;@0"g6%\)uaKBqsF3^j;rQGIJ9Q3Lj>N4Vilh@ZoCjo56aqHKnf!?djR]34ETQUd_f@M33Vkp%(\PA?eWr/H1&8M^alTS4*0u!/a4mXr0+^OdpS7<5_JHYK'_C.L#2"X%c=0jQ`Ip*pkrYthj7?b*!#ITWD+1!5a04l:r4HY1j*;On%iO=2b^fu&@a%)J]#%@L='*N;mFV6Dm_\%UPlN;.qnDjidWX"?@U<2],Ve[M!7G?XH.KA/)Y7aB4q-HC#ESl,J(F4uaAP?_`]i*!E%Sjrkuo'4&*,juad'$38+M59>s'E-4-6h6$#!_.YlPqr5T]k+gjmI"E^&!nM+3?6-K.YtiF;V@kT7b+QI-Iq*l*;'niYQPrl,S^U<%4'CLfEj(2o5U/`,!Zci9"N1fB/Z&#D0RA")%Mhr61AD]E>R/qKr&nR?a,(AD'IofPV(iJ9AGX^#)fl5U4W&<q*UL[<31MiEJBb[H%Kcc]]36]t"dlMR2XMF?<16p$PdV5a!WMa*\Oj;dJ2'UH#>njW5r6]cSSW-\Hm<k-.522hSh8d!GpVfMb4Qbk[c`cS^qn1TA/"D[(%r4\OK<tJj(l./Mo]&:ZMRZAc1rRdJX>;"_!eDMNo/\G>Qa2Q1)STUb^KJ=L)HcnEf4;%'cj#*=Z&FU#4j+QCaAWZE/:M_6(H0?RB%H?\2`]9Ve3XjOt313>;i-4=<W8A6ElVW:im4*B\MkM"lf-&?"]<Kj5Z<4A-.UsJHVSTLNP/Z,_o*`)XoY+J7Ghb(;8f+MRLae6PC%\U?@]19>!\OL<rYMqNoq+3InGKA14C/;ZASfRBF`]7[;t]_ra6ah=(rV;-jT/mMkZ6L$=3&I+TrrClQukhpc4=1o0g-g^R$r9[EE%Q%'>+KIcqQ\A!hT-KeC2hLE*$2jd^`<dkYhkDug+!_=t2^g=<Ed2!E;MW[\XWA>?+eqBgND`k_"m'r`dMQt9&WIE#'V>"N=E:")+%qUZ$'o5oED2dKc$UX/21Vj*1*e#sTcIPOZ'jc@X$=s<aLWKP#@SlD0,X)qirktZ,J=l+C%%b]&eo1dh.frI#L"fku)h?2:td!JV1%?Jf)>]Sts\QLe-][F_^4>W3LlSb6Ch,$M1'D<6(>lF(RNm=sj`q,@XW51\^P[mE55B_Yr\nOBK".lFo(bkmqo=X/(O]0riLHhS@6%)t/Gt/9=Tm^:`?iS[QUfDbt1538`!_&*]G8f#,ZE&UZF^D"f[>04$cl?"*_PR'@I"n?1u".en=n:S$*<m+HjE2E[n]m,R\YCE.[U%]Qbtgo1S.*gj6NEW>/e83Z!#eC!-'O2EZ.ifmr+kl++LP2"NUfctqV6SSr[,5C#n]nA3lFPLQJUnuZR$,2Ti)+6/V)4ipcC>*3Qr%dV<kBQ'U?A<SP?*WM),WCEic-jpQIG6b.O3SXVMaFG>c&4%!=_I\q/bQt3^+UtYKII^H`K]DG0Dd#IpK5/NZTQ"u[tD]nV*^@,YJ%kuYO87\:V*!_Y`3,OEZlpk^"s(I@]h:0$$DpY)rppce--cNbU$f,6EnM82B(+4FIOEtdUU-9*e<h@F,6GdK@K^(T,"Ojt5QN\XZ5%H.;OskI`>'OnbtMh]:Tm`M-iD/"=PD>4ZUT3t57Po1/:%k5Vs7dmh13o.WMdo?n2=N^-@HS%GBY$A&`_C)Xc'19^8ner><ZM7e;O%DL`dNVG#7E/N/qW(#c`+\533L6L3l;4"Wh:opJEhDbtJXh6?TYftO/YXB</sOPI-NIsE%i>b_cF+=EI)l,kk91+)Q1G&K`Sh3)#g%+L"s&52m@dj7M[DXf\(1Ek2T_*k4=<WE`M1W=7rk?<LrsYDnZrX8#TA<I@g..R#.&BWs(5lmAhCD;3eV)pt]8=)BIWTil5%!*a<?%8h]iaX"]l#\k:Ob\UZ82"@LS87fUAj-Ci#+8LKg*Ns#O-FMHg>qXPI9<7G$#+tq*)-YN)>g_umT>us3_fq"'0\R@_X)]>fa#+*T'%@VLmJ7bqB_-rW*SRu<QQMfA4>>)E]OFs*7t8jP7.OsUSNe*lOm$Tj8:?9O<ne28$%@Y+%6bje6O+Nta08]fiN9ed\8R9GJ2O1!FX%O0uG$Wn;Rsn,hjU3?3:f8a5u9,l-YI-&-eE"@SCKc5:,]ACKVm?1OPmhW`8K/p>cC*UG<gl38.c:X=lDb1"uO<7ro%&s!O.0Cc:1%)*65!o-A+pFh0Ui,$+E>=e;G$06[G!=1AcbPC4n1%m8iEjES#,gN`65*X/Nu4:[aaR!S/5o&.a_!D=)\Uc\@#QDh>g,C'dnFD%=(%LYcmnG,FZAZ).;-1D3ELI26Jdg@YYc'"?O.1NC>O=/J/P`9@:bA"B$*YqJJa0eXOYfX&%@qg-daEomb1>Auc%'#g=$"4#dFO'M@+%3\qLb]YkJY[WUdr01EO)iU](A<#uA+o+BaA/$T,r(9fQF4!3#[ZRIO:pktKaD/L/Rj8tU?N57m/*)G[kVRqd;j;.i(nkYK!(.du!%c=j!E'II"\(GorEA-N=Y.#/,7jGCICDFT^_Z/i\q\Yl1TkS,cL`DfHVl)5nDE'=U?$3b@\U/=`#SJc2\o-?A@`j4"V=nF=FOIN.Q%R5]CFido/QdCmSjYuo"7Ub@&WdrFg$UQNk!odf%_I)9:(Emd1+!ZEAgjqDuB9E;Pm=(*>.7+_?kA@dUg%4bO+ogld*'D;"01Yq^>%4u+s34\J\TgRD$YI".V6Vim<e\&Nm85@22iSN08*e=/3J+0!OqVMRAR8b,&BcDKLfRORs$nj^2XF"a$J3cI@"fNTIpmI1L._:lr6%O=1ncKl#K".EJla&R(KK^jTq`\T(q4kRSQ)(_rk,Oh,'se?>[i3bg10<R>0oLjQrl)la*!Vjrolk0.>Ug`t[M(MPGt*;:TgLqZ<a%BcnE+QSZa=?<;E[9N`ZOB8houkFsV)&=!5J8ig5mF,B#oN[,t:*(Skk[VipF^nUKl_LD1sPp`k2%VelN0j0uWCes`'l6,+<HEmoM%"Uab76OQi9FJ+<,JPlq/!&]s'ea$kd5brg49`uMo]2]nO0"K!MfZ%19m:q@)=:uN+Kp9lQW0]P??t!N<FL(Zq:n'%OWG%WF#]tXG%A-e.8Oem3BOXaL\Ko9Kjr^XgCbItH/joo&kX*-Fk8c&T]b$Am-KB'd$)_M7Mm<op8P4):]R,g^G5#Le+T7J-mcM7J#N/PFtZ5.ZB%.8fL+Xe=F,,tU+TIG%fX@0rJ+ZfV(i(!JN&04uUO!%>M0IG&l6r#QdO[rdPph^*0bD/m+W,uLd/EPZkE*CU`\i<TFJ`I7^mM^A\;%0q40bE1=_Q5?8f3Os[u2.#^$D[3cdGq8_=.e#_=.P&-<`4YT$r[WXn1k)AB?0!NuFP<Xn"\>Ma^m4(!,)bRc^UR*D?B_'^S<hO+t%ifB:8U,K!7Mn>oBY[cV.0J9`M(7AB!rU`9A0?U7kT\AednCHoB_IkTnAY;_pn6Dt1LM&@..YjX+9IkLA]54I)q6ekLLX*PGM6=^f%8SAH0W$D.1eV_9S]R):*ScMBuCIrfU7+@b:ptb0ad<lpH@$<!R%"G-sk5"Y4YgN,Q*#T*:[ld'+55EjD7g(]#Z`0THc-]7YM<N.h%9c7A!WBfRN</9'LBWqXS1rLl#AlE">MLNjkX%f;3H_Wb:GTWW!Yok?-Ni"1&ER]p%bXkVuoUJ:*Y-8CTJ!j.`XSi8H<nK*[,56Z,%>)\Hf5]g0Va#V"OnIl?iLR_;26X1@mfP["r;atEk&S7WY5@q)"Q@G*+C_R90\2_ND+Y'M168sE?Y7p5,`YE45N#_!gS71H`)GsQm%F\]_nR:7[[,+=1OLU^HX9kk/@QK]-WW:<4?J0ZeX[D^VJ6>BA=8;W"WW^Pu*XNZZZ/>VLL<;4eEqic?<]HE@^.\`''18\X`&ScC;%geS>iQHXJB[[(Te<@WgZbNMVH5=>TJ*r^Fi%fIB(HD<1:`iVoT7/C1UkqGG\&b)(!@eQqr&C)16*oP![?GW&=GFsH-,s@(AR;R@#%p9bdaZj.Zgfp+#'$,9HmSB`P#%d+j)B0\)XSC!pcVL*4XKcKqho(M7#O'Bc80N5Vm[=qNW8bFfD."!;*#UPs6U,ko5j0_s^Kc[]5%nRX+DPWOQ%0s2C:^Ld5k]3_92#pc4(EMi-'H]s\PE%CKK4PB"r)+Wh0&R3(Bl"Ui7&7ui74U9/fe4gfKJCG:q[NR9HGNJ=1D1HsG%FE@'1;Y<$Nk63%U&?YgOIj[8(OIEsUkr4e>%B7H+lC1GF)kn[WbY,M8lX5jK"?DN^3T\)ZGqb5=m]Vd%N*XeE1">s?/5RNRbGQtb%dtK&Y"T[nkjA#QoOh<E`815I4VBV["-Y4o^`'-X*4R)cjJ6n<HA/:8G;t;;*Q[o?BX=)0""X*4u4([AU9Oq("+k&5:;3&0gjH:M5%HU?,pcFeu5f-e_*e%($t!U=e@KggtZ3-.[%Z*>#N3@!VXo!$(B8P7J^>F8Zi`l4LAGOGWP="h]ar72FJAu]tY",JfWG9m.*j1poE%59%II_Th5%q_'"@Xp=0>E_pe.7&86Wk6_iVM8<tJ5b&c/2s.u;Kf_X3K5A,&b)rZ62O\pbbXVtM?XFeMCh>L)>"P)K_k8P`Xu#NF%0[MFY-#Y8Qi%6")f@,RO*mBJ1lWODQg9V`Bn%L61GmbB)9Ni143;.;OZ-3J(OJc9m!rGb\esY\FR>hS@s-=([mOf'$#^-f*K@sN;%l\8;_`Rs9lnhNd3Or3Vu'b*euG^<);+pI`=7\0JHYR-PPAR'5kG]fEsfNfaV=*Ge%EHOad4&rW?VVTUSR/5gif'=`5GN6&`qp$)f%S6tJ#ago8LY8&`Dh<?H+nKuH3]#5F@0tHCNJ!UAgVS*+tYTOG^lS,sCf=*.hDV&467%j7*<06RG=HTFf<PeW5`NCs<WKe&QAGM*k%D[aF&ca;:/_Nt=ZRY:4(!Q=n=qa3eE'HZb(bf97kFXPu_L0QOnZPc'#IY"=oQR:B'\TpQd,8UFBlIk"(5KpcCQmnRY/)DQ7WT%=4%g'EBQ3jT7bqDS,3Btg%.^uTispdao*2YU>P\_I4d9:_IO,sln@F*a7?pQ8aA@?AHW6Fm!C?Pe&3;@;3E`jKC8/[l-VI2OC'>&H2`%C_D:'VeaVcS_/"8["WCJq7@$WZ+q'dcP2FHgfi/%+o@Mr2srhc)b6`kW7IL^ZcJPU07i0amg.'47<U*BhK8ark^^K='f?$C3Ef@N%I'@KKX(@bIb<riKk`t4\B<Lllc#,nbc!:!?,geCYJ4tWTOmZASY6'pk::)K_S.;R"FDm7Bj(@j>hDg^p3TMAlER-mA`G?8[ZG5gI%0AWoPYl%EP3ZV\t?VuNco\Sti=mJcgKQO@b2Z7UZ:d]*!S_pD&7pbtgkA?1sNkfd!;I4&M@:&='<(@='pEFFn`BW@t1A^N/c(BF+%%4-cE[X4WLQo-<JM85IBqJm^"6/C^%f;Zd/MJPtY?3l95&2o#;!L)OcMWf"?']oGW]c6:]kQ-JH%m3*A$P[`TrO@f`\Y=Qc"AbH\%C,2Ts[5U:g)UJ=HYfUop'[-)_1'ICSKs&Y/a.ZD_M^Q[+9HbHKNg5b$FCnBS>]>HFcmHdHJX=Z)\f5teAf_i3Z9lma]3q`C^]4.l%i;7'jT\-QSbekb!o6E'90WBuC6:t_MPYY"=6A%\'Sd:"L-u<^s]/Lr'aKhe4cM#\N9dO+lfi5Uc]f\Bso8/QQOAKkYE4j41ofSe)%VBs2tJ0d)kj5E(s(CuO[-E9_A6NILa"7Z^h;5LH2;`W'+*[R988jd5BOLkYpjl8)d0P?U\(s7dCbOd_Y3o2IY7^kQYN#e[r->?8`%j$nr+'u;p*;l>T-;/5skAZi0X$(/CQLVWd=Ol+<,qonB\N7898,faJAP.l;Y`O)\2bs^r3k$&sd%j/o%3Ta\8QQ%/g?\:ic.7J1p%Y]HTXKPGXJ\m#t9ZA3RX$4Y4;05ijlekh/1VH55&jTU^&^kRBkm+L@(Sbm6'Hf82-cSU-&_*J&:@c\.OHZoG7@YB6X:Zl2!#)!g:%9!6"=)is!+fLXSZn(bb?nep/;q_St7KrMr-\OZ^5:O.<tRm#sO,'P.Zb.T1FGgZiFm#+.l)B501\i:(M^fe^YTHY_o*i[dDR7[20%Kc=\Rn9$.X&Xqp!QDgk\,\+8Bb-_*l!86bEWt<IC#h2IL^k7D7JkpK*l;.KB$c,P)fKf(^oti#Q%sZO6`Loe$Qc*4mb9k&t(Z-qR%-uj["^kdp8%1oNu/CT%Zr9="<pg_n-`P[4dOp*</&EhDm_eF5O4MQ3T;G[UCSX1T<LnCA?@eq42Je&Y!NX<'/eZcY)($:l59+[pm%4-ns;n_6Y;^Q:1(gMUS+=Oa@0i27etnr3cB1[qAs#sPH,&llXoV-W2Dc7Dj39]iZ^qA0:RP%bl7(Qc`UKPVu;]j)")4t`m)PUK&5%6]2,DmI/OK(/fth9#+nK4G_Yjb*JD=EgLd3X\M-s=80.HYnBmN_ARloor(1-RHLgCi__=D=2s1!K@MmG*E;!Ye9*,1L)c(,-9d/"%`Xu<GLsij$`r5roP\Vpf$:gupmAs0naa#=C,:P5d\F3uA_42pi8)Na9mE46UiO;0/_LsL.J908DKH0k+U*pZ.jGPq&Cb7#k?u+Or%\-->]+)g@9&F8jgUcW"<<R],QdU#A'q1E*$1cdGcJVRt_hQCFrnK&84g8*TY/\_ulH4_0**`)ptF%:b*,[-YMdbkrkTci=<ZmWkj%r-eYP#cSR/!q'a?,fr?M6T&ag)Ss3Xl8$n>l53raAW0,tI';d$+_mN3/7.]Jiit%Oai#DW[ik#Ggc.%*p!EtErc%pcDKhVLErNZs%,>@"87JjbQ?+BG+Yr<uLC'JhSe@tJjW&H(KSJee.SYpg`ar#7qSlmQ:iQ-O#aRPCPB%p6uSD0sPBq!_NW>uYM8O^VX4HB`+Bs`$`%9]RK7W-.k`LrRJJYO4i!1Yh6%lX>Bg<0EajYNP<qmmhm];K>XZPFGgl[O0\:QUr:4#_I(ApW->^&L3Oa`o*bVVJgg+h04D>\$j5R%eJ%,SD/$pi@YfE)@ZA@TYRM/V^.nY/+3_O%h+ST.AJr*Qe8GH^"mnX/pj3T\5.k)L=[FUQh#S<L`l%uq]cJ\=U52oCCUB[VYhjQQ%oh\1+K!%3Ucb]`gOKQk2U.plE0kVE`AO%r7Ca[AZ9DH$(pAjGC/5>BK#b2"g'VY!jGEBLa1[jIB-H*6YfDGP!0KAJ*Q0*#7D>EFE%C13"QkD`tam8AV`ZmiUO=gHf8^aO]mKUMUM2>ROPrDM2R`;/aSj*h:-P2r1[Xl)D?lKT\\C!f4p'^1HrO;lq>EYZQ[iQXl4S-+1R%Ka6f*(\Y\@&@D6m.'3_<B=MX]hbC*mn$phl/p4Y_nhK.dfp&lZP!QmMb+jkri4i4rVrj:rL&%W2e#I'Y$d6$_q%3f@QQ9&0SlJ<&%6`?j`F(?BD=g#;g1\BG6.l"Uh<3gGN(BQ)(F8F&+`>6plNSSuAjNEli.XZa#!k9r;Bo!$_D/(Z*YTD^d#kRB_^pC=I:PDLrR[+`b%6VV3jj9u'kF1Ql3e\t3DFpWo7[>`Eu\!a/#;""nTaC&VHYV,Bi:"9&W$-mO)261cRgL;>lo^g(fFEY6G&8mlPbKX(SE[jR]>%TbO%X*&!uka3F9[LW,Oek>@C^kn5P^"<g8p<%)u1sj.$\1-8lSZb+[gD=t=]'7IS$[I5DZrPkF-FfOAgP]6XO^WC;rR?3)&E[8jjVYKV%l2#G>[41hF+.$eVI9!9s^]_\pfW'</2D*9?e5f0#I`7afp0WOV1[-Y5GK7!PjZ.41FueOcrTEo6;;Khkqt>0tgVlF_!&E=\nKYd(%(\f/;k'r?ND],[ZW8>sP[^WdK<Ofk*5V,?bj_`;reO?Piit-/LGp@<J)j#BWH5ohU_K5)1Q1GHs2XJ*dq%b`gDnN_mF+NH;Vta+Z%nb2kZ>DUM%]%Fl&[P?B<pD)Ap-+-dd7C>"ngXr*2$[dkuMY'\VgR_rEpMJ`EghY?Df,2siPlG!1Up_D)p=i=op*;&jUQqD6[qh=V%=4OEKParU_R>5!=,[1+^)[#kLfZej'a1adm(SSFNo/<k@D/kL-nK$".Va6Qs/C8u:)[M*VGUkO_086uHMm][n"%6#U@CeJ1[XMt4%gEnR(YSNe<!Eu2pU(cMC.@YJD4m/m;G='tRLTMc29Sp0$BXRtr)lKo5hn@YLC5!G(YdRI5c?"[^rf,2j_cJKj\#l&!P;hdP!XT&S%`t)Jn<#*%9C_:"cjT7Y,h77smk4XF-SF;cM?bcHG/UgaU:gNUZMeT'ugVqDuecg4&^N+CnfHfR"ShpuP#%tR7[[g6-?)N8`pF$\V%LoM&sJgEKamaMcAh-qM0FlaFE2U6=-Xn&5FLmM-hM/SC'C6KED+[;-iE.X]jH;_#[Pc`dI/mJpsWgER@I_,E9*cuqKS#HA7B1@30%rWgl/*pJr`/:+^b(?+@D1,SliLdr!"1)pr)>or>[5LGNX@&aG=`lKkY!\Fr7UY-6,j\,]rV$Ffu>t5<ZX!Jesd:W#%H9[D?F7`9'%2&1F"#'?)p=.HYpE-h=W)X[R7(e06<!q_q3g%!l%GZN<i7Y;:,2]g5,dMCL*cKLFQeH*mTg$Si:_jWuS3Zr(gD8]L>`Nc*cM5E>i%oQKu%ncm_4B\O;u95Tm)[OYQsXgC)MRT=WKCUH:bXZM9^<>C0Aq>&m<4'bX&^<,fOVBC\J]!%ghbTpqZLh=@=BWVIX%33t?dt/YQ%RHOM+\st^Tk3:r1C.hsh;VUjY\\pj6ckMlhm'?I;jD$L/lhg:7S$$>BOnmVpQTl>uEKWO4&)WG<h:!NPPugpl3crC>DZT#iUZKJ-%cB?q-d?f7MN$+lS@Gh"&c28"+M"iUf;DR&;jT_'Kl8]<GIE(Dn$0QT!l5T*(bB&<jCTZmG#%q``2;#)S6O$Va"h3@"*eSMHXr1K@%qm=2!PmGT\ra8+OrJ$R8L(js!"=BHVO;I#fQnK?L"fY",pkT^bTRtnW/p>oY;ED-,`6MQnfD,1l?3lCmi+;Q+PN<n.7RhWO`6s_"%LO/YVESe\UM80DgQC1rim,<Z6Xt%s9G5::p&oWNJ1@DIA)p4#!XsuP,Jo8nJ;&''M$XK@;Y=q2<]NEX92.fOc2">h0@#h`N?+to_%3=b@W*muij(.CNFL^i=2$PkEL=d)F-?3Zr0)pF`=IIS8G%<TNYE%9rQQ%bQh,OY(:K+hlKB<Wr.L4GG7[5Q_AoG(3hV:i%(^b,XN%J+J.L`gA7&=6d&r$0\4BCO%!<5QSh<@&&H(dF<E>Vus^n\&Q:aV^jWtc:FF`D?/tjlcbBq$aQRg/,=.FAMH\H'rWkAU!<^>qm@>=%/6fk^07X,<.)Ae.F/>0nC]aHfj\1`El9KFY\2E17goCGZI!L1=W@?JWe[iUt?UWm7#Ug8+<b@c#&&J]oFU`oUf6QY,,0rn2-NHd0%3qJdg]gf=IJblp_;;)/;(1&TTL)NmZ)>)1^WKEJ:+gA"4`Pd[Q'@9C8IsU&'JOYVWd2K4p#UkqB-*Y8I%6*$Y(Jc]!5b6:nFVCX:%an.<5%&a2\(5@3]_Qnl/7?t[.lnDrsYL>FF5d;ld?>Tg[.@$;@!ie&[iCZ9f=RO3$W6WrZ43ThV2JN5*@(ZP?[-!f5nijR#$_TO:%!pfk'e>b:,RHHkZ$0Yk-/*92_#h6,6l/ghJ5UJ-T25"&kfOYUjBJ#Rd,+ubMk-_T'kUT]rau+=7"m][7j5G\,TQ&!T"C!DP!c#4h%TZ%mR+?':K,-cI.B&<T1,1VR]Vh!'oMJE<XfSr/^bdFpp$"tAq]NSeq5QMQ:Cb]I;fF6@JW^-%.%Eh56G6qKlZjA.=4hApij]BLq%3mYGXg('T%d$L''Zk;LEbZV,MJ3kY>f]NY/oef%8""cTo@g=^VW^,HhpU6&HN=W3&0Cm16\4-o36-*(2&?'YEC!&j!BadJc!,2.;%eL"#[;.BrT&98nd;nnC/IP_-o!<EA\hKHFt@!fj1k+rIhl<;fh]%:2!92tsK0!8ZP\K56G.qPs5Klb3IR^'2rX>IkR'Y[a/%l[T;%F.7kK4mRjLCp5\'^]OS*SKOT@M_.W]\^u6W"22JXmM2D7qGgfZ&&*tV@SmGrO@BEu-++mmC^njJmoa:P^J@??!:5tZQ,&!5ER)43%A[ld45_S^ac$+U']R+XBc&4Slk<-5Y2__o\@H1WE'CE;AGAEsr$WE!k50`LSedQr2>&S;hgNdRQ^0<@3]fGi;mZV:Tc$.?p_>EB,%[72RO\@Y3bXOb]C2tsIVq=;P;K&e+f:+c45@Zqb?JWJL_k>asg)SOX2oA.$bb1W)me?a!X0pVX&rUf6aO8^Nik.<8K>Bt44SRSc\%npYZKfA8$anLeeKZ'a8$.E-83iMJR.550/;2r@>a894=Xl^3aj68?.N&WU\?)n(_$k/P";M_jIeh/*L7'Jl8E@Y<A4euJ*n&6O7g%I!<5dJO)(jSL:+sBpKGPgS87dT1YlXnY*#*l.OhA`B65l4KkXfGUhsk\kAN[X'5A:=fVe`#0R.>jXP8RA5-Y(T<k(Wp'(^T=VkC<%OT:l`m!6bafP&J/MgeN/Z@.=eYb"qOEpNu$*!N2oPKsTU^)A3E$M0bmAN]*,"\2UT"lE+K)hI#!NN*!_(-RUp"H)c?%6uA+c3uM"%QNc"fTF]?fJV)6lm+Vp_juH(t]F5Qf3kZEX*2`oX2;"0ZakE/G]G3Z)!8=\[9FIL9Z[hTG*3=&bW4rk<Inh"4Bn+eEe<m'q9C^Xi%=;:^P!"/9_&H0@\!;b't#Sc3+bahTMECJ:T#,!(q!&4Yj$#"G^<0$g@#^fokC^(5VMIfXGK6LVm1\W_2Eh%JX\\Fi7084*W&USSP%'AM89XX+=_(A7eFO\!%/HKE;,W3[nq`'V$3'Oe\jnrPE:eUglHPsP'tn3?_Eb3_aEe+FZi+6a6I<aBAP+KF>e9_.2N49ohkL38+W%K"PQ[!;P:Uph;IXR"++_!K_rl.0.>7.[KV+8M.*H4TV=5?2;b-`Lkf8eu;FiAi,CNV?E??M8hd@7S@ke2!(OBc_ShTO(h?0LK\7!%@.9E#kqhYeS:JPPg&n5mbF#2W>U<]n;G0s2MHcuh_HjX\$iYF?`r+;SbB.?-"jnu>RDO-A:]Jf9ks\XdJfjJ8&4>>XUek<(W/_tt%Z\s<6UDj.TpQmiFp%(qHe#;10K@dg32m&1?E=cX:RDqG/g+3YOirj@@[qdZl_Tq20(GVgWGFa"dabk="B[-t@'bjlLHrKerRY,`]%Ss^jRJljP#-hA=!/=W6T_Xu&oIuaQ#gj!cE9*Cb\G_ps4q\>/\%a*@:Q\!h3?I=+B2U.'nf_1JD:-7"h!D"_J1W7H^=\q'4W`gk'%j&Air)q@bhe&i]0?%d,g>>UN+aDO:)[$\q?[<uqQk;p$\X'EIrjh?VVB:dT?'nhg;?Sb#&SQ!],>Rd%\g]ILTVuC75aBp`*(H4PE%:RDm&/A/>p]3+dU8_[3\c:d"3l>f`lIB_dBk\>anT+7\RD]W^`mq?4V\ZC#.<L:HllZ>3o7Z3XMf/rbRNskoSg-G:@A4\>LOpi\k%2""tS=_=V,qRn3pfej^.k6njC`u+'l]/I!]c`Sb%['<#87+0iQS`bnJCdG<X/<M0r-'mV87:Aid7uid5N=T^Zal/9@HWE9PQj8Ng%,K;#_2@)q0*Kp^,U;gU3Y7ie&KO-WEMk@FI:UsIe]hU,6dd9f%MlBI/0lHQInbHuX9aM#G)gu;.3]@%#S-S'2p4.$nbcb\D#amp!%^Z?hD19hbc5:-dJ3T*3VlgGAHh**LJ?@u[9P%+3YUDWMK.H^LjMG;pt<7"n9M/2PmlWEDqp8gZ[,s!B9pDm8WTbc!mZ=D=:6$%RY%Y*H]Dj\5SrZr4IpgG;\rcXTsd/9rn:Itp((2O9W]W5iE&WIlpIo2]A$:u-q#F,))XR`JBY#G[3J;c/t(%`M_ALg"U$VQph=IVL&6%9q=K.gQ<H'7Ob7pU+T=->(`chfQ&J+:6fB[dh+6LB`Y1-;bAe!(U5?%Psm]f;(ZP`lFc:=-J.O^oh7YP#RGBp&O/2MGdVpDo9;-O%J9el4d/\]!@>A&f1B8A'Ql!kVq(qgA/fODGba7323Zr]tVak'Yg't<7*^/$M,_!nd:^BFiC]1d#URn_6-O6q1/]rsWbi864+uKXY%:*[##WOTMn!!Q_U/p;eQM(:(D3t%#q]9BTBeKn0<)."nqpa9e_^9b'2Cu]>Rk'`DMX4<B7H6H[u,cbPQLKDY2r9$m$D%"jZZuT)r%6Z"$JDL$#C@ue`i\DpYSjco=7#_bHi.hSk/Q#:Bnk6aB-ePQ"fR<K4>)n%nEW.Acgf>&4-:hNG?7a2Vu<>q/jC%$?r4YB!W.>-lU%!&fMY^5H3nBnsFh(92@_b;6,gDK)SLGS.ZpC8fme7DeAhKn!H:`WbE*[E?%k7g;mHj'&\@-Kg):hj[R2;[BM:]M/SqBAQnP"DfhE%5=YO/!<?Z(FCku8fcA6Oef<Km8N(:>A`:P,jn0QOo!PT'Vph_kcj2]t.1qHK-%#rJgi!"rH94)c=Oa&u)X=GDY]K'<D=W,BP7K*C%\-ASrm,@RpNjJSXE-W.g=n=Tk2,J.Sg"IKmSDScnJOWf:Hh2GNp@*IY_,?jPX\KT+r@MT#pmB[A&oYX&T'_uQ;Q,2WCoD]s_6?/a%DP2s%1QGb$E:k++7T.f,C8=hfM_Y:gC=*st\jZ_Q<%Qa.`qG36TPghp`S5:X<1d3heeV85hP,RpMA)P+[i*V'dD1a!iO:&.qqL#5%BFEW$I/=!]%?@`3dF;]Ck;[fm[!AIS1=#>m1cWY%U<W"ib""*DMs!(bZ+r-4[UmhVK>VtO>Wk[s.ok]UmT^:dmi*/d^hR+qQ$XAJ%:)Z9"70"19__PtT\,_:fI9aABq>P7f$O?9;2)DSh[VG)tH%+V?ph3Xh`\b:%'B:X1[+7apBcLd3,nOg6(c78MP^;M/e/'/TT($V*%a]A`%YE7jN?9bm`%A,l9]cjnoG?1i;nNf8!rS<Dc"jG'dA4OY;h&Gcg9qg&(%;B><Zg+md0DB[?,/+:e;t5S=HSIM*[eO10(B`^q%7XVBZA`aB0Y(b=Yc>n<IaVSi@b+hqR3t:%c].[E<`qO(hX*DO/XilhbqSG[se.f?96fg?[%C*]3/C[rX4\8Vu9M*H^6>if*U]Acm%k(n&Og[O6S41-"9f%6RVRrqq<<<.X\2HS<#1#)FQ$GJj3]opR9TIK#oY>S<$3C.6GCaiZYYqcjOQ!dKo6Istdk,MX#M(<HM6"u1*%VVDPX9%?8h2!S:J]=*nL/TFDqE*^$8RaOZ6H2*#mD8BVPH[;GJY7&!>r%f(NQDgdS4Q@]?Z=+IljJ>r,i`e7lL(FHi-c!1?@$`-*%rGfg!PVu,:=q@r<]k#*QWWcp$0qb+@/A3VOkWX+kl,RV8VDH9+;R2Z%?I,+Uo+'UM2s=:cDtrrdFPG]GPFq@Dr]>5Vhk3@*=8mbp%kdJ5l\,<\mkMMufrW\q=r+Fl[g\qE5g=q4OI"uV:)g&l!rfMEg[_G,;rjLbJhP&^'#2R]WK&:g.DYkApb>/bKB:jF(DWgW6hg^E!%AO5mu^RhQYGPlsahL%PF,A@t.!o8K2"9P8tmL*D\Z!0,R?.aZna;?.FQuhD^F7!<s&R!XaXm5?>DU",Q5/$Q7YnX4n,9p]Zb<LBC%0(q4!]($A7gZpdfVUU(6VG=.[dcTV8U15eG*^>YS,.MUd`7KW]L@*@[:>_s(ZL-2if=lZTPnpOS52DjtB/[=s@r1.\/8IKBqd#+n%2Z86smXJp)p_L]DBms0i^?I?sP9T2dY"s.3=8-F3B%Za<.<RZF[4NW:2gpSGC>sZ0-"q09gY@Xgqn-dFmouPQ1:(`oSmNE[XW>fs%I@[+Af8oR3bq2Xe)q36DH\<#+=k_<H9[4d@K&*:@rg.p8]1p`kpX&OVfPP%seb5D,'7'TV)`-@/0NehK_W7cX*H$2E1i4&1dtNEk%0bH(B:QrnIOb`6I6>qX6Un?;_;sG<2\hl:coTf57M+R!/3#clSZrn%^"8XFkg.!pNd,*A2q-Ei;0^JqElH(HnDFP#Z('iF,G)\Z@%WH!=Qe-0oV<fZ4`;rV/7\uRt\e(UCR,<kTQ";bN>a2UkgG]Y1n2`?]"XhgNlRUOA76%_0Pk.UNfI!oLF9T8J,1NYN8$c8:6])7c>%g#O[iZcieqb(8s4`/'gaGAMj[AG.#_TkLbaE^]HpmD<N0l"rl8>^>mf2TE$!?@BH4#g)Lp(`H`S0jRJ2Q5f(]__1ZM@V7<UAf#Z`%B`;WOFh[G-oC97hFDbOUk%%o(Z6i7CU#$cs@?)/sa*"WDMdXCnNsuJd&n&U)<,?sBnDrng3:Sn"ds]+Fi&:Q%:Z%1=,2<;OcUa;U%o]L(]:#aDl\s64_q<=JuA;@;YY?T4>:5lGmo9&&XIAZNP6VO'aIP`?5Y"a'40p$PO\^bKUht,OrZ"Mrp7^#=7+.MN7hs,4Ag\-u=%qt+amj<FIXN#Z&*R8(@N?Y%s?b"S"f9d<S4WMSi2PF>&f1LWnN3E6jIVd::00iCnR,@cetG8kCYbjCfT13LV$cBtf1MlJAchekt#%F+i^5cTqMTU7^kJ7sN>LZhiaQ9,l$=mr'k\O[0gfVrD-nHqLm2eB!S:U`p4a;2kuSkI!0&j)WpLgDE.RE6cnS3+nT4PJ_HR$I6Ik%cJJLX)M`Y/iQ;jQRQeqNnT)YcO%K8SY9u]TkA$O:o'+2Ko7kdKo%@AN(CrkPkH`,H`L[omp6R#;>Sm+oB@Co=BAVA\GZ%f&5,[(/%mUBp9h5n?VqkYQS9Wo"jWP05%S(J+4Hb->_G1][\:X@YEcW8UU*c=Ta^&s7J'3imu7,1)K_p+3Oo>JOhH)MpMm9nu5(@b5g*tL:Z%,5'mRi?7Y26mVQgGdoZ>*7rl<nSiVONLlg^o>SV,nUWp_Ge!^8pf*To3TB"p8(RDilYQ"4=$1E6fE+7!,J5=ScOS)Fo&3E(?KCN=%qUh-aTB+HoA8#gTG%.6`<&.W2XTeGT3<EuqIm4=ZfN7VOqWV_:S!o8"KBl^-E$Uq(llOL-TCuVZK!d7?QPVs&CH.5J_q9ps#X:?U%f4=:VUE%c@I+78H4=`@NrLQrHDT2.n.t2+#CPZ:d0&\q@X7S2@+QU%'0(cJ`WXJ6+\fR^jCG26<1V8[j6npt\IBk(D0LEF\VQeJn%3JYXEV#L)`5U',!d4%XdqF@@HUSDki!YMF.W9Yse:5VSjH$$Mcd*6*EiUHq;Ucpu8Lt'HM'Tr7e5U')JGGTk.8:3S[f@gHfOp8MZ%YgD?>ZnIkXj;N3;JOV3A_oWEk?Z4\O%>C"Rg`5pC*E4HB*4_a*#_f>F=*Ab1:n_j0\"#(a0,P&J.9@R8-sW*>iS[)^jK37)L=8NK%qD!`B,f6+We[&h?#>[H.,CEQNi!E7iF!alP3Z%)JJ-o'pH4=Qs%to_k*5l0lU`Pa;k5HeiJ]=PnDFC7<:OMeHHQ4`9#"Gs_,%g@2%*St,PN9`mpEWT/+f6i!fAGsD!092QJo_dF*oum()OnIK))TnIdihu/gBE%hp!WKWOA8PsuqoG2+pGVOP8o!MKol6Q?R;hud`L!@D%oi8gk?hMR.k,iJh.(Q,8D!m<F4+Hn@UiLI-oa)4RCZis3?cEKmNZEKAC%'Yn_/<$r7+coNHMt$=&U&[%I"1LU-hQdB46$Nnh2\]Y%NQ/PM^G4qCYhQEIGDAS+1]ZmZkMu$sQ&\>d\Pq6m#Ghn/@=3a!\t7Hu@g;%@I.uKekMtRI-:ZX9FlN_?ET[!c_a4%Kj4dk!Iu^SM%2jcGcf#b1LdXCrfnA:<mCHZ_&g%p?PWUAn`GlFZ^`2V"ZYMYE>NphGijn%s05>:H!*;f[3g64Ts^[lpj]W:Yr,3\7"b9O*%A\qU+%T@36*p[M7H\m0.Ij\fl8YT5Wr?a!3tqnN0E*`pDIm`Fe>3R2"(Mtu9KI'1JEp9[u\WBOAg;+[pKqeauK%]GQGKoS37o4m6ep32Xh%ljn`[BW&n.>TJ9APO#q'=:r*KcI4X0hE,9;gsh32qq'H]T8[5rPA:X"T@1`8*I7'In)6mlpV*/e>">F,UU`:\'s@!*UZk6\#efiH%HC0-.FBroP-!;3m1gQHbX&Y)L5bdMS<6cMP-Pq`=lZ)tCohesVR]\0,DHs?6q4m3NCTSD0VX*G<0:!cW/"3UkQ>X!hi]PV1?$7.6%=s%93?'j@%IObpQR]`nu2&Yee]e1'pf+gq;/nSYnBY'm:h98*,d*Zr@V`U.;%k=$N/!b(F2.>HW\uo-rVD&5n:"ON:Hs[@?RViJ1%F?n5q?!WGtnBN%Kf@AFDR_lC#diI)$:#u[ofs1@Il,N)B!CtU]`R=F>Z0E?(f0pLB%Qp2_/!b'eC)P&pUZoe=N#Z@b?!$Ao6[Cng%BY#WqB+HDZY3UaU%ed]4l$CL;$V&T>Ye2&c1gS]bT9t7E$r`$4q3b!Vifi+<Q0-cO=+dp]G\b=K9k1"FlMJJ])$nO?^o(tCJ[8:b%M`L(QFYQ"B\;U1JeW&N?VUhg6]2'fp:8qYplEa:8)2h6(fO)Dag"/H8lRA])W?qdS3UNa'AU@$t/or6mA^[BOE<&q7<)FL$<:B-8%D+\%#\"4;28M]$5d1>,(,pEIl9s[pp;hHZ&k-"('j?e'sYiM?dm\\JO)7TQ#QFRr5/ZW1@DU+oqi>%sA5C&PMG8'n<LP>.3#ZHmA%G7/1#H^2-GlK*c+BUQKd(Tt.0/9JA*Z\NLJ5E>"<k!4[-^Pl6Gbnt)%00Y=XJmV#NmS:CHO(2IGB3Erf$,-a&"Oa\<n%!hJl-+?a%9uGj'7Q5)BS$P@cT*X'u;/&7TFZZ,8M2Z_/KGi'3@;B%/dE<=R7g*D&Q$-p5Wr"r$#S.nrlXo]_^\e!1]qMC2KCXc.qnAseeDr<E%QS83bL?oNJG\Z3qhG'$m3-BQ+IMCBoRR/TQp2aikfo4EP4Op>j=V&h2F>`8N/UI]QT%a544aD!s=TPM.T(+.#4X*WBoH\%n\#[3-%X`Jc9_Xsjldh!cP"u=]-R%'i^o^$,[?9cutNCP4=C?LLKU$$:8R\tGeZodSR>..cA_lrOK]<V(4=u;]BGj`Yn);'f9?C_T;_RRe&%*'feimUsO)L+_p)m\d\,ef95LV_=Y]XT:..P[V]lh!\<q8A*2C;rj::f5OoI]70:8McR>,NIC,8F(VRo2_R*R>D9\GOcT*@_cAFH%XZhPiVSs5AXd$:s4OLB2hY:lrG_Nb)$Ic>5FoMemF(@-uo[CJpaYB[?Z,[(c=SnK=SCW+V5HskOA?!.YXlnS*09Vs-&c&qc!.hQ-%9:%PP7\;3qB4_V852Ea@ZZok0oeJ6TghcNJ.$lmL&7&OV`)ELF(t4Brql_0ZVX(XU<dJ"<>1Kfd$a'.0@VWYeB30GW:%&\4o]"'X%\]gUhN]W^_[P.:fgg>HnV5><7[qtM83#K2h:@cg/%!(GH_Y%H:+Jpp:`(;PP8A?;oSMXE>Cp/o>\;hmsSr5<SQ1>D;`c\mD_K@80%bSoMfjiP-V:9tCf9f\R10s79X)fqjQ.XA1qZYqudZQ;6QG#s@_gm.I,Q@#-h]`Al4%]%li'p3eR0s3lu*U^=>?TW[,$6P*iV'Dmf%4Jt21%q0n\O.:LcqSA<C%k\+bFLT3^rV471N@41(H$Ff5poZWf9"Qp=S3jU@q'2s#Mnc+#)lgH@m4rl5O+7)WI-=aVfN)?"^\=l[%M75k$I[a;VmeQ_36.PWYiD/!t9.Np(mXm[s@U'c,o*L'+39%shHK3#3m=sb<1^rj*kOAGZEM7([io/<=QgQ^8X[CQNa#M63gtoqg%@<hdte!D,Jr\Q55Dg^UfD=8FoHGr?`s.8$d(N:4OXh<D5oP30S0=qGMaEl]NFgc(f-&D3<m:0W24n@@4n8R1VT&DsS&_uc]hE!B3%WjnM`4?WXCKj]@Zh;c,DQ*9GtZ/%T,*kh0_OWND.q>TC08je(PR(SLIXKF1`5-m<@FA<I@mbI,Qm7&QDN,YhA:V7dS#OU!2/l9OR%du5nHj.h*mWRX&1R.[TP276meA`saWchPkaR9Zf4Ek7cZr599Se%V7rg8DQR%VVE)O;%BQjODlm]qa"fF01lB!4Fd;.W#B;3d53,%qYL'^+N/,Ub@Zh.[:64N;M3X]]mE@'O,oE^D6n)j3iMr(jel)lY(tiIYp72%qojhD2,dW#HiQ4im5(O-06?>bYK`luRU#aSq6bj[%>>')*d2k(/Pbh*uA^aRB[XI;e,'pAk7d@D=Y4aU<:9CJHX]]O<bC3<=F![Ms^Ql/\#F2S,?.E7b*I=*e-+W=KPl#O@>p"'Sm^-$h%U+e6]55BXm1@k*jag0!6IY?L9pR7RG&TGE6'n3L#>S!Z:gYB6Ghgs_YNNT>j,C9@'d;<TFQ/5h-+r\bIUY<ld"3L9"+'TlcBIrc+%bbI/IiD#,'r-%W(\4<Y+2r:-*Mr%59"e6D8G^Oi8Id^+Y%oZr9MJg(..-Hs_SK>j+)Spi3X^0V)Tb,1HJNCNZfIWS1:TiS<gQ#!d%jdBi'VH>H`=_+4>#I@pP@qilXVYrqE)p]UdM$!#objp1M3sr31$t-9?)WSEm>u@f.O$$JXi,&8NH(tB*nYX5)[O\T.)?nbP#&n9f%OXS#Z0n;n)703,<:O\GhNWSPd"#qbTcP?[DJQWt.I@D2[=D"mh<BZ61NE-)Tf+d=^A+Gk_XgsA\[3UZ[=])n./_kmnjdT<6rEtNR%EJF1fhqFghJJ[DeX+`X^U3rLd,6qP>mm-/>:+aUIP&G`rUaGTV17P8RTbafs2n>sG!CUrK=Dk)%FoD1"L0CCUhf*97O;hqN?,+Kb%Ti""!hR\0"X8:)+)lf[9hdgl_\G43LlhX>YlIQ9)Hat\&XQnE*V0S*4IZ$[9*JCn2M<$^j5brC"rFW*;3PMZR%!p)#lM@p7]OuAA%RHs^om\)[;?,*O]`9G!TZe"f=L<0[!f5L4I[ku(2f!hehO/TDfW9[O(Dfo.S)qFQ+>M!e:*1Nk/?WT5H6,^FFlhX?DAU6MR78)<7%p%T#kY2A<UpY')a?sUOhDJn95BP+I62d'&5mqY'n?,,eH>ugQe*r"BlY2A<B**NskX6V^tiHf41Qni#S^KI;Z%P$mT[&W"chK$WI%IZ*"[rcS/dL.SO*,#T6BB6"cK)=$`45TQo]"mc!oHg*:iePahIFo<Xgoom#&G[8)+\q6cDK;n/q%b[\Yho(>E)=%&m[PrEYYrV+G%c/M/GIpKgd#PJ(rIe21OS#*XWUj@Cr>f0#a\:b6%DlE!u:!eA!hj;HdI?1sgZXqXS\$"V!J\%^4$eG!Oj0q&O9UaCF?^5_7?,+Kt%%f9HO5[D.H<W*E)*oF=QgqNIV(=Qk)lgZQ-f<=J93sp0YT<"!`If4lW4*BS)eFf:N$nq::(9d$_k2e3qrPm6i=mPoYY3OWC]J!79%DmJ$PI4hkXop]4:DZRO_HcPu.67uBlY:JaLHq`P4Fo=A!<(l,tZH`-GlaNK@Cf^3J)_3sZ?,)DPD30@GQ*K1gc)mL>f5G[plj,g6%G?qtd=L=duGbRZIL:Vi_UMCC7Y2<dM68NQ+,'EkLqq5-&Dk+T(XEFIg@73IE3jIo7rY3;?"FDpgW`q)nmIASsQ6WD8eY1^qFcpK`%K&aQ./_bi7f13K,2k)k0hcKMTf,cJIm6`FX\ST*]iO5sAG5($97n7)e`4k&$lUO]t^\7HFj!+]=s/CD:@X%FeQQOG:$P/kHY9$jB%&D`J4B@ZZ"Va'&<jbPpDs/38GHY9O`?23@dr:qH6pub4kmH78G?-h+TWU%m%h,H>YI(uSfig!m$euqkne5*!W%b1Gu-b[+kio1^G%n?5oseYA<Mr`"reoOmj\e*Z2\n\nR2e[%@+IT4Y-%A'L7\(3dBhbW-6;88`QIL>V15Hg^Wo(DR[nE&uV'=Y]'5Psj"YK&h4q.!gA%de=C-q<$_n$fU0/T,q<A0lcmJakaSL*^+pjiV80])qRk&pYtA"^Y_8FN]stdZbH.kqV@>OIQ>.^f'5N9V3R6'GCR65*k+oB77XY,%*FWmP8%uWa[]sl9m8*JDh=%lIc03SSDtigb[6=7WWs%M7=0<aWG5hF9=aJ&u2N,%s(48IIrmU-cP?5>=DT>UYFn('pro!<hFlV,p%]3i:La0.Ld[#R\"V]Mr<Yd)L(.$$toijEQOD1)0UgW+Ac*?/G>jd$=Yc\3H)XY_l8C]u6@eud_j?b1F?oX!l@;&f+`Pg;J`e)MfG%<nC\"7>U>Jr,W>o2=DShh`1-GgNEV*2Le(;c&BaRWVq[r4+6kXV8T9Sq>J@9YEs`dr:p*AeMA`5YHQfqFc.NlpV1!`EU)-tktZ/D%E#cna@7]>UrRe\P:)EhH?h*GOTu?rmandAaB=MpZq]<+1.'%F\[)DpkMgYfESghEl%L2]N:cI03]CtI1:!D`YHh#L]/":HaDJ6Ft%_6%%YAq%UMIloTY-FgefmH(0c>=ZEc:MYq)SCq*#WW03Zr58-9>Q8+khD9IlhH[5'];(/9_OT&sT%^^E_s&=DTAJ)\b3(]AcSYXj%o(_>XeK8Z<&0,tap?oCICt:&0TRVBf5MX`cX1e;t#lT)DdcmTn\r.C&,SK`1n+UP-5.al5D*S(70IG3?\atM=\[-k:EbF$#P(%i#%h4D'qoD<Iul`YKlVu,p6[=,9fG2_*LA%\+;CG`ib^"V,q>-A20]c-!Vg?%gGrT_DGo-_htq/Go`p%-ej?c.)]d-_iKIVC9l.d^)M%9d$O73I]UCQl`e&F7R2qX&XYIDD/,f?ZN_trR/gD#?PiW/s39CW[GAEQ3V#HnE/6WMdt@^hL3]Aa\,\gr$@?n/XHQdF_;^6FG;\2%I\:$iDA:8UrVT(J='N./d8.MlH/ghi4Z=2J/OO1DlD:V3HL85#EjY<'EKBG0JC1Pr2G2_J^T-RskIP[0YD<qJ\kqP\m^6p0iV=)_%6>koR5CHieCO,Y<n4R8p,b**H5!S_\k+CW/SL]'O=DEp0>fRJB-4:ak,?fjp;4oh]4W2b%mM&Xrp0?i$qU-kloMSaT]f*dsLeum%%omQ_\'lLZE+91`Up!]fkS;WHZO8a8"pRbJA5LoJGMm$"6^9QhbXIb,d(S@X9%E>*d.F;,Ph5n#'B'X9^Rba0FT)/9I.M9ge6oVlQ%jWk!gO.84QnNdE94Po"[:C,d@,PtnrQ&-\jR`haZjXLmds&8aSj_&gWDNj.'f3u!d60_d(X&'JZ&rtn^J*jBn9tkmF_OUWcq&+`>%2sHt%Ns#$&d[[slj;B%%8ELd*gPO*;Ir"*3PA^QN6bGR'G)bB!U1;emGO(KLV#L;PaQ__\%r%8!eDrqY<?LG2EWn)nYh"?<4F2pW%`!`&ne#Qjghd+nsqVh:4Wq'>B,RuIk]".Y6]?@CIFSs/3;o"BbE-.3r.r!\U)\6!`S_BPpeFmO#*;#4L%QjCU5^pClr6iU8gZLdN%lK+$=3d.MpZYqr_Hk>qrg5"qj?\;kDVbS+11DpX=B;@S;mC=UqpYIi.[Jm"f]`Gd&q7>G@UJC0O*uk,)_iB+KrE=Da[p=\jfUL>K%#4CX8pZhFoLTA?VIQZFsTUDQ;^FlfTF.Qu$DqcFZ+o)FFXrP2[Fg,prUi&'$\?aNG6=54_6e=ZpQ#c6ucdu"NHfOLILY%ms#,5C2%4Ki.R5$+uU09BN/Hs!_qc_(6.&XH:3\FX:^P%fPn4"6YImeo;VEW*igr8EJd;u8@F#RTMp&O4:#U0CbJ?8@j=J'\:h.0&8UlG[-)%>5Z&u-"gWGSTcAcKDD[*>TL)%GCEF/GBT#Sf=0S]c>dU/@o&,4gpe^,'#%W(rg!5W:,;AZ>nqQNB%)umoV[!CT(<^s=Z'#;]\\=>%btXl,1cOB!qBW!8rV&snYluZ@O8N=$J_M#Z!N/%_C@IgXl"KW7>WhoO")e6[Z&PBp0tf;T?+QNoIZI4].Me!AhiA39i/%:,l\Q[-%!).!c4@\]gVgb^+iT@J_dD$`'RkRqdM[/05:K>#O<d,]"j4L.[LeaSF\sN^=_$n5A4E2.ck&>M:9TK[@o\/-?k$WVBANW)e;;KCj%:'42fl+T.%)0MC)HqG3E.r1\]o\@TP#,OYc@;YZ111$RPH.[iLF\eoI(S<V9e2]@pEbT*,(@0"ZC$t!Hd2P$JXOYF):B110IVsOW%j3$O`jh'i.l/?h:mcUXcO!N.\&BD]oBJCL]EeD@#r:qYH.#skrF*1>";]ecZ:3rBMCos6GG0n%0p.dHVfXHh&EON")O(2hZr33HI%C$6L?7n9aufs0+'9^LctlItTGBYIsP`q.$7Khd7;bk8,/A8.l!;Vh+iG$`+i.XcrQ?"b*7f<;6[D]sJ-9O5Z_Yb`/("-%?mi]T*Z%7K.=96e>W!FPd95cSt"UlM8Se2h58r8NZJ-c.^l\F81D*hM"^7kBL6=N*>M;ocFCeR%&s$cq`5p?fX5Nps-i_(Rr1r]Q:(JlRrc%%[n_G9l*"/,%-FPLK<rg0fA4""YMnjDk-#RSrQtK8k4K,,?[pb?fXrm"eC/c2RXa4?Ek2#3hX`6K`2F-K=..O>ZpmD/rJnL9EUC`/%X5@:@f\1^r4!,u!%tA<,TniH'UtaL.`M@JLno'lHMZ2QO$19_nZd?J@:b,k!IeJ/O7.9Jk.(Yfon(,aAS$1/B2F+XJcbBCh0%-d+%[eA^uUE\f$H8#+$p,/;"42nt_JR/+C^Re^]g&T^2ctqgqB4#jc:O$n.FlC/aZa<W23ELuN:A&pUok^Je4F=X_gG`/PiR1Prq5gQV%\o<)Ep]L.c9.N+KR%H>1Ge1.7`2Z'+r:B/"m,@61l=6"O)h3+m?IsZDYf$bRWPjSQ3/ASmjj1Ld"YSZLYJ2pk-7T!2l^+>8TF6%R%85<fHqC'BU2[l&4QOVNU!84'.q$#=0V9LY(\Qd6<;pguhI.9Yf!-H6*H*H/T/RH)3%\oQ#(E\%:G@b^^k4IcI4+D'PrUJI$qa6&=%WtS*Ke$`c%9&#Kh$LYb+^--Z4\$Woj?abE^HbA@Qh*&K!j4VoRk48K>a5:3MqYDhgEY!8O._hHchk+7*#J^5mek/roeA.QS(LsR\%J%X&GBWh??#o`VaUG<QHVS6D#KCJe@=.6G8Cc2-HT5=IiP7FadHOj?/;sB?4H*P6ls0T3m4B;&M%;[i8S*+^jffZ[e5?rV\][E2H%jf>dO%3jB';o]R-9!`_kjk?,MlM78tlI#.0VFkOp]m'e'Jqj:>1Nr;6\DWtgL4e1nVs[qkT@#mXO.f-j`]."J2U*n)HK,!H_thfg%q;qJAO1%!NY,,(KY@%1k;6&-Qn%IG'FZ(p*WUKgbeu]tX/cV=5Q66.aKr&IH?B-c+jc+WEpNF=,q==7(gCMJ?QHh(!>e['-_[iq8%?N7=CqdB0uI_5GrkPP/4&)W]!/oP"/^No-GnlL$Z5/,lZk!3/NHYb*K"F5lnglBjU$^%sq8&"N]k-97t]Y+)rg:f8@>sJ/L_.RH5%M.MFaHj*Z&Im%hl>ebc!p#aj^piTg541l:]Nutp8Df!/%UAfCW";sP@"F]miq:jpLp.$L9Znd([VsMYMT[^^]IK'$e/%bXJbj7NB%]jAtBe&nVu6c2Z+)>0J5#ao24&6:^(?[[6KpW:rqYJ4H!I!4Q,POS2+l_Be)^7E#eC#eOFF4^#gGB^5R^1<k.Hb/n/_Mu6!:O]p'%1E:\J#5)Z!KWOIHG7d/%?,l%BWVYksd/#[H^iZjTpa2Q2kU9e2=JMm3=Y?fuS?.1fX8F=628CV(Se`qFmXY='Qj)K/I\j+*2[<@#%lPoL;=&"&+aZj.^&,W?g+"Ga?>b-/!YDkb?AKPTM"W3'0liSuK$SW-?fa$B=\J^4;m"782*E\A4fEYlR(LSB^Z4EI+D/KQP0De"n%`W?Q:?hRoBAJ#-@0Dj+(B4b]t-Mt#H-6dMBHgOuW3`]BsRg,aJn`8@:+-!o+pr_bi6nM2A?-D)qYNY,HMtDdsDNc&`pC@/\LPsdU%nU%H2,!0u>_WTtJ[t^'84I`a.amJhVB$l"f@_Y$ORq8G(lB=`1J_1(k0fH(Q<N3Z)$Kj\(P&3PXcOZX;W9&HJI7)-U\K!`R>b&hR%)U50J%j$.u(m9,M%#oa!4SrolQQo(4^[476r!='\UP$(ZF\pV2+fJ(HTZ8RQ78#1!Jrm[B(#a)^O5Kf?VMD&d4+r:CfK)&I=4_q-%,7`e_g5roq_WHjDlf,)l_WHi[%HUsq#a4_a.`=,ZrAbQHJ!S=X:ueX<Gj)QKC/6[7%2fWLKp5OX$X>.=jKG&\'=#'qD>^eBgYgTL%;8:L6I/9>ZJcAUc5/42d\"$d;hrs"LDeB8K"Ttem/j+N$qH@a0IFquf4k;I[4uKf>9YBZEq)d3>CrG]$`Edk0F`I#kc(S,UHQnm?%q$[PVIPrT[7gFP+jr/[ee?FoN7d"gS5$TdBksZA@<NCbM,D&1Ih/9?]eW*4gQnG#=9p\TOmIg\[/SB'qeS<]6qJuPKT(^nKlg<rV%(B"$J^8eX"XDXIZ:Mi:DrOgj;6*':gn*]e'rH9OR/On^cJ+IIM`%AGQBIR6WCq'X*b+q`KX=\&$^@[u*!2c-om'ftCF>$.7cCttp%(hXL$B>d4f6W`Ec/f6CV,=i-Crr*<cQdIElI9ge0IsrKEV3`4gIi<N\)tcedJ^^`C6l5:*(iq;*DWT^1Y?`a],ZcmjEVapTMi4's%5IS/uG\$Xj3k)D8]"`4YbL*>JmJ"LNeBOVoGFCm9s&S1KG2qN877rO"@osGcmXJ=Ua*,3Lk&tfUn&W@*p?9E234Ad*&^j;m]_^(,%!Ni3+'2Ku-j3N"[Een5o^+XXJgFpQRf;4a]?+g$Ha;e<9\_FZ_rD-r#cd!Io6n*,jR^e<#$R5<<L[Q4S\B$G>N8BPsRj!!*gap/]%?#1!HNua_h,+GdN%D+T?o$O*(RpE[Qeb]fS?f[>P]\<<HD'u4)iQh^#[Ad`pSTshql_;o"eVED7BbTBt=._u9GUK+G#qoY65LTIP%kLe25Y:#?1Y0f10KqBV&2-1J]r1<LLK_dPl$+b7irQ;P^\'@2r#IT!hE>K7QZ5#jAn]-B>/?KmcJB6g@OCF$8.6qDl!;A?j2N5<_%N1:=teqG^+&@:-b!LD6(,El*O+4DVX(=F%hK^7U*Eko(RfV6m*ECW;BYuZH9LA$1,R)7\(2%KL3[Z7u/eqZ$OpX;Qc]Xp%_fT;:]%4J?P1pR[!'T\6D@^HRctmDT;P#":=nHuQ*aQa^o'8ZjqG>dj)03aDR&KGlZK%7X&Q6cjiThF:Rrcs=lMj$P]j0g,Bmm,mDb-dM\)%q.KWqe)^h$5<P5sOt4;=IU3H7n0"YEILkdAH.b=;='K;UnKQs2rT]uQk#(7%Pl11EkT^BUTe4%*HDE>ffDX4UKI1Q*9jdfs3SIPQ%]YoP\C\55o"!kn5FDC%cs.M@"XZ*#4hRtb*TTC["+'r2UWW)P0eXB':YN;%_q!^=rk@][j5nY"0VaTMQ;oEODDdqb9?T2)@8FsQC%>(4'Vg[-loWA3j[D_/e.EB#_CnFZ\(]rQXaI!r6+Ep<M@-ViYd0)0(NW6$]%[Bq=<Y+/nE7MY/jihC&:%Z5'%D#2!$[=_KKcn,%0%fsQGI9qFd<34j?1!cDW!%o1I]?N,EjQHg(Z]VY:ZCEHkAc'V-S.g3DtqsF8.I,J@:fmWJc_q*"\mXA<ebBd=]s3&/305Hc;NVE('%#B]:^dd!+@Rm5c>GN[r2=&1DdI99ZuZ#TT_\#XFk^:jL?iT6DU/tW=2a\Q+ODd?X4]A38\h!ur>8\Lc$o[d$GTY@(E^7^TA0<+%\%s+gTa]_!5ZI\IqQ/?+3KhDqo95:E).r*Z&W8IfbL/o(<GSCNXL8B1Mf-SLgdKi#8YUgJ#g%t>2Ts"%rnr6t5?cd_N$%!cb_l_p-$%"0M%j;Q,'"OrlR]-snf\Q;@JsZhPua-`^X"hL2rD]__3dfsCErGJ:cgn7HV5m+G)oU"q@tA7q(NPJ>k<n*$Ms+$Xpr[.eS'h>_ct%F]Ub*j8/WIjhpMQHS8a@rVlKV=Z-$8bP9C7rE8r@p""nJ]\Il2qUG)U_[gZo5/7-bbM*PG`jC3acVO2>T!@[rO5E17VE[Ue[8?0X%k.TEgAq?'\Bkq?Af#<ZH['n-s[m#2op[,'nDniu6\bF;AQ`n0:r:"QhBpJ@<2=C(VDdS"kF4s,CGMg.1Z]'6+rjqdr+1q:II#5u&%IJN!dqlaT0Xd7eTctIasjbMH7]3g#9q0ofbpBF2g9EPOR.dmJ\Si+o\+&Yj-s,qS/JL4uoP@FB$,KMai5HV%0KLD&Fh0CsKaa#(L%>3e;lROII4%t7nArNrsHFW0>27Xuru[#^@'-Q:,S!W#*&.M4B"JW2LoW:`DEK5lJ\)!)E^BFq"&L/%hh]j9K"MV\kK12,t>+GSt(%h[la7^a<o%5b$dVHYOUS*G?I,L,NW>M0:(44)ib1JDq\bQS:tY1r!E!%+Lp2rj&H",,;E>l!tSJR&H.DBj6c++f)?4<#?kq"$h%f%l,2VY_a*>M)PG?O*7Q,+S/]6q!X@A]esDf58CR23ij1<AEjQs+AQ4XdGF!8C"57TccX8)C3R]a*12(AHD4jT3U-lkl[!g*D_/:l>%jjh-aKr*0m-7(3;.nl$_$;d7UUIQuaaoa]s[+\'+8KaHfF;U?nb18WAOXA=oG+*S3dGEp21Q(lXif(":!>>R;)A)$bd*^M<!##c3%K5mE&=@-?^6GuTE3siA&Iqb(!d`JEroMr9#Zp_oN`c%.<^F>Pk=<4Yi$hSQr%VU`cO;dm\2o4)/bB$^;+#*d&>L5co7#]C%U[pE.%3!%J*%=LK<=qaVoG))0Ncl1P4GSWVNjrRO\cfgFCQBjIg(/"2=P%fu@eX=#h663WoUJO!d(MNYK&Pg=GP]2:%c4O@pN;AT_/IY?J%cqZ)XXH\##oFl($++r!p1lSf`&$3rDJCFT0Dqu%HR=GGi7iSR\'Y$0500'8(4RX2]c)$YT!*M72>>'frgLluo^dLE^bZ?BB\g2B\%.2(KOcV<FB"[\TI-2J,qUW'aMCVeDj'-0UL$mC9HN+3.<SQA+H8B6^XBHW[O3oHqINPeB2d'+Bi9@oVuRu'q;X%im-,%>5Fc7S)!%-TP&hK[)K+3+P\2UYA%HOp8kYl9];$SLh!$'5iL(TF4.BCquIe"]@0tF@999>)-l,BHK<TEH<*q\4TldLcj$/]2:^$=0>fb+f>1o%a)<X$Bp85m1DQ$Y\g,pubWdMHK<W$dLqEeo,/tE`3',('A=ppqTamd9\gJ2e$cZ_l!@?6hXu.4`&O6^4pR8P+q+*=h'<V<WLd]X]%[@f5s4Mbu8_DEA0*b@Z\+sO:.LKC125b^;BG"pAE/8(^Wfm.BZLjGq91(c!3(SLlH;1fYS]rZa+e/BS8,M,2tha('>j*L&P@6:Er%##2!mJb2>YFr3lH]IO#D9gDYRX*&GWFX$G[KLde7@g#fiRG_&HQ5>SG@k(%/n^t6`$,)FXT9(t<hWd@.MaQ7a4;J26&!ukXlD`km%O-d;XLce/T),"K*l^dU7Y2qGAq$_KZF&P35F63,'bm3uia_(4T@g+Yg$"i)<s$S?[GSgKlTZmc[kWI[=rZMh=8PI;0W$ZF;mP?#/%`9!U[2P^#*Nfc#Bh)IOoFCX2eJ<ia,NeSDX,2C3'0EtW<hs0K*:4h[#H7>'\WRa]:AHPsKLiQ^=>Fp'EK-^^DPtHEsE@(-B@E>fH%VR4o'9/(HR#fh%6[[k2T9/,am*Ec02Y`=TS-Y2CJ]EY?DdUF_`R]]]LV:"\L,<U9eM=,]2M'ksbMDGI[C&j*dkX*oXdq4,d?kH1'%f7LPm+UG9)V,mnGZ14@gmc[\i6VnY#RT;[9cpWYY]b+$YES2;+((coEB30RA>XR?%^:!B&_AK+4a9s\oXuoN.qM`Hs2,tBjg0s:L%*Z!Z@EJMJtg%M:$JCQOh\M>lupF7)-VFJ!.*4j8'obhFN9!,g^T])1pJCPu'HE4Jh39Y<OLJt7g)U?+cCYq0#D((KFWN<e[)$i8g%`ITtdC1<h*qP>IHNHU[+:?gHY/UcN.&Xc\<0`\!Y?"O:P_@)eGh'?&F.YFrDH7GYsXm[IpMIpKgL^^i#e,[m>G`-D[p&r[eUt1>*%['S8P=nQ'1r`*n6QJ&fu_q1_N]P#nl6YF\?WrZuTQup`NkP:sW?s>3"0mgi>!n_2A$*7=VX%(Rrs)<&UkgG8M,*#f#rqK<`G,S5!%<2apfe4:KKoYaL+WbHeNk]QbAldbt<YI9/]8`pkS,UnX^:t)/%%G6ab2B$c@(T!9aCZ>$NWAp]:LK*i+9)e.UAGi'sP-^(+a[.2%%K$m$t,sLq]7$SC-ci@skJ<8YNlh_UF4+VPG\LF>[:htc6'Ts_2Do88Wp5hT^;TP7TUk/'WkPo*#3K&.LiZN"'g6BthR##":1,aYM%,1pSc$!`uU_TW_6T%>,s4J[pkPjs9K7hRDo\pOBO&B4kVCm.CFG0kCZ\20Mf*$dpP=EnW><XYi1,l/FF]8+WmJT^S[3ClXJaQ&:l%KMFuLaKqI3<"J6S+e:`kP9"a#PDH3^+e@tqPAm8db-pQ1FTZL>$.5Q4%H*<n2O\gk(T3Jd(j!9d0(P*!*n&.t3]SRY[$klO*-]m2%2[JLb\k%&o6b`nf@?W6HC'$L:)mHFk/AOoBl!W%^5GW0U^RXZr7+V7``ACCDN`._Ud`"SbGXrXkdmZJ,A+.\k=WD&ZrEGK)RJ_D&%#_nPQa``c/A'6abrhIREi)U5!#17Ai5biH<XDY\,<3:f;WI7HX@&KF'&#nP3<BR(7h:fo>`^Zg(:QWP@\4&nE`?K9#8KY&\JQTD'%it+,EKT4!B^r>Q5c3*]X80/;`iur\1,`hPZa0q'(ll79[?+#k-<uj<TD!2@8"1MIL5X[<hiY#BOmf_4dkB@OLrLJ;B%a_VD;_PVY%UcP<7LK*i+8iEXoU?oq+)#l0;a&QZ;_>j1ceGU1#E?*bW3*AP"U*<_?LXA"/C'-F@SrMm'^kF5;d0[7VI`CeCML%fj%k6dQ'QkDa%o)CA#3X\lD<%KMXOAM!K3\]2C8SA2cUm@#&S\W39W(#3Z:Of'*&pd)8%nYt.;gJF;kr^FlK^<b8+QNeY!VLT*:(;"DmoY4$:8/RG%2X^bYS'Q!u8k:tjQ]r]e9Kt,m+XoQ"V2(jg^IutaS+ba6"o\1:UIb!-Ce62klJ`p2=JeMRLVO,%*&d6g*WQLhDW%')(YsR364ZZO%+UL;&'&&Zk4X?^9#t8a\?m'hAfk#uApn%o%eUlI?.aFQD`gsoFp&#.o5D[]^(=6jnWSG;]o\M^+T83(1OFFY%-Z]4,^@C7`g[oQL%3$DQR#9K%,D[&4@3p\"MD8:mjZdH8r\1fqN$(4*jalss/4X?s*>&p&9_ufT@VECZOj.k'p!f&>0_S@=2;S;3fi7-j'E2s.q1R.FK%A%l^7$*9ULi^Zdlp1,(E4,Tcl6I2UR6\9VT:_*kIbM&bKq9aW^AH%Wge9S,iJL"sZTkTZfbB]%OS!5g]6`SgQh?dGWPT!9FNBL2M%+-P&>;L1l+%nZ$#fD!B#KgNM6-4*,(Gdo<488&)bUm@#&S\W39W1sGnI<-\TP0cQ/H:U@58a(ZR+[6ID<#.g6.&>N!;bHF%=8T%K%>:lKh==m.p7e9A_h0b>Ed-Q2,llfLB@a?TrLD9ECU)m4^(.A[#(_/F#F3F<t&L5JQ;]DN3Tb&U:bVi%,"$!*FNTQeIKh86jIab"E%l6.T>,c-9loT5=:Mb3.epjR^l[^o?]EN[T\W2*<PAbgnQBW20).rnk#YW4">\QCWPRju=`,=<@tE4t_Nm^8Bl,o(C""Ulg,b`oN_%]G"C+mjpWR;1A*.pOc\521ugF-.#mp%;[X'0!Zs")<5/s:>iAP+0BJK^cQ_'B_GV[m@i%FCEH$#l3,\_>=0i(a<A.g:_g2lPVRl-%7sjV-f$0[OR>ca`ag?&^!k*%l,6r%(mGmX>f$2r:To<_-)+e5<JPar4[>A+9Foq!\X`9LE(mI[2%9*A_,8%,@@icMe'3I23%2Jga%Gid[I<P[0^d0rPQ+1XMi^q0=`9;`m*]Mo,\UEU%LLQNNUJ1]PD3W&#0mS4S"DVU"8N2)-FWjOW26;bp0.hq>.&RM/i'q*^s(kZ]+%\!fRGkpN?LNTQeI@Inbi9hYFsVu-9M.>Qn$A"Ur^r(VsZjrpoghTq%s;VNR7]ZYQ!s/*Hk3,/<__/P=c&j8RlHS-chZ2t]&/Hkn5%V"Sa9)$I\DV+2^",XA)u1_:KkU=,/aK5>":ZU_E6msQ/V)O`=WP]&C&@??)gm=D8dQ)BbqS5D=NZ8=X#TWXZt6a=do;rCdlXUa/H%']tVM`.@pSnA8hAB^-'m)TAbqZe4/JA&(Y$EhPM^pFY<BKq@.X`3mT(Hf5RmAOCgr6:CT`D"$i^bMf`GI5Wuss-.9T@FA@@L[IV^%CZt:umkp^A-M-L98T?AO+`+1c,F0H%"UUmU\f4h^TDLbtQI,7u91.b%S.;1?_rp[]3M#t+-!iG)5&"`pQ?aZds5!.C;oZUX8H45g%!e0XL4JtLdnO$?Sr\%2CL#V_GC2)CUBHqQ<&sV5hm7[US0MCtpKrWn]J[Wk4@;]JgphqdmT_')RUmZrITha)&AJ<cBjXaU[#o5)*%I0A"$RouTUn5ea$I1F"K",gfgeK`I5(IheMO>(j)7eBSIk=-ddDeu/ub.91i[?CGYlcIpl]gENNZaF`D+PObZG'NF0C>XOSN1MbQ%GmpMB"oqRV,^"-O(!K$JQ)(_n7P?BbY-bPZ7tD9L@$bq(KJa.L'khZf$&#;0g8_ofFb)HjTL[,H"r7J!3qT/Yf'I@sT%,_.(bOG<%[+nnKEFTPu>M(6pbtaKB1+ugF@QI?UV]P2Q$Wq#KeH?@0%rE2(9<BN*/2ik=%$P?ibJ%t__tF8f*2YoT+fHC4AnsHh>[)9N:L=?G%>.K>2)?EO/M)O/J&6]X+HZUYfQ!,S.YY=Ca'9e3EK(5='/RZ+/>A\&%N=[Ut_X<E<7S?TbKop^Br33oNNW/4$5(lo]Tfo$*I'i&m%,W&W2*?dtkrMa2l>q7>D?.PKOUZN,aC'<CKHCMU8eG3B.=Q@P%5bt_c$,eb0"0ENXXX4T*<b%4NNOjB_E7fPU4(Ic5:9g^f&XU<S%l@'52eO*qkG%R"q\M^ofap#tfq8^%7r`trB+hOb@Y:cgVMD5N]/39/3`EjB5*hoBfLsW(Sa@Ffl&4&fuFL7iNZ7%X_Oo4;]C75AW%)_5Zbk_XQ(KM'brU4Z=]l,48@cEW+\GRuP8RnGITH:GH&FeE4fo"Vh-5W`B@4p-3[WXY%Gd>`[.GH&uSAs,;?,)M)OSmcj"A"\O#%_S?/Z:`Eq-;>t`;AS?JV0@<h9r^;sI(D%l%@3<lC>T10niWs8/":EkWb,e6gPQQ(/MQRY)PNfWErqsQFd6!K77&RGOc*KTF!C]M*%[f:Sq`k=X<:i:QJ;_Pbi,1MGu!%#!'8LMc[XlSD,C?9EI,*meG4\/0-$=ml&,5hM0W+p)Cn,o%J0>!A1-!tPA#UeR[fk?8[jdn@9%]29*t:`,0UPBetcR&u>mm:a[B]70jXH5:e:A"a.7NPs3qer)"GnFA05Q?PO,rrbs)r"W1=q)sk%H!CY@&th<[``E54d7?P,+E:CQ%QrXAqcZGmB?u)hk"sjq`73\n!2BIHnQ87uk7^4@EIqS$.\.f:*n*'1W0/6;OWtJ56^*]7m.N_UJJMZ+qC)erYJIl;p]eB=dI1e:<%JHh3^+@9L>.uI8*XDF[?(3D04>T9F[#K.af!5ZEjE#A"K<4%bcHhD(:at)=dr9qe#6to^EIeZ/2qt9NL0D*s0"1IR[E9.28XNQ+T%h^`W2^cE.dbCK9N(T=@Ic=J+kBXrNP4Wu!YEMYXG&>b%IE>$1'-E`KW%3c#JgdlmeBLf98&m.c9E)s?2clmH:"_([FEVVROgfM[s%X'%l,q(#sBWAgK."Mjuqj#4-!>&!1D0(;r8Hbh:D'!/r^`]lb9%Zh/CmGRn0-tD90n3rWs+_.g2$@%Ou]SIJi`THK\!\o6A7nr6Y%a]Z@LZr8f$C`0YA+m@JZ@p.Xq?A),\%,B8Ti*#+dmju_C7OgH5`\=KEk&#-0neK8j4C-YEUAnfKW)R$IL=XC'#Rf#qM9k^Wo>/T;%k2<$aETq]Tf1dTC0%"Dh,7rI_bW%fChgHl`1F%'_$5>O9Piu+$KU;]E<-o!+8/bdop*iO:JqFr^XI&Hbdlu@_?*F6hZ%9('lBt<Z%+32bdUM9?[NNT\MTB2')5COjVki8#]ZpZ6f1TuU[[%C[QR/`N,0<]8"^3-4;eUp(MIX*SrWqiX;Y<TbTI<#'`IR/n%s6ZG*].\mp%C;#6<,di%AB%G_^)`AtbSQf`]Pb*Qa&)Z5MhL#.j/+)7j]ANVcppr>\&Mi5qEBa24lf"tH[(EC2e#fZ(S:,Blq4'Pn=>g%sI&D[8%;up#[.'m^s&O4XCAI@0_ZF']aA-Hi^dQYACXR+0LgX*X^E^beRA26S=-Wc>TaZI5<+K^$>U%:gJ57jZV(.e-m0u/^d,je])#0:?"%[NkY*.*i@eH5[r3`*!:^$H8"ckiNL54CUj_hLM)7j@bmFJ]Ndt7%>h>b"P2l#;bLuVM*`"#0daE$_S%<aEV!hP[Oauko"mb\h5oL%&8h1S9rRM!AV5f(6d+d'?7J-0o^"A4-UZ["i,CoJ2Na_r@4kd)46Rk97PitA?",S5=Wr#3Cs'=5f.+rFD;pl":.n&60_9J`TCS-L%%NM8JAsK0uS=.T"B*jSYs5;0hH!HHJg^'IsWB;H_15O:NGum6jTcII)d\[!HA'4e)rc8.mVBT?#I`sGZT>n/d.7/T="!BcK.OCnF%bg8Tm6?O<;57h;POUCpij?Y8/Q]lAi@*t/t5nS=;(`<E8IpG<oOcfF"^i)4u<\\e%qhf>G%dIZg_46f]R1;sJ4VAT0'RY&-TV@tZ%aXjBH,kLr%18,g3dY,b5X@u)X:YO$mV.\p".8&h&QL?SE-'<Zu.RJT"ERTSj_"Z:,)Thm[)294G(fqF_l38m9bTNMp,rIjT8U(=B%j"E2RRVnLu(rCl<aM[;J=595+408bh_(Se?D2IM<Gj@/d5CH,5U9T2U1l6A"![:)_(=k?t>[giq;h6r[:]Mb=clO'61H[0p<J9N@%ZQhH&*""C99dGAF!W<<-$:mi89blZ!M6o-ZBV;68AhLim/C#3lBkjXuDF"lhP^0T7W=<OSY[5CXY#tNI;::'H+@8U#/m'bd6!=ge%\u\<3Md)ucJjtP/5hd-O_&Itl.;j#/>gU"9`8a,`AcBV:=_<Cr<G"OT"*^oaoVF;J7H];/oY=Mq5(a[*@;\:b`<=QRjS0"42l-dh%`j6.F&'p'NTI<MT/sIqVB9cD9n3hthN9WbG"OpcQ.8Y=,$gFOTW-FR'OGn/0n3SE4eDG^X-t9RC[d$c?jgcMeP@m3p'td@)H;'4B%.g_;l3F^]I04/^^ZQ5>NMBkj8V\@6K!>i$9cl0tA/7!MHo,t>W;_1XAoHi:H(9RDEPka5f?1<IaEs^-hpWs6#'9LQb$QaSjcH)9j%O/sW&#n0Ft3FW.5h9(+Zr$4ifi(+][a>mCigYju&CuDe#"Fh)j0d[K/QrmTY#@T(e%9BrCgh;3L!@#,e)PVd.*1!HCPZha[MN137%GREL<KlMs':?R;c729ZBWHAr`cYt$283*A]/CSAuRNuI(#XrHW9bCE2b!is>9T\2_,D(aU3tV1WSWHJ?aB:fWf%Q@C3\#F+k\k$_%,R6]0bd<a&55M:UB/L"XAmcRu1np*@c-0p,5shgt&sXT%ad8nXnS)\OQ=lX\O.YbaaH.-s+rFNhffdh+K(ga9MC<H5(6ehB?Z0go%_@(iA/+3V3<,#Ib49;Y'O"3IehA?0\5aX8.G@9OLE+]6()f?P?(*4[A*SpH,:=?;h_!6"j3#5q+)`e04Y!h'c4N,r)ihR)3aJk#I%bd2XN3$9ofMKq`nSNu%d!S.(A:%:KpIrp[T8"3?p\6t<fOQbm8#?Jt[eP+)j?P[XMb^re&LM$K7D40l5OP54k%T7]hB0@*<4K*90%ghHgP@gkq)HR$=rXj@L^:Bpqe6](OHoZ"BfW)-1nW`]GuR,b!-1kEO^%Yn_KGUbd\.p9Xm%%77]7f(cfn2O+B%/DP5X0EFNguo4%%)SHDglm2UCp9i)I^4+l7rb[VEj'QP/Rrdf99(qks0CN99c"1:PUZp[j^'9PfA+*6\OU\Tb)!C)4Yd%cjjG]"arD22#<nI.BqJ:Kc%Nl:2F!5UBXk0&RQ1HtAf6c?r"eJ@266E2'IMg22q;$%>"!QT^L_gr]3?6"hYA89p#DDcur2'<c)[fHWp"DK<jlHoSG-!2Nb$c0@S%&Pa@j<=P\JLmuN>1kCYNebqElAKEp=bP69YE+80#nrnKNrrsa=Uh)\QU%'985G[6C:;^^0\]Rc9M3W?9&LV!4O*.Dr0;IL`%u:Vf%86QK\=Ha,rJLrLE\D.?-UrA&::VfNLjMD"j$J(<i>^-EeET%Y:`J)p'LGQ#eBRn6)G.L`FDkc4WA=EIHbe*8(%6l,sInp^6+6-to%_MoFH<42[sT\rs=aU54":Y]=^-%FeR7V(lYb8KFE[c7mTUG`59Tfm6j<p`3?IHrsCiqU-s[g&diMP`b6L'9^l2gRi-.DBSV>(NX:%E-CnuNAX\Km9f1(jk>[JaI[-C4#XRQ!N['.@Ae^gG.9]>@-E^+gR-s5!B"[&jB*'C+'.4*@.f[dct_sc%dP,R%c#^Yi<4qn%@9rd%[Vr\][?HN,Ks9ri`,S%:k+gq2#`)n`%G4\`7`$)R`#_Xj`gsnRl[R7HNqhR>.^jgqL9/+-qk<o`U&4]De9r>A++sqp:Qks'o@P#f%s(.8f!jOuWB@E_#JSqRpKqV^&.,G:7;aq-c;RD!j,J?7^$2(\=qjK<'2nWpV^];.f,D?>@O.URtMc?JAE/sT&%?O7pVe[a]2R8n7%RJ<6bD?M/Ec.DK0UY^c(g&D-HAs=78EUFOacm8@IbM\HS[nUs()ZalGkSIfcM*Ybr!tX!/AL)GMkTTi\eA/0jciqA53+(J?\TJ^i%d<L,GC/M=L?Z@ZB-j<HE_ar'?<qqakT!e>D>fD$mEl..dV8"N(*@6aSL:ZQ,i%fHubDqrcab#en^9MTY7T:m#CD4iuZ"#8'Y&(6E%#d-b?fbqcF/&Cl$e<62"bPlC89N6iHE>F#2`#%SBN<qp-SFa\4MAp.m9T3DdF[.u>7*Yplk9LVHJ=ZD+9:8_[.Q1JJb7<eTMdXlH%1tlE%)6Qp-U@N9.Ee+FOn,SDPOf$d+fkDG4o8#6_;3T2ii0Gr9('*=mDad$Yi:fa"5^!U[C+O#M(Cu#EQ0-/DZSXhuC^nM>$j%g4%in]<d=iZ9cFIe"CH@9G@@G2sXI_Q:X,2hDIOaISr2d<A/$q9[T"%7bC#0,Q)3le"P,Z*7Ijjp.LC'g3.,`0=fX'afCS=tV5d:r(.%+Zp/>K"Xi([[0E!&UC34p63m+=f^2P7bGYAD[=3LZ:iutOs>`Z/&Eae_%@8SPsAU[f6ZAE5t!@7<X,.f!j^=^G3n`=%(u-2ni4#$%V*t+FU7=:bUM6o0dQ$A3pn86in.5AUXqZ5Q3geLh1&qn'`XWE5p#T!%^U[`$`%g7K^g@)/i6k3/O\mB\bKs[M%0!bBSQVD1B"0!F%ke`0i`6rP.e>KX3S`.U__e<j<j)72Y+0eF[6aWVV_,h6#7VB5D^s*[`,%r.0[YRD0KM(ShlT@;;-/8[WF4glV+TR(AoCa9Gp,Jp_%L+q-lOh1[WU)kJ&O\8Eh!!TkIkr5$G$$QJ$l\V@K!Q6_R>ZrrT[_Kk:EBhm2eO"&<f;i7V8->2]QH'_W7;"4o11HVNN=D*V;*`Wc%[fSDU'JB9GR)6\sQtPQ^+@X=j1*g'$K?G5i,/T6n_BD.[2]P-NJt%WOAXdire*\B"Jq<QQPV(/$Og%UT(_O;e)/$n(OcHld&C64W%@ZmfI9Reoj4RS'7g<2Vc.cdb5ZahpTL:&\n^8nioFeq1&r\j5CkC=]U$)nSfkB&+O_aM2nZ0@__JDs,&`2OPbaA%VaP`.T/]a/G0%h\X$kG\R:HarHWFLi?Ji;iaa@Ys0$_Nr@_s(3@3f8%eibOTtmt[mo$+('@QGHDSk/C9\Xq3%H2.!"9`B[0E@n/eCE<"%'r?Zt'F-%9lB1um504KUU7*f%ah?Zng5+`%E-7/N.C+%LQK5DY<!doeSs5!97"+knPn\oVmF96TFZ'kM"2F]XDAu$5k<"YCOdP`%'pU3,Q[_m%&S5E3IKVLQ.kf<,`FYJdYUe*+F<@%B*XH0:!4mj(822=:'k)j>,=X6m6kokJ*$"'sJDilS1J(Q[DM]_cqu@ZlHMAd*Ot'QJl/M2*%)3fjKO'+_Vps:Bc'Cg9j\58,Y#asY]D@W6m*!7$TS:hcHb`D6K?"_ku^=*?O$<U<d-qYjWl<P,+W!n"X+pF7ln9dVr$-j*?_LY)O%::Z?,%;b7FR4d:KO+R8uF<<\bNktYlG@\p'g3;_g7kZ%k'EQ/=)F,&U!<BD@BgF<;ZpMV0TT)hh>*b8t%$;M+Ns92c6t\s.9r'H&%g0O.b@8l0*4nHCb60g3qE!XJ#`N^EQ",,)'agAi*Ur;NjOI+b"_G+dk+a6dT>[YUVGiKSHU-N<D<fGM&M9L^BNUM[S6+U>,<I.!9%.K("WcNo,n@?M(]A(4>F3.OrJ'>LYK-)Cb6`@4,*`b-/t`M=Bu1R;td3>demL[%*\[TjumLi4$QM9ZA\*I+ah;BK::'k4[4jq&t1%49E/0BB'__f*\\_;SjqUW)3#Z]IJab"<SJr>OC0g_;paM&Y^3h:C[G[0BX2)JW!Te!H=qrNM'2WM,iVI1SUSN!!DWua8[H7'+'o-%2''^;R^-k`h_W=ZC"&_3'h9!::2Lh2qad."K9.X!BSXDq!on(C5NKU>,^T5+8O,[hJfH=R[Cq&:]m2MHs*t].?#`[M#Qi%X'?R,C%%&+g;nT,1(I@,B>%J>]&W]qXPdg(>OYci/<>O:2$(BQ?YdN%'JPY4o'FWYL=F^]5:U-mLtM!Tq"2!,.$gu<l9?Y])$i)YK]jZAcW%s1rh^'o*/d`/`8NBIud(`&Ak_HXUNJPDLDBG"tTgR/!j)'[$Q5_$C;YAa)1)I*sMFhD?Zg5Rt&<S'8*O5(3Kg9>l&Pr,Zcr)iojN%_OXg808U^k'C>q9m$q+2QuAo?^k[Z[d=FjX7$9VSa`B^dJS]Ms3`kX_"@D/YTZLg^]s1Mi$4o5uin*[j7.sY#%qZVnirD&p/+dL.%j.9A=L&jWD(nOC_pb)EbHOa`+eKI,p#gb#H5JVEj"p>gm5d0`S&S+kK;07N@nfA<Wi*G(=mU+#+cu$kEN`f"o,'[lj2I<Ue&aP"_%d<\cFAE&-J;Y)+I2N4o[=g!b30a_M+Zcj@T+Wgt.<!Z&`b41XcKTZ_)NYRI.&d(l\UZ]nmGj^3WA!6%]Q3@FrjNY\VQ$>m:.N(!'%c>-VN#oXuld?KB-E.Ju)aJf=3,SMX`.&[4+e[HoA&06_/iTZ?1/DY>ZE3QIY@SfA;>]14(#E0Fg`Bm-ir+FXTmVr8ls%k0V1FX&0%DWCcuMs)GL7>C7FQg@"35#K)39X1l'*^tn,k)e!7EUel1n:Po7g[,U*9JU3N*#FMel&mI83cJnAJD"\bn-"CHo!enj>fUWiZi;n)%eSF@r]nWLGf_&iK>!,@a#-t_gq2.(=crG&5:lH=/aYD,4Oh+*Y?P/#"s8*<5aGDILd_cbZ!Z,RB$6P;P<O<gOl\<lETJm6q.ho0,%ia*J[N0rEp1ct3"MJck<;F)'U,<-06F#%5FG4H@VBqtaf,qoJ*6O-(sp3aI9`MU14Zm%gON5\\pVji^c6D)g(F@1IS?>S*cU&*6Q%lKKpGDAmd!^?\8TER>!.nbU%t%!oD'3@VW#Lje9>$l%fM?%"KiSjc`-3N^]p([&P^[cd<6;VF=+[=b_)@=Ue,h^?KeLcbLp'?R:d%355Q90H3i&%QLdGg,Ok(%Ulmme(j(`7o$XtcJ3R>F56_(W@Jck=2qn$g#?tW&Dj&%A-+A<AA]N=ab$JS3)ksF3EkK3E;Ye!BVZr!%.uSfW>8Rh@47FPN_u^B7i$/pF!Xljr[PCe6e/oj%&uu%@m'4*R&j.(.#qE;0XQh&6*OrZ!N/=;7>]G$$CQt3m6;jo#+:\\13>L`E%A.ntP!u_`'']ElY15.(%HhU;W7@R+-aoZ54Z^O5(b+O\eS0=-7pH@D"jF%HrJ$m&eXERLKVUM)0Z'emZJU<mh-ue5W;MmR252bE)%a*F^8cp*gA9+#='W5%)Z!V)f[*PEVi!Sill/V[F$$HT2]S7!:mELLAtTi#EE"d8\T9!0Fr+Zq5U+X7.35`2W%&9EIR0igPC<Y;Td%,u:,m9L^9BGg>:L<,f:%&I/%g,u^%#]W_ARPFe('c3b0uZaeO;#7uc*?>ei*l?ch6>hRUdYN;:>)'GM#:2o6U`!%2@mhlB?S&@]@%UjG[$i[ih\iP6Kl<8/8sC41)D2j/\+oH`qTm?'NSo)iDedFd*(bTM^Z!\MijG0G;FLqtd]Nli[Z3qai!7q<bIXcZ!Yfni`4;H%2j%71WfUZ&l*+r=H"p]&-"`9A:ESe;h5']!k&hU)"7n:Tt@c$bDHnN!qQYN&/dji`NRj4<lWp>63eo/g-eI6/a(bZ;7E:=e$t\ob)s-%UFF3nbhpc,Co9_e-<)F)ORoR*i@@ek)S'YuPXVQ2CaLh/D.j_G+[:J]l&_:CPM+tad8IkQ@?Z48A4Zs?^bjlRl57!hfJho&":[**%1<:[&%"kX7PAi]oDMVp@q39fFb,/!ckS:B3@eH#Lr/Hk*9]Hm-0jSed9P0_M2["q^638Ht;im;KZ4eC<Q]p>A@Q)&E,0:QUc<*&3%?H[&XN8bSGC0)/a\:K+`'d2m5..9!'BRg/%%R?>fI[GnBEH?1cdbC1O*^0kDI-3TpFbGVt=5lA6Lr1\16b`rt*k3+8q7]:Gs"e,T%c$dOA$$h,<9"I9Y)\TXb@SXiL@RS*8(fFWq0dQmm^q(mIB:t`aO"l2?.NtnpS@IcW1+W,2W_1?A=<E^bS`'nehL2UJ&dRHnq[Dcl%5`X<:"/Kq/G1bs@jSF5KH,ip)nOuAp]E#B*;W-g)(s3a2CQA-@CB>Ze9X/V&Cg!-eOsCNUTe)NVMmXoeSm*SX!!P;H8V`Ila2(R^%__J'b@usG*W0LcZdAeJR$#kS!-mi7a1-U7X9&S)+D\<mhGc@>b$Atc55R4$HBYUWlKif;Db5d>5f0ZKq0*Pu>p0N7jhBN=5^0'Fr%8:dN<-q'bZa?[REjV&_U/gME>joFp*2[Kd<3ldo3M(k<3Bu_&[-q"cC!$-;YW$VhY$['qLA-TT_&&2TdKiO>XDl-g6liHZ='V37_%nf=W<#KWqq-pUq'Da<G:;\n=7Kg<>?/Gh+DHQBP`D=G\LCXAq,a/nsq+j-*86VCXu<m\_#<6m"I!MUsD1:U+MIbg"]G\p>0fPb2^%LN`cs^1Zk&_=aW,%jsloBjqGHB);?7.E^G_'NJhGV/+8'HH>?C*WP&[l&^T/&M$\1Z"RgG\41Js)L)Rb>Utr4@_49!$#Wrj]e7SC%DlY;5$P83T.,g0'k'LB^MNA#sd'J<,W<rA*,hU"n'T,Y*+p:l'?o:Mq5n"sF@BR#<\hVfs)0F/hJ101u_Dt4?LnQB)a-2m]8.L`-%Q5p'9!@UI_Fpj(qkFah5[lQLr%2Ie:RmAfm"qQ9390_$`[I?'sj^q*o]cS(q<,XN:\j.od#\'cfYdc&!AQ*=3(s%'>eN[irUS[;:%CF(G)9dkH7iG]HT!aMmbU_;R8DDe,,]?!u\W4Ib%BVU?C1>WB`rQq1DYlNua,\;"+oHCFnd=s_t(U2fX(I\B=OKLLLQB3rd]k^?9%L,J*SCto?p([lh6UA)C8q[m!mTA-+OJW4pbRs+o]:VJIJ0(io1lOcc5cA6m=M%bkR^8?bpd>IP,eo%<hC!j.FdYh1fKDprJ&FdJ&%'X!"6"OrSAG6gV807HY:FIS.!AdHcjQ0c#Bbn,V_g)fO9"q4KK:^1L`I7:%Pe#5MnXVhYk[+)s0!==Fdg*SW\Bu.r&ct*;_VS1T5%<m,7e;scm&%ZYt[VZt'VkUX]o0oZ=SOJqPC!T`/?@_``?Z%7gS7`ETuBbb)48)RSdIPGKBh>tS5c8"khjtO[jNcr81R3On-L<5^O%0X,HlYp!`(J8p:uhga6/0_K:tHhkM&(UrhIq!mq2]9cl@5.pXRg8%!&73?Qh,+99K'oUl?oT1S18o_-%Me3oI64RWEoa&nX43*Y_%Wqf[sT3D]6Ds[3[Hd=Cjg,oaMCO.M`2Gi/fZ5t:55MT\?g["'$4;PMQcB>i-G(fVA^^CoBBZD_mb](@@Jec7>YG7>Q_h5)%4:q:-%&)LHpVM37E<+?$?eHBn*)9[tQUO>(CfYQ@(=GH?UI.jC[YWS/4H$lp2_l1kuW6W;Zc>a@1_HO5db5sSc#7o8X9ITr*pSqbfXD2`)%p1iYb0j(lSB:1ltiJ;!F16QWfYk&jl"4%7V8pP1bEo=1HUl8#5+Ynt:?m#(YoU<t"iCa:\8q7VB-hca9\kR@&oEp$Kd[!97OlmE.%CI\XHN`GNZk;%oKl3cZV50Zi;.r]9IR"6**B*>YmmZGRH<#hm5W$)ubA?otai\L&hEbg>BYs0o^V\.Lu0W:jSKL_+SZW7k,7)t`m%=%7pULe!2h;[u9?a*I(`8nn'Edk9XZiA_EOOH<^T;terrmLt;0TU+SiZ!(NVeQW#o0WT9E*#oI3G/Ie6%fT3c=rk=f9$`X""tk?r%?nlVbCHt(/SY^HXGerX/,HY=eoU1>r,3&&Rd\!3E1jatg#]j6'XW;eY3?S^\8S_k&MQJA\`e]_\%P6XLEa9_hq,C@BOM+R+]/i=i%D<3UPI_#H=5V:-l_E2KmU3(#*F5uh'nBg?-IFq/P*jJs<QCYC>`T#nH!HjlV[W3L6q8mt;%CEaOHR:YQJkI!1R*[65-^EZ,S<gAF%bWY<XR>).j^OZci&>F5WB6"#8GbnV=Lp_1*]NL<T?X<c:X6a*s&l#NXa"^6n)hqQkLAlb[BQ/I?OQ\/Y]Nct_kgI@eS38@c*":6u%^+W<+oE8$ep:(ba^*Z<jn?6.eJ_=E<9Z*>+Uqj=OBE8a^"!',cOsuXI.23Uun1'UN+@J<U3XQV]&jVt'(]FMUG9IfNHe>@9j`:h_%1FuH/UqdYeT+Fo:Xk?l!$5>]Z9LTHW<iA[3oGBS#;^em63)Z*`E?+V(E>4"r#Y"s?b%qK\04j"#4[0Lg,+a7r6LEE'$C:s\b1dOa%CNVY1V<jQWm$`Nc5_S<tm'iA\'b'tC^5Iks1SC6KeHs<j./#;MZIs1;n4''*19'7?FNV]5P[ZN9@+k/X[h"/&Qe`G'DX<!*3u_T0%!!oal4DU\AZoNL6n>9#naiL5[6Q&DU94"3Ao$nM;jQ+0j.YVW@XYX:<a[%;BUNN9S0tO[Qbf,FC4:A5@(e.;(q9Wl*,Z3@"4N6r?%72["#K7--%S._kk,;<H4$oC-5ntdT="Us8M!Y\'M"Wn7\YhPFu%MMpc-eU6qpjn1S&n?;S(ceL<5Ue4["[C\,$*+9["m,p^9=DaB%)cWnBF3Q`E:<,-[#gOX:0[]Ag`QiGH^F8k+]-J&N9$S?B?u:TH1lY>&:$)oE]Tq7sHQr`G"nj(S-qZTC),lK(isFd(-asAD>;C9L%N)kWoi:7#LHUcV[=uEU4(FZOEjZ@J@7X@naE589j6KU:]C=Sa&]#_&eR"5:#-nmR@)OYa]lV9p6%=<lQ[1ifL?\2"8lQK]nE()S,%,f*?:@ji=K#@Yk*B5K5I[qB0Ji(1muB*iAXK8(L#St_2a/X\U(;alURic*KPFuh]fTjj?VE,mYJ1Ir-lJ?Jr=-p*a*$7DJbOf8a^%*/g:_Gf'7XOuR@YXL_S':+c'$)4i-L-;@!6-CD362a%&kFWD4]9L0;9m"TN`$Mjm[\\QE>9!Qhi,-\"4=bt&ihNU[(*Uc]hN/l-/%$'UhuZm(Iu-o&jH,7Zl%("3?p@gJafXi?,/bFCQ->Sid6c0rf(=cOWA0Koed_PrM^k_VYRrio;9A2o=82D!4TW^S:1%07ki'Ob)r%$fkMn(/7<\A9h=Er4/cFm+;_>j3ViYb,mM"/=ZS<KQ(V@#9klpeQXBp\&#=jPr;RlB]ZtD6W;0U?uL'@2QFYDVD8bJ.$tQTLEq"8%KI<,r_Rq?Nh<cEW-<IfkMaI]A(,[>I[ChG,;nO$a\/$.'$8GutN&1`bLN3hZ>6fH1g`KQK!KXTOOJd-&,!/<Q6V_nL&$=V;e64<I%1dir.<,c+m*).gebIi7r7m9nH*Tn8o8/$X2%[9JKbs<%XW#)#Wr=r.<r2k>aq+1fbK3;Sai#:)B?.>`T2;R=9j4NRqj2u1:A1&",%AEJUs.UqNi)cI>G$^E/Z,Z.bt?V1>mZn;L$K:A1'^s0&63_QhA6Kph"@n@:Yb18mb,SsmS*(MG-4d9qGp)L6sNY+BmYcSZX4'==4%bl%BAN7H2F;UpMVd9>VJKMi:LAto\A^.5cYRlRXWj:hdhi9B;05GpK:K7i&J'Tc>"XMl<q7!1Mk.`jGfXKJsRJtS2?jiIRB&Bbb&%WnqX9_i]P0"&YO>HE\[S8ZNK<P\2?H=-h*KnR^C.<O\&>PBQ%+OaL;P_h8`IN^r4nO?<gn:"f"=L56#`XK0V=V*foia=E'#-Ur'&%LHAOkc;#1,2ACb4#FsP=F6b,tM1W7fo(nl6\_8k!DG!NjCo]4AiCh8.UT3Z`1i0?@Qr:BPb#4=i7U1,_afSU$I3a%qba*7fHbgCm%=^PN0lV`;6.*lp'#u2`"'+/rY`FTgC:)/Z'<2rU.'4mU!"FXae5A/e\[7:3'%TUN4XD/We-oBlSP#ILp\]uem'Y%D@gjO@CjmS^4%21eK8$'t+&RA.)h]dM)i,YR[AUrafE`Re?KV_A+8\;>5h9!KctcG[S"7p.\H`EfE=e8&:&e4(6d17#V]?s*gf926:.H72<VCTd.X%^oDAiWXP9RmD`tLli^_13\,O?@f9^f+$*[b[OgD=k%/ggfp]n,<Y,U+.$rLSq$L_5fa-VTl*8eS@3\]#'=';;aE(g%ieh#nQ^_'<%]i8is>UH[6!2.3C!EKOHQ7CsI;3DHB@u40d?VDeOJINnkc8AdhC.p(7dAbhiVeo.]=`c,i;j^t;F\<ULjKLZ3Lp(46%6(D,X`VNJ%]5k(9Y,5*!PX08#YMMCbOc`IVqH,Z-eSF]p'ppZ/i$$d<[\ApnBW-qPVNr8u@(t>sl`/NlF^l!aIh/f?/5A$>N(1XK"*C:(MkW$X%gC9pC5`H=PA>Ne]T>`-WSo;TEchTA&1oZS&1,G[JjfI(O$94b",<K2u(elLeN%JtuK..ld]i'u%NL&:4?Lk6)=VWeDHujpseXa/"%(1h)M\e8g08B_f>(dGD#YuX/dW/JeT]BZs!3EE-Nl6k(L;t`)eBW<RWlsQ&(].@SeY?Rr/RhuKF,TaugMUAgk+-S80Tl,%TSn7&C%!)'?]*)W^+*FX>s>%^kT@"2VqeJi"dk2BUNVEEam4i$lt;C/-(pRB?#A0FCX1A(k2QrnGbP(\flbZ$nIka2ohGTpj-W$&SR7X1tD%i@fV\#bKQ]-%jdg<)8+J[`8\odjVh4=E5L;\:N./bWB@)l4.f[#8W72LHI=U3P"6Vd^Q=(`kiVpWXF8rYdt+,-H$7W8r(^F\oI:@%@kOH,qr;5;E8Hk5?4n8$'.5Ue4/&J@19XN>k8OTYRD\M[QrbFb;Y,OgW,,51`&)#%0]e![;<dA2(FBF0Q=MS'T4BiCE$!2+'+d=%%*ZhsjGkWJtJq6i7Kd&'fD%M0CV&lpY7B2rC>_[e25aMY#PDeD9`e"fBjA7:Ckgl';;E5O>NH.@#3FpYJ9F$t/]4RD\culjM'Hrnh%p1l&R%T5$<0FpB'?$J;'lVjTAk<cG6jBr@]H!MK[lCgZW%G;'!048u2M?`%h3F#hG#lMWe'4?'k$_Jb5A*\2qi'\m70uU!u:%30.%!DBGE-!Rn.=QrbBiu/"u/9CH`)OVkQ!qO45PQ['_q^jQN&p_"N.c/tr<mnKSBc$P^+?bCY?9>)*C@5%[W0Sm:jGUO3PfQ'c#ruAY%+[f2Er,,@8dNs`*8*_YtTFrFe=O*5=!n=1Vob+<.&?DLYFs,T@T/=T,fE-+XeucoFKGf97MW?FI9R&U%Qc53E5`q[&>MTc:_ui>=%<b7-+%e11*Kh^Z0(Ca/n@\cn<EWPYRj]Ngs>7H.l1tH[QHom2gj`OFb6#/,''I;1)I'>4I'rI;QjYGp#")dpTXO.fG"jh;O+DWJT%?\[K2C;OYO&csE61VdI.WuS$#XDgGrPDO>GEaZtF,??YbF!XU6BD%(l\sa*0:a.1):^Ccq1387JXscA1N(*Sd:hUP[6=QKHTO*K#%$L_=S?i!SX(;1!d_kX>6&OJ^D5t2ZUIusSgOOBCIC()K@8BCD&3\ILlDd7s]SrX9@[TV#')M0N/HOo43Pk?KgjgB8j.ck3+("4^S%od!Ia)%/uu;oAm0JbVpd@UQ%@m'i;1EGX46`K$%dkXE:4fN=>(8O+3iGprPqoKL3\jQai<=qU7-6f!`!Yo&^(WcVh3N!m=[nFN7#%$SSj?#FX<sD6,Oj5cn%?dc\j#GCi"AQWXQ=@]2Yg$+@^U^_S>s^mI1R2JDQ:f#V#1PoXL&0!"RujN>-+[;9?+(RTReD(8^D?OSS!%8RkWF^mVggD.5nk-B`%^dB]eq3_'IHXP\_sKtfsY^(/\aQ=L`3Rk3(-MDmd%UF",H,[=@A^bEOSL(;K1!KA<K$dYZR>"G[u")F=4%.p>@&MG-akOBp6Y-I6-c>PV"@a!m:rRQY;8"&.m8+Q/,3LQN.:CF\C?BrK<7Jp*8`+tTVT-%U598+XCH.Oi]VG"&0@EN$Nb)Q2#r%L>e.A;>WhM:<N8Y>HI:f3oSkNT`V&_JV!;ER<03k&Ar>,7:WNk0$8*YFBD%n0TBPr_,?LIjpTlh/_eP'VRT,4EnP?tWYt(u(che[%72Au"#[-,F1,SZu:"_oB5.k(+%^&,Q2H@#i^p4"T_1Yt8$Lm?mNWk;8`Y50)L:_pY6p\8?/MWq96qj[u84pNaE7l5k/;tj!"Nn$X%jG2hh40Eh?=>ALEad&!X"8OEVLbB/ninSo2)lYVD+ZR,qM,S$Ffa=f_BAcVHI>).abJ:hi(a2L)gL;Ae9?5LV8koro%I^@@iAb`X%N)qV^>?skeMifLr4ijit<u0%_SMbYk@#>uNYgs$qJ^_K0[F*D@!U%%1=Vf$gJI52-f]c6.fnal%a^,<FE$r!.3E4VYE2#s`U?273%<L$8$1n,m_F'+-5/iH:$4]oo4Z,N<-/t9.5PJrc(3Ur-F1hX/dlkA]"c:Gg+@J@411fb7'#_+-FMaj)-ZB^!Kn2AKMW)-XF.s_gS%fNeN[ji%::YKLCFb.?:^c;+J6%4i_(Uc?4(+%dLW?sZj2Q"o;1Z4bokD5$ljn>!Kr'o%@+mVG*WR[\obSf^%]OFsT9'<;9_5kupJ%:iU2l[bsN:[4./s2l8hLkb5WnAJ_+PWF2*'FX%jlM`UuI+t#&lG'MAE`Bg`4f-_n_#ga'](qBt?C3&;[+;Y>$]KD,g\c8Z_;ebTV%7fb#/7D.q?J#$gM3`YXC.T>tNBJ4Y4A1=t@DTF0Q-^8p.'naEI^,RQd-eo[ph\6k:<s3Qa;M?aKF2=*i&k//=!<L,mPOt"'+<(Go%a*MEUYa);s"WKHn28QY1qdGlNfG]-MWb<J^JE&8)KQ"T,fhb@?j39?u%:d?DAO8Y!?cSoR06rQo9X"Vb[m+"InUaeu_1cS_kNGeZ%7WgHGit^[VAKilO-CLZ^QSk(b*)2Pk$unn4W>n*h'F,a)pI&Q2Xj0@;7Va$%BV`H^)Y)'<^7]%t;_2UCA::O8dP1<hin7aV;9,Yp%-_DhDZ?EJ?'OE=[(&PS.%M<C8I<d4L1lpE1Dk.__OY_hs!ar+nitJ1I(G=fcL.9f*Q&9s_^c^[%gMhQKJoNVq&cI@A7h9[*eEgB:%,Ctrf]M,Epd`cqYGT[ffRT6G+ekkdlM?hY7&8R8q9X/8A[-'LZbY49S2D?4f:h\EZ3qeG@2$bk]`V<jVmheYKB[OnslDtE\$)n2J%\DQD@Z`20+bcEKjQmDSBZ9#8]ANu4"k*bGKSe7,5,^uor,>dE_W=l'<D$U5XQgmP_pWOa;!HsP<'nHHGct.isF%-l;p-]$19BRE=%nEP>jIL.VH`T9!)RulbXG;NVRh@?V<?1E`,MNCEn^9TQX\6"!;.hp]ki`R%9PW`7bkuH9R/F8fbo3(uEq^/%H#Q(cVW]A`#hj8,P%._:o[lR<6TI*75p$!UmNaU^!C5)]skm&'Cm,h%uIi/`8BU'On,nq(?]#'Yq,c.O>Fns;&@8j<Ii4O8%#EmM'!JCtLQY0.SMO5bVR%;iqOiAEOOi;drIRL"W5Ka<'7@.UH;KM+`Z&"f&"'rtC&s1q>S:ZWEstP*o:&,2l3&nY?=l/O#Ht(,?bZDN?T(E,_6tAB4o9jcF45%'K4]"<u>LuJEB2:@L<:97K!5'L0=!oeeJi^[2.d@Ae`1>CS6kjKa0@V<0W@K./PCgnm$2%*a^qsaTI+R!NnDpl,ZpALL;T'TX+1j%BN]nNOoEFfe$?OTG@PMd?qGa@3)*:6Ef@j:d=[Wg2+Lk8dP7)ZE6<pX;)8L0#f85D>eoG]B%.7%N5TYa_]C!EHC-3A<)jqToR%k#%J/#uN3%/'=BqO(X#6brB0'p)l72lF4BiE]W*.=6"Eg>[Xo$$*_/@p#pK%%[P+&F]dU:?B-IG"$;Y)HI6bLCnF/?X#u-CZMRMhX*I%OG^t)@4HC'4"(<!Cf!iX%1=_j5[N?4FmC5D(eL.4mqU(GFsn(2h.n[aje41TBVl0`JW_p=fEU$074<oJL:jluSSD;4j'7Fg+CJ6]%Gj=C$W\"nH!\h[M2jTeNnY/sn3$08i!9`^f0OBuI."`+*Of5ZrQGXip>jr=3F(2[%/:<a8F-b2kFVZei'C<).Z$;S@Iu;^Loi5cT%l7[+>M7$!tlmWZ]O>&lOMWr3mXP:d)&M]fo/'8cq7!sOK.W9(`9<=1N=8Jqkj'`9-.kR'3WM-`<i56?`L!j-[+7aX'f4/mP>@@cE%gb68!U)qNL6c(+3enp<(^e4GE?8m[!l^+8>YblAN5$!]3S>DBW7Q;o3<Nu@3f5)3k,5b`B22n<i")'4U%&=NLIH'k$q(aPa'6[>b%hU+m\KRc[M!/\jU_]D.`&Vf:GBIcL\:d@_):mN!P$MN7+gS89K'1\$9c6j"'bA@!aOY`"D4`Mn['hjRJ$+tMFl?"XriN.qmXA%-:%Q_M(a:uZ(qKF7i-j:!S33J3P-i];phOQpZ#C7h/K;M>^k@`#u_W1rQH?HZH`iM+DW+GX4n8bB9.kn&'V\e_N_Y%Xk%9U4h8iHskt%4j5&aSNlH$!"j@MYfjHnfGUqQ^rn/@V"!BuJ\hCr=lA#kU9K;M($0a-,UdQ?Gfa)Qp&B1/D7c*=f6(HIs);9I3!R=&q^$/mb6AY#%_aY1<!eN[6>&?`#RPq)iK)Rqk0!hSOl-m\t0RO0-K$DtK]@MDTbEudO*"9g#l.P8^cfFcfRd6P-@Mj#``F08p\`"^iW"5HK'Fb-E%iEHfZ+'Dgi@5/dk3;@)V3h8Bp#tTnsB:'\nOUTO)66sAc'OCcE\8lh).*"[+J_)`jcP(lV,&-JPo/#B_du`"hA7*3"cgI>`CAF8_%PTl0@7NUh%adLIS/>C^8_Q>V[fB:iTWS;]c6^b6OS"k!!1j@]SL?9LhOABk::)iVF>Sj!_[3M8$#-W^h3])O@iQ$eW2/ZhAjW:&p%c_U;QP5<h:6`8k0iNO4]:ahkEd:?[l.3"<CO?H:C\jD.heXu9h9L>uj.9K\L7<+;$e0,^k_5:_:`rUB&W9#"XTpl8VD`.iOkr$0<%)3Ibn1Eu*,85FiE<?O@$[aI3m%bU;p)M-1dM%lRG^RVp&<:utNJ`.<?G23AN2Fi?SPY,0O;a,s`m#I$4T"h@Ne.)FOc+rA`&l[Wl%Q-m,N&*J+\Q6a_>PngRI4m)FjjsJEM.33'"R@38Fgj:l5p?T/*.`5)]N]%^LacB"ReA%j-8r]G#]VIU96*P=TIaDNO`VdYP;!KlR%G9\2!+YFn@J8aI&,=:Y>dd6MnX`!1S`[S-ZS_Q:fidoaL#%8P#VFq-ps$@eS7^3o^g!AX&,/XKW'<2=n$u0Pd)4?4-Mh+-,60A9#%=qOHcAaO`SQ@;GO76jn/_t,t5@Ro]Z?p](CnGqf%IX;Ap"5+)*#&c]IFq0YN:bWejQA\XP7\Sce`L,cGLA07o>]))h!iV'?)2kLB%[]e\\Qrdu=LMX)/s%oiCrIAu+UD]!LA=;\[e$;"4MlS[!<s-t`@b;=ZB+FBjmR:<5$M6<hIqL<f"$U?g7gsX!@]mr<olQ2bD$Qai%._hNmO6JAL/HnaUW\6mV.3A"H74I2.gJ\goiKU5.2Nt=!WYYFl.4=a-Q.&dHgug@tG7;`=M&I'n#1[Hk\#0Z<hWnFCBraPDmW',5%,"Y$/.di)BgnT%&T2*SP<%X*K3t@FT-V<JOR1cPCA*+Wc/o^r&GQV=+j;*8a@_+QN$UIWEr%&;\D^7nonT8AJo"+mcMu\bbaX\#j%_s_d0jEZ;(;slU,($N1R%kXAgc*FDZ)us$tJb?WIDG\VJdtatrGlT6A+=jJDe[*fV%Y!NS0<a*Lm@SPq!!&c=*5SUb%jBtjFp.9]%"8J8J4$]t3*/8DB-.O^mOUT-s^2fTG\H>)FB0MJ/7l6aTp*e\@*[`9`3^%f[XNX8<.VJ-;i=+K1j<XnDYnXAF>/n+9"mj0:</qPc%M-=)apt.qb0BfAVb\P`pfK?:RW,C+Nd[7kLm;\F,"&crfOCGgJ!oMpfRb=Y4-=B!l.>k#9r&cgf#To&Aga0dt;ATR#+7/hi(]`<r%R_?3C1L&$>I)RDjkU7kiM9=!i+n+qpG_f$MXAB).!>WgV^OYiI`llsp]JW_AO[E!9IE+LapN`1GZ.5*E0h!][fuT;jd72n3n0'(?%[oC>I0\O&Tq39%45IC'U'(f;%/CY]4fj:GT<m0X4Or^V`g2.)pS4:QJK=.3t0GBL&GR#n+i:)8`XM-sqX>L30O^ONc5Z(<bqA&YC%D64dK6on4dVG@Qq#dBl_)$q9`7hC?7-^UL5RJD3\N`MN/n/N^g]WGARF](Sdg@9%g4d=%hnT&\[9q%ou]>^`t/19\#N)3t^a`2tp%k7jl34O:L;hl`r'Wp.9_/22:9'ge]-[T7f`<[!u9>Y9/k.Ksq[fqVm=ACj"3;5lrrA7j8YT:AjG"I?[6Js6M<2rOm@/8-fOm=fR#%X+#)RfN`1snhJC3/sP%B\UuBf]ebpVJHm!t)\RNEgFk@#m;m@djoiqm7PIW+^8$grJUh]D2Ha4g_[MuQ'C>sO<MA<kStFM>,arb5%*EHLlkJl:%KV@3U=2P4h+n`Psf^'c*NH`r;!I+)SF3,e"](4huS4ErqUH`<g01)[\!Z(*s)MHLP@<)])$B_$M`g(d]9c^>Lk@F>4%)L:%Pcs(Lr7INZL3O1S_.4?J]?no4MWAiH4-GtPF]P<fOoAMgcD@b#fSTu6%[3&qRYgdlnZ-K>+<43;HUKmBL;<3dS!/%^J_?%FW%OkZ]BNY]F<dMT\dT;<j<Ie<9O1$g3#dhinX-H0>+6>Rn_"0dRe-f$f&"1DL\B^]!mbsHTE6aKuV7XS5rP>"H;B%\j>QWgu5LraMZ%2Q)I.ha<]*$YUr0*c@<&0*fK,n'9F3T$$Z%n#E4!;g#Q`O3aj%F9?V*0FQPQbu:'P[?%DT*Ht9R1g=?(8=#C/ESO4Z]$#J)ZpM2S%:h;>SGjVKa^rFjui,E!d8pW(4(G>M:n=6D@&Gpbpr'GQMP[:eZ0q4?,$Po)ndZUXDSJa<_>YXJ!aP3lVD4#)VV)Hf2(FdOc[,AeZ%pafcI?dt%80sN3%$<\SP"BY^#$PkF&`apJ:mNJ.8n*#dLqG(eqG+%=<b[[1n*D#/]*L/#fnZjFR1g@CU?9lStUD5VOL#PJ3LHToU%r7?$-9BQ;<U0(HsF28t6J\g&lSkCu9f)cUQV#3`=g-2&c;_)EXh5>`5MY])CDKT:AE)j@)M!C,;EATGSA^CV:HCF.FX<>/6eYY_I%+F#^40:tVoLkDbg8/"uEg1E@/+diA;Lb4R-?C,rI5uf6Hg]@KWR>Js6-ua;G$.tS?YJ!UlYZa`>*2.j06fchZfaj^I]H*r5[`Z-O%8(ZLs=lD^k,'UT]9Rq"e%G+hK4M)R.9-B`b=\Vs0--!mOZqU9JS#%]3mtn(9Z5D3_-L+7>Y2mN#<*^FeQ%8J^l!3_rP-KYUY<!]P%.S\8@k"aWGc9`rgjji=3nOsR_(7Zu8R*$UOC#=_oJt2Fi]7No#8Zc)*6JJbif8_0*c"Bq3eYJoh0+\SfSb"NUQ\(4A>CSZe%,IR;%'K:VGBBO7=<rrq(r4BSROr;Z-$St1tR^\$Y*qjpOef[qq%gReVEM/tOEU4h@DYRQ&j]l,508H".TVtsLV-0Z1LV&bO&eHc:c$cbW%9L3R&*!j@4jmLI%Ci<bOf&5!]qIQtDm=<SQQso[UW-cZ!ZHZBC7]6D+TS2S[X@+"t:XXc+KY=!F0iGsVBhnJ@(DW(^+f2&f,]Fd*%n>%^+Wps?H.]`i(`r)koDk'S=i$;2,N8l?:]3O0(W\UE>=LpMF-Eel!+hLsA+VO00YbRYd)Pg?#P+3[\I)_[?,$Jh,985hS?-H"!%+Wj^B&F1t=MbD\&%,-M'>G+l>YF&4!+K!U")CV\MoSY4:]F,JWT>LkOcEmU]7(C98!bG\7b`'%GD#,KaDe`J)^r7=PI(Al)^=-,&%OE@g"<G$ZtLo!;P?f&^LIN8LS'oZTH#i3<;B$5UcF=F7'TggEk@2fHa<f@V"mO]IpE#"p_'kE,$\%J+8I9#6DaI5Kg$UX@;+HgUo%W!jtLF1ZY\0o0Kn>(ju-C_`I'iYoX%F9Rbl&iqpdaS;E"b.T#I%JB'SDk_;J<d4Xf4aA1$?G:q?8KVYc<8BU.@VOs?gcb"V)3lk:%YF#!/e;GL]nK-OA'o3&@M,Yfdkbq""3YG1/jss%TPC4KS%B>F6L"(>lbf9uCJ].57<]B!]O[UCk94K:`6#]BYklr658R%%NPZR#!%.WP_[n_@d.6f]E:Z(3i)c+SW8qTOo_oo.QQjg[#o,-4UH5+f$a+,<`6`/ro1De/1_IjBa.4Qr1??r=/LM*cj39",M/`/G8XTsE^W%O#q(c3_Z5D!>tr_b\o_Z.u-D?5.+`MQ9J;gad6rGP-gAc[C.H_]PZF0hgY@8rU@:'rF'[eUgc/a_h.dnS72L0p\r8o`?.5^s$,NX%/%fr@ked_EPot!#E>X28PT*`&;E]/damEC@.e5`gX&VC6,TY?Hj'gl80QsU2:a0sGGTQ34XH(eI7lO(C24rC9H(-M^XSfJ,STHVe%hCE.lbBZTRe`9?H2ttU)`aC5E($Q2i&E9ZYH3nQ7am,ZGn46>We[jhE3a;[J[Hc@_U[VPgYdL4&"^\1X>:\Da`DC,k91Ic9q4fEb%!R>e@k+OscEe]n#BH)u_?+j`M/b-NOD]?kj-[#$g(>1$0Y0:o+88Fi!p(MWkLISX\aKgnC*@U`,k0+0G[CqVacpNph81Ts(AmT;3%;N$n5MT8>bBH0reIR,5Mqedf^8go9'e:5kW;Kk\OG:93faOiX)XNO7>m`G9$;\@#A=,O80+N;t"5#hekd_&aGft<PaO3(#<lspmJ%1<Qd4cs\/7$-C9#.M.>Wjlj-43&Xn9bB[.uOm;=19cL'\ZU@e5,J:%.!jAb78$4$_`E,rUhET%IW3ud)oU)I0N&g7XjsQtM%AYWC%XGu$<ju3`(Ks,P7)7e]rI/hK=2ot^8BNO=kGZ-N"$]Z5a#"-/Ki,e@f.IDZXG1E!B6QoRQ8p74RGFE91"lsP;qe+hPeG_m9XNUY%%Sh/Hd6`Y9b4s/4=%C7RKO<\;9R!TGA]ca[Lg#;p^6g/Xr<ecj\_r&_eLu>-CncLC/UPMs[35^W6$Xp6-G#f6@!F1-^,r:6VZtMEN%CpLAOD)-hp$(:pD8UsPM^Do*D?VOZ-3:K$DYEBmf,jHV&5\2tH,.C_/Zkr"(W7%9<3/k(IX7a`5RBFbZ>3]N2R']1YF3ZA-JNia>%3*a'LOc:9$jJS%N3Fk,hosM)8KT4K"%XB&WMGp3qmicK""4:?""O&aL.jL*oen7"#<EunFaQ@)V'@"fW#u&lnVooFFCX]XW2WRKR%#XE^0'Rb</$^P"a$Y_OE.LU+-b.KQ0%M$=Y.ho+#i)U?aQV.35!ZA[s[^pS<8QXX8kpZ9U_*mGWKBCr_X%)Y)*CdoN/7i-9A+PXI%cJHl0:'*TnWGA5rBX$kLlA>j4ADT6VI@N^mlf:_.6!m2R@2=O'kZk14Cgc]s"(33DKmPhJ:h#:=VKQrtYg5a`>UY7W3!U;iJi8Sb%1(ZUN6mcLr4m67kQ]C*HGCrgh(+Tkj27Z<s9#cM$IKa"MMCdrQO</8;1N,1>>Q\C^bq"%DJkU%g).0YlQG\Oe#C'?B=t#"=)W,.)%?WD$QguaB.W_aT6:O/Q1DLDWr7W'!kNY^)*YQJ`'ICY:*%Z#s]hXnZ9J@$K1K;).Q*EE\<((:Yr0J/5>mkWiO[OqljlZL*jQ4fh;%B^O\C%t9KjpDL(1?.c7dX'hF/c*qnTD)nn848j2B>TKl;k9+:e)=UI#cQP*g-MMO%ABBcZ8S<[_Wc`o&C@\Yf@tL`'mSN)86<P/1%Z@1(Q&JfsG!H&rR5Z^uH83jI$91YSMa1Z-]qDD4$DOB-:`(u!/7^5mcf8f(S:02m-86-Fg7DhVLQK;3oV&Qq`C%7"9*u:YkaWjIV%[4jY9Ei_qZ1k_\A+/'GDe'^2]**=)G2@8%Vc(@^UG`g>jl5a.CmJ;:gk0PA/G82MOjB]Z08`Jq`K#iCcB2+el#nm.dDoR[A"WH@@%,Br-f!e,t]`),0eGqVV,OD%k:&X230@6VE/mU#.-a()p-qU8/`DbubC_ciCJGrV^c=rL@nX<E5qCe*4,mFAVp5dimlCgJoePt"h)%C?nIW"7=W\"9qa=q'<M]k./@*5!2"iJ1J"MXML<bWC"TC9G2*;_%,]qS/t)V%?r5t8l,,-H.DNJ6C0N>]q8)4Is=PeQ-@OYWlVTD%3VIn/^Wboi31>)%.I2`!<T\s\:3S+eU/,6qqR5Cs4-_!<Nnk#OOAbt00R(:Eo<N1g_2:-#na1_L4sFZl$:KJCW5Tc/AJ<bH_@WDZ%9LM@Fo;N`I7r7FKM)&BGZKepNW]O`lIQ?,aKlhUIQ%)9VWr>F#(fBF/E.uS5<KK<Jh%SV0s+/.+#A"Y+*aNF]3B-JOfljG+3>D!(%0s@hpGP9cYlPL,A!5DP]<d?*IFM^5.1-cT\*MCWuk!7o-M(4]pd1/d4#fgZr"m7$r5!nio:)^lrY/f:ra*5tWEUmajVl;Yc\h.[j%es4kFD@6]&90CUTXX0)$E'_XTYJ>4#%dU^!Kp?a1QD1=hSkS-r_'LXQI`Rn&bI=sgfLjdspNLZKP6NQpnmhLMa54sF\o9sAi<U/4%GPa@Ok^rqRX%0W/,nM3-4oLM6,(T`1=Ba'3pf%VG!SK6eT*eL`rGkk8J>::$M`WqQK0*"gJL]3VZONhQO\ibJ3OB)V7i0<iYHq1`%O>Q`)J5O6X$Ys\SF,d(1lZpWc%b]iZ!1/I=&h92KnI@"m,ZZc1\OL<+H:A*-m(&E,hc/iH39]\B+sEMd,<k.l7GSk:OP;6)%%),+%Og<5MJ]ps<GW4WOS4D+?UiBEUPrYom&&Xj5^FH;jkUrVIh@nY,Un!MN@Q=M=^#o&J;'h(j;LPoI6&dl,6D3=!N)M'aoDJ%:4T12J%SU1t5R:NZ"WZED\9W0t%[lL1*.)FG%ZAM?4mD7X[=->[eAW&dD^Xr=M``j.(#Bch]o,,CXl;Mj=*hX]6)3OGq,,#8IiUB.C+uH0C%-g2X.O8N,8A*$Al71FT0NKM0$'*7?_V?SWb=1te(^PdA,m]ngI<3'Il`L=.(CtJs3X*2sQN]PH!pt5*`D4T@4?%mt[hs$^U.ot$K%0Wp*_k8(X0*8abP0?=j"L+EeK]sEhM<DdcdDlF3'kf)Q^:i5"cDY?nHO8-#T4AZ691rWTJ>!ap`M?T<tc7gO>[';%86"%7`D&:i6%M2bb,[Y"V@49P[)$snllQ]nbpmO"*(kDAmEK2]2f@]TmtZUf@bQJ'h9a%B\.FtPKU4ic=$K/=9H7T%i)>i1ZKHhQR^B5P3Gl`ucn%;KT/>Z46+i=;>RS`V+E!j#k<#Q6d'n6$M=/=.opUPt"$JbFk^5C)[W:8CV[aa+S+Zc8\mH`!qTsZQ*s=SuQ]kKG_a4^<@J-HO$CH%YBaaVp3:dC.u<4&VVG5C0IdH0)i&KPEtkG;r2[(I$r(Q#NV4ZR(iR2)A>+FAH;uc'kUP11^K0qc/phfB;&M3\Q%BI9cK+Ld%D5BX%,[rRHO%5R0Ar9*aV0q\?/@\1CP+(0![-h]'a65ZAl*\Za$oS8!0&de[=crJU*,:d]7@)n),Buu41aZksBn5m!eq4873(kO(l=A^&%QQHM(PH\,-s(!pVmclhZ<E3qenuDOcd!0;%SM$2NJg&gAp](p)*]5uukbJMT+M;tL;pdi`hG5*3[#I0tc?m9ni:31);b3-6+ushn%JmuU2I!K"s]Y6.&$hDNAr$1?Xp\;1EkK5nEI(@O)Vm+XN.7_Pm0Vc-Y0/NJn8&^G:5Thj<*7sjIW@>;mSdT-<:LWsqXjPqmZ1hrP%-b32(j#b\8ZRCb[%/"IaUs+A#@R^,ukWsbj'T"Z2<K'Xh-/^[9i)?K1@]?/Rr5oAdWM%Hf5]h."o,`mK.qtL[m^WHiGE-M5!Kfe^%YUYP.if$<W>t_rb6?HUf;KIOaV_FGC-bHr0gct9`mF+\/W\Ob7a1?+KQrt31[;7m'j&H[\1p]$/Mh4MRm-!cp-:!_hmGa&R=oV)L%LX$qZ\@oV<`_OZ(]JQ,H"6]K#W$5T:hDK/f?+8I$OV9>V#JTdA[opsA6eV'j`aNe`op_PUAeV_:i]q&GBXjHTpJidJdcJ9mRb9iG%.`O*W$pt]0\/a%=4F"e;jMN-kFn.:&-&%OlEr2B+ni)2V+VOAS1Lr(#1`N'A>Gg7P#-RL$AC9,uZs'b7P"j2ugU'l8gdXnG3ZG5_%JA<;19jA[WnB7'&-egg!<&7J+--Ana8?bYW3oYKh1u\\Y#*6I26\.`iTc8C4HFZcR\To;l_7-Ync7pPL#g`0YIZ-JM$jWkP)u2K/%/M<^r%R*Bkin<MZ:j*?R77s%p7TAu>U28DOH.pt`R=2?KF?-Et>ieX8?7snn/8<)?M->#:&pgqYY)Xu50k]N)ahc#b<6g$$D`Im(%H^r7Y.+>PZEs,!)GGH;2YTRmMOe6dh68,)DSdj4\*B1B=1k0j$@g<H%7$K7lmFiK'!W/s/FNAba[p^"C%:ll<'S3aB>NBmZ/bj3?%Rh>A8%%iLC*-K9U)3@RI`0+5.4$&eu&.Yn?,BWVlLsDGbMgPeNL<M4MTLa!"r,OLu%p5BkhlbZ-fa;-_1pCG(/_4`rPmg1S*5rrN%boUDue=!?6Cc/5L9O&i:9%W2s1d)Cs3ED*VQIUpTF/jti4*+''jO26DBf#@T#FO([^85*A44*Ca-j7J!;Yb#M8q+=+p(+-aQ6_eP%$EXih!lajQ&[?UL]Y"PFr&W3P$YU`9b6t!h7%'E%$qs-F@09%qa)=:&NoRh2%u1o#lj4gqrIT4pH?"$IOIXU2#D?S"lA8^<.d+q<%YGD+:P-P_EdmMf8l8r0q%oOBr,Vd"45Tt"!Gl/?P>=95Bc$FiHZ-U4*iSloJXMb/i)h.hks)DtNqhL=;@h9.2$&+5TCqsefm_A+e%HTrnT"L'=UWk1Iuftj'`eE3)&jbl951>UtD0QVfX?h^b;3\%=,b<PsDl2RicT>&t.+4L/>L@CgQC\G/#4b*@s(Ou&Brk#rDrX[>i%s3&G)IecY8s0j)bqr@F8]ZX+H##/l/:]c[niBQS+6i-^fhYl!.55sf-hgPOp%o;*^jlu5_q"XAdrqPCNc-u:YYA_%&qqJl8rlqWr%p%7^EcM)e^m9b<d^'BVQYB'cXmWe(!;>3#i^VB_'$`p,AqEOn2Po*'(is5U)r6N,Brp\eTd@ZIEjQZ-*rmQ?l:Og1#rkl@-$OTfg%R$Mks$D60l*m?=R#&#cBB%cg7@AuN!TKd7+*/sQNbgO@)a<9in*JZ=9LOZ2*OW0`B_t8^4ZOG8iG0+a[D\.E'ILel:q7mPbVuRN,%e9?GAWl:oTHgD)3\7Qk`MTo!hlnX4rn.gc!b&6a(15U1YqCY3Pe#u$qoZo,YTWktLqkFP,Qmg\fX[R[hL^$Ka%oTt1im(VioV(d$%Sb1=H"J:5jS6VD0NT>tL[e'4=/TQdZB!WJPqTQKA9CF4,`Xkl@N&_J@Xhh(KU4"_3NQ"^XTBYMl>ogC3I/N6\^\Zc[2#Zj%V7U0H%Cb6K'iZ)2l(#`dW)%.Ts]TWu,&<J0+KG4HOoq$)b`LXjKA`/tCO*=M71IruU!$E3L,4G[j7&"4h9T,Yqc[Jrq?'7l`&s+fhJeA.a%+_$RBb/e)*)5lPK0Gt8!J3L4ha`0?*KB+b.9*$C!DirS>*J2GF)$KEr@hrK*KHttrC]Z]ub[2<j1Hgu4MP"Ce"XF0[a%T&*6U!pR%((,L"qShr_@mTG4\p"ZmId@fZf@=3'!&Vr!bbmnn(-]_aH9DM7:$WPqBXriUo;d9NcN[f,ZagU&o0;j@#+T&c/JM3@E][>i/=@;I%l\c\-/'GB9\SQh+@-DTlDlc9.JZor_<>iRt8ES:c9c.^_Oi2;p_j)3_&.W<1%qXlT5$)BUfuADX!cb)M?uN_-2AT"$57+BipnnI8%CPd;GA6+?DSo36:E88sY=<7PP#Q^222@_ouLe<\n_<Z;ep)*`heVmL1]+)W_U0DL2a-n?3/Bs@fWEI-D`HAGB00r8CLJlr%Xl)I-%&tGjCbb\qZRDd%14$4p9=k+I9TS"luU>^"K4s;K]#;4O=9c;EpQ^H"!.9me_9_r@Wi9GT!Sq"s&CB*#87lnhgQa#\#k0XE!*:.AH%&cL^<-h`uQ3/hrSb^:)gnBa=F4iU+JnJEnjpj/=B!7B"IOgbU4X+UQ[4HB>7O"3U=jlUdqe7`$<NVB$JAm[$lc>^BO'$X(2<3ULY%.l,64']H+NV(;6<*$Me\%7[=IWB"jtV)7+16=.ub0!37N<sZoZKE\kC,4J*KSYiK3oO(V<H*Z]RmMF5H3'%sV]/_-Hqeg\LRNF?Q%orVs.li2+kNk]nMpnko+T6Tc>3da[GY3=NagN.Ur&;`s=d=2j^r*I]l9e3MSW5jE@RAW4GEGu6MH5G0Ia0'JW=>!#?0-J9e`:4:t%B%h%=BJMi02`D.USeo"bC07EoHP2Y-5Z"K.&LA;04!^H,@tZ:GC+f:UP!t'pNVqAX7paU-!1aSN'UI22TqQ/T4s/Z(1POqm.866r%"Pn=81&O)1kH@H)$m@N"?c?;Q:_iDmX?*N<K-<pIp"k-KZN=3W\pZD';E%d?(#nDf;EJe]G"HT/]S'qPc6'ZEn6&P:bXgm*cTl_A%p[U'>de4>U<Qbn>m*WeN.7E7:\r1O)O\Fpj,Ut</h1%"*\,QA,Mf]s'O?K5i3[!k*Fbt"n]S'qPij[5,J(Dpf1PY/="6DIKq`Ar8%ofHO\1[FGQOc\E7kuiN7;shug1ZD\HhXl_B,"IhMq43T:m7F5X)1)WGDIOcH0CpWodRIN9iTm"6ZQUKRR48O&Q4K.hM<V]aA4_l.%`eM_kaag<>NJbaOmV=T58!EBC'uP":(PK9,&Xo1B5B@.7p=ru(9o'k9q*Ki,$IGS6-s9SaS&]B%+\eqsS*1\e^`Qbt!IbLai*p7O%"1RJsoZ^F#Pl$eGqaIj^YOGuuo<2alI_K"Ks.dj1VB("7o*m7mT&/Kmh0u(L1[IgR?u?p&'gc>`'%%La;uV[d@9d5UNr8BO1M\&X%CL!KU&S(eYf1U@j,a;9/?P)$/0F0&KpnBHp$Xd+.)@ASd;;iAJW7(GKe%a7=UqbH#'7Jf3%#0"Ecb[itI5OjS*g2u0,Jl88r@:85%Z`KNQ9tqdT@bt)aZ!ouV41^^.!mTrX$Xj.@#XpmZc'klH-otA:SM`I0Uf;8!9G@3XP#]%%gcIo&_gbedW/J=i79\."/39Yb=UFEQ%0n:Wc>Tl@'oc-tip\)po9hsq)@RWH"Ut2:]W3KiLSA)ALT:9l$Ym/3f-D2N1p3IC#@)&]O[Wi5BXLhLO(^FZ%&CFgAPnl\#&*0cR%efGSK!*aM/Y0g*;DfC15P;'[A=a0\,q>52+jX7.M2sgni':ASJgCJf:C/KW9V00nO3Ml%@Z,t4r"`3`aPMsdFG`5[@U(:L!^"7CV%%SJ=Z`rWj@kO!NoF,\//b5%+NT5Ua,<*YHWSZ$#*g>a6&&8I8$Q?-m:4UN)p;@_MA.>TC?]l`/-A?i</^.FaU'rJ4EhbmA'j"=Ua%p:EJC-u)u\D)r?`^)qO_"C@qVa))/E`i0@3gnl#NUCXtY_(XLaG:<hQ;ginn.HGU*VDlo19lIo$VIVuBgndZCp(,o"\f0Vr3R1@5%Dq!%1n7UFODeeOlVFWC7m;\K\nGM*ckm$HuJ(USKDcRs'.0@)e5OQsNlGrL92Zm.q]33n\ANP@$?!?)A2SOX,Q8bq*F-iVUa#V%Y%E0HkK31XJ(JAsu\GH=UdkjC2J=7Y\iM7T9o`n,06J6`GT]!UFo.[FR?SO+V3:f@GD%e.&2AN)J^&n=hS-q$pe)+#(FTQ1/Z4#T.]%LQ);2L>H6QQu`PYa3J+&ElWS(Hn^&1m8DfjbILn*aoT`a@TG-*+HZrPO@6JOQmm_p!*R67J=]Q-2ts5IF4Bth?kU/2cHb=$TPNS-%J,L;6m('^eRhfZ`7E`uSY4eW6&fb8Np[`#8n@&joYMYF[X2j(Y-j2Q-9m"0t5!@!FR`-UW7JDD(qWRc&r\=/:kSQjdUY!4$SqEjN%nGrUC-.5<Rjs:*LlVNZ256eHh5CV*+]QuI'I.$::q.hX1qQilPgS';>eF\3rmQRo=M])23POBj2cC!APY6rV-Itiusm4A;6<Va($%GSjYXG,WA!Y98"H0j;k]^\8`GSgh=MkAYCS,7`,bXl,C2^c`)\W:*f7+hYPG<!MVbG^H_V?2/Oc4=X/E*aX=r(u>*mVX86Vq<OsG%9r7*TIjVq0Cg>20a#Z1t7(Cc1^2k(VQ+IT!cbp8DJ=I=J#7)=F.>nr-/_S1,ZVZmXeNcIliHPknYP\;u,@UJV,)cqa]*O0U235?\%VY5#so>a>l$>$mFrll-#A-c2Oq=Yg!@^>Z`NFM5JIZeXQ9$9p7h]M]Mc8.nfIRtAdp\``q@`@:1^],%T`nQEV#"4rB1^I$g7l,_.%'s5elg?I+LCl:KC[G"?Nd9^>.LZb&CkmpH_dj_g3qiZ(^R-m1m<15N_5&&E"GP@u*c^jGn1i]Xq=8ECaqq)h$,$0QMQ+%]4W8?<`%7G6=o'*e*5!X:GC?`X7;/Gb:fJ3Q'=LAaHgU.kK[YTqAO.9YQ4lM1fjSu8-*/>#@cL$!0&nQE4on@V\Qf"lEPWlo\ud$$M/Rgu/m%P$LSg0qf/\Ws2'''fLAMDb"UB]adF>4u%_.M1#VQ;XLrapjl^a/bSu^^;g)<4FjhGR@=_lVO@'X,OSNe;oOg#h<mT><==<(6uA+A%La!XaZ#@F\8&TB;[&,C0H_9sF+?EJlEW?!`g[X6BI3J"%[NO!^)^:LS<D2J[C7L`)FWfrkVpiL,)1e?rA-#91:rOX#d^BFF8ogs.%n/P>dB>#C02\@b@9<VYgUbNmV//gYFFDO-n$19F_l6b97?-"e;q$B3OD7>;.O#+D^g`u,eR_:gG\"0VE;\E9j65bPB*%^K:r3LXN%[i0_mjJgk9]$Bm]fe87P4GrZR/[Jqg;_176E)=dTn/V%-h(_r6]ShXQHTo*S$NW+XRnYLn'1oPn+%/<NN`U-c@YccET^:<&g,<>F%M-tnDblHGf./0XNW8"Z]!E=GXa^&Q9@GuUO"B#HkO>Zgt;9"K"MtC*k.q3J[Yo/\;Q?Krud#eAVMtZ/@h'9Mo?b;6)\Cp::Jj0(\%rRWr4iVh`9(4CFODr(6EfnK%<??R#%'@JUE",5TO'7qm'rZ?N5`]=%/m(.F+s2F0UBK,J-*.J:or5IE%+rr*PGB4<B\<q66q.C<a%7WO;qMP>q:ZVV1=lJSlP_Z:5R*S9IqJ<Xe=!63b7,Ub%bi_"FR:rMOb_RtYbl\[a>pd4X>N82+BQ;iK8/Gd.WJEZU`3M^9,;J-_s%]8/JMRBKr6%-Qr][..oA6c:^!qs&<o+Lc@8p$`s<a:YnEdWOmAV0(OHf.=g#9.uXL:$A)7;7M`EU^ucf+G:Q?`\hBP6CX,.c96J:%f1klF;8^fTb49g"(Z;FW>tf^>*e]kXLIrq*5%o([W?0ki>@VN9rBdQ;1M&bKH>$lt7i_/JktuPlcV$g?MPp?4Ola/;I+0?7B/K%(%mcqZ/!-Z]XMuLIflkU-[or]TjH4[ZrkjsE\%fBm=b$2n&1Yl@G&8IaQ<HUJ1^t!ZHDNlHH,?/(pmI.pX0Hm:O(M1)+GeO$T0T06$%R4TsI5j1`T77Ttm&)1j(XNuf/)Vg:4HYn>011tftHk(?4>SUbQDjTtEO3]06G#0dmqYO";qt)!>2&r]eHTj98=/D*E1k#N[q;OE1%ZHifTm2)Ki%=\qDb'eXrOf.`':b70a,//ujM)PTb,7_?R\iJK"_Q3(o3=pMD]CcQZ'(5LkLi3u*3;8OMnI=TbfA#hK:Q/TJ\cU'V%h_ap8lp>L`Y'/S)4nS6i-g0!s1&.`%Sn1'4@iP)a'6:&*$8`OknCs%rMYLd-AA2U>g2u7$'_1!b;==./cPlAQLi4Q6p4q,T&tRm6%NI9)NHqi&DE85*)bBGaB2V=NiGr02X<;=!nS+Wq$cq"DVM(T22-4G+9Ao[A<I_:1%>ifd*DY;sKe6Q:P8E8jE\p<.ZVs*\$Ca@fE%ogRiIB0R?WE&:gLEOm#?d<Qh-Krd^l*KUioeF(@*\lQu0n";CAWTTai+jmmq\FJco\;>*UHjR^:E;MNi%rNIPh$j%dSW@&>Yb0m\%Y.oIkq"?WNO5EuFaDU$t;Be3q0*u+m+XEUT^<\SbalRn/^HekBGODkRR);hR_fHr-$Y,34n1HbWnLjI&^AjY2a6fY,4j^WRR!CfZ%V-Ml#g9%.,OmaB<Ip7LXa7EPgW/.u/^r5IuL,ueBD2^JCf$<Q)]Bh/]p%T/GJ_bf-<pT.RkAl81eNP(H_i56oAZbo8s1CiC47*3J%.?Bg*g"ei3G3lO9G]=9Mj$e<@M`(>EKk"uS)M@Vg0#[%q#5ANaZ7j?Q2\C?Bl_DrGcY_tf#bhFs$s_tqNr!W-*CVV?ZH.E*/ftVF%CYJI/n3UX98rkIt55nZ!>_HrEGm4KL$+`<m`+;hR$Er&Y[TBZ=6j^P8'n;3B7g-8D[pD6*LOH^.ktS#;J<b;AEMU]_5KHe.#Vp@c%,U]BY9QI>\Lc(sb]EIf>SK7TcJ,K7h+91@3^]3?oq"Vb=n,DtVs8DKPpYUI]+Mu0K3WA1*],s69l$r^(%j.GCoO%Xoc]B-M`8eW-%`S^[4hnAnO)fb#U~>%AI9_PrivateDataEnd